var searchIndex = JSON.parse('{\
"bin_prot":{"doc":"Serde Bin-prot","t":[2,3,2,8,3,2,6,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,5,11,0,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,0,11,13,13,13,13,4,13,13,13,13,13,13,13,6,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,0,0,5,5,5,5,13,13,3,13,8,13,13,13,13,13,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,0,12,11,0,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,4,13,13,13,13,13,3,13,13,13,13,13,3,13,13,13,13,4,13,13,3,13,13,3,4,13,13,13,3,13,3,13,13,13,13,13,13,3,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["BinProtRule","Deserializer","Layout","ReadBinProtExt","Serializer","Value","VariantHash","WriteBinProtExt","bin_read_bool","bin_read_bool","bin_read_bytes","bin_read_bytes","bin_read_char","bin_read_char","bin_read_integer","bin_read_integer","bin_read_nat0","bin_read_nat0","bin_read_polyvar_tag","bin_read_polyvar_tag","bin_read_string","bin_read_string","bin_read_unit","bin_read_unit","bin_read_variant_index","bin_read_variant_index","bin_write_bool","bin_write_bool","bin_write_char","bin_write_char","bin_write_float32","bin_write_float32","bin_write_float64","bin_write_float64","bin_write_integer","bin_write_integer","bin_write_nat0","bin_write_nat0","bin_write_polyvar_tag","bin_write_polyvar_tag","bin_write_unit","bin_write_unit","bin_write_variant_index","bin_write_variant_index","borrow","borrow","borrow_mut","borrow_mut","caml_hash_variant","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_loose","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","end","end","end","end","end","end","end","error","from","from","from_reader","from_reader","integers","into","into","mode","new","rdr","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","to_writer","try_from","try_from","try_into","try_into","type_id","type_id","value","with_layout","Custom","DeserializingLooseTypeWithoutLayout","DestinationIntegerOverflow","EndOfStream","Error","InvalidByte","InvalidIntegerByte","InvalidOptionByte","InvalidUtf8","Io","LayoutIteratorError","MapSizeNotProvided","Result","SeqSizeNotProvided","UnexpectedEndOfLayout","UnimplementedRule","UnknownCustomType","UnknownPolyvarTag","VariantIndexTooLarge","WontImplement","borrow","borrow_mut","custom","custom","fmt","fmt","from","from","into","source","to_string","try_from","try_into","type_id","0","0","allowed","byte","byte","bytes","dtype","got","index","message","typ","integer","nat0","deserialize","serialize","deserialize","serialize","Bool","Char","EnumData","Float","Index","Int","List","Nat0","Option","Polyvar","Record","String","Sum","Tuple","Unit","Value","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deserialize","deserialize","eq","fmt","from","from","index","index","index_into","inner","into","into","layout","name","ne","ser","serialize","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","0","0","0","index","name","name","tag","value","value","Bigstring","BinProtRule","Bool","Char","Custom","CustomForPath","Float","HashTblEntry","Hashtable","Inherited","Int","Int32","Int64","Layout","List","Nat0","NativeInt","Option","Polyvar","Polyvar","Record","RecordField","Reference","Resolved","ResolvedPayload","RuleRef","SelfReference","String","Sum","Summand","Tagged","TaggedPolyvar","Tuple","TypeAbstraction","TypeClosure","TypeVar","Unit","Unresolved","UnresolvedPayload","Vec","bin_prot_rule","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into_iter","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","0","0","0","0"],"q":["bin_protbin_prot::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bin_prot::error::Error","","","","","","","","","","","bin_prot::integers","","bin_prot::integers::integer","","bin_prot::integers::nat0","","bin_prot::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bin_prot::value::Value","","","","","","","","","","","","","","","","bin_prot::value::layoutbin_prot::value::layout::BinProtRule","","","","","","","","","","","","","","","","","","","bin_prot::value::layout::Polyvar","","bin_prot::value::layout::RuleRef",""],"d":["","A BinProt deserializer that reads from a BufReader Can …","","Extension trait for readers implementing io::Read to allow …","Serializer for writing BinProt bytes to a writer","","Type alias for hash result","extension trait for writers implementing io::Write to …","Read a bool","Read a bool","read some bytes","read some bytes","Read a single byte as char","Read a single byte as char","Read a variable length integer","Read a variable length integer","Read a variable length natural integer","Read a variable length natural integer","Read the tag of a polyvar variant (4 bytes) You can …","Read the tag of a polyvar variant (4 bytes) You can …","Read a string","Read a string","Read a unit","Read a unit","Read the index of a variant","Read the index of a variant","Write a bool","Write a bool","Write a single char character","Write a single char character","Write a float","Write a float","Write a 64 bit float","Write a 64 bit float","Write a variable length integer","Write a variable length integer","bin_prot also supports a slightly different encoding …","bin_prot also supports a slightly different encoding …","For Polyvar types write the 4 bytes of the tag/hash for a …","For Polyvar types write the 4 bytes of the tag/hash for a …","Write a unit","Write a unit","for enums/variants with n variants the variant index is …","for enums/variants with n variants the variant index is …","","","","","Hash the label string (ASCII not UTF-8) into a OCaml style …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The loose deserializer version of deserialize Only …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Error objects and codes","Returns the argument unchanged.","Returns the argument unchanged.","Convenience method, create a BinProt deserializer from the …","Create a BinProt deserializer from a reader","The variable length integer types used in BinProt By …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Deserialization mode, StronglyTyped or LooselyTyped","Create a new serializer given a writer","BufReader to read the bytes from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convenience function, creates  serializer and uses it to …","","","","","","","The Value enum, a loosely typed way of representing any …","Converts a strong type deserializer into a loose type …","Some user-defined error occurred.","Have not provided a layout","Destination integer type too small","The end of stream was reached unexpectedly.","Error type for BinProt serialization and deserialization","Invalid byte encountered when deserializing","Invalid integer prefix byte","Invalid byte encountered deserializing option","Invalid utf-8 char","Error in underlying IO","Layout iterator errored, can be due to invalid layout or …","Size not given when serializing a sequence","A result whose error type is <code>Error</code>.","Size not given when serializing a sequence","The layout ended before the reader is empty","There is no logic implemented to deserialize this rule yet","An unknown custom type found in layout that deserializer …","When deserializing a polyvar the tag does not match any …","Encountered a variant index larger than allowed","Functionality will not be implemented. Probably it does …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Bytes that are allowed in this context","The byte that is invalid","Invalid byte encountered","Invalid byte sequence encountered","The data type that the deserializer is attempting to …","Invalid byte encountered","Invalid index encountered","The user-defined error message.","The custom type identifier","Implements serializer and deserializer for BinProt …","Implements serializer and deserializer for BinProt …","Deserializer for variable length integer","Serializer for variable length integer","Deserializer for variable length natural integer","Serializer for variable length natural integer","Boolean","Char","This is the data that needs to be serialized and passed to …","Float","A type that can be used to index into a <code>bin_prot::Value</code>.","Variable length integer","List of types (variable length)","Variable length natural integer","Option","Polymorphic Variant (Polyvar) types","records/structs","String","Sum/enum types","Tuples (fixed length list)","Unit type","Recursive enum that can define any BinProt serializable …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Index of variant","Return None if the key is not already in the array or …","Inner reveals an Option variant as a Rust Option type …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Defines a BinProt layout A layout is a data structure that …","Name of variant","","Serialization implementation for a BinProt loosely typed …","","","","","","","","","","","","","","","","","","","","summand index","summand/variant name","Polyvar variant name","Polyvar variant tag (e.g. hash)","value wrapped by variant","value wrapped by variant","A set of utils for dealing with <code>bigarrays</code> of <code>char</code>","Recursively defined BinProtRule is how the type tree is …","Boolean","OCaml char type","Type that does not use standard derived BinProt encoding","does not occur in source files, used in traverse","Floating point number","Entry in a BinProt hash table hash types for the key and …","Hash table of BinProt types","An instance of Γ(a)","Variable length integer","32 bit Integer","64 bit Integer","The main top level type for a layout file. Parse into this …","Variable length list of any BinProt type","Variable length natural Integer","OS Native integer","OCaml option","τ ≤ Γ(a), τ is an instance of Γ(a) and (Γ(a) a type …","τ ≤ Γ(a), τ is an instance of Γ(a) and (Γ(a) a type …","records/structs","Field of a BinProt record with a name and a value","track indirections for debugging","Resolved Payload","Resolved reference of payload","Define rule reference into Resolved and Unresolved Payload","inside a recursive type, list of type parameters","OCaml string type (different to a rust string)","sum types/enums","Variant of a BinProt sum type (enum) has a name, index and …","An instance of Γ(a)","τ ≤ Γ(a), τ is an instance of Γ(a) and (Γ(a) a type …","tuple","parameterized type: ’a t = …","recursive parameterized type with bindings","your type","Unit type","Unresolved Payload","Unable to resolve reference of payload","fixed length of BinProt types","Rule defining this layout","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,20,22,20,22,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,22,22,22,22,22,22,22,0,20,22,0,20,0,20,22,20,22,20,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,20,22,20,22,20,22,0,20,32,32,32,32,0,32,32,32,32,32,32,32,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,50,51,51,52,53,51,54,55,56,57,0,0,0,0,0,0,36,36,0,36,0,36,36,36,36,36,36,36,36,36,36,0,37,36,37,36,36,36,36,37,36,36,36,37,36,36,37,58,36,37,36,0,37,36,0,37,36,36,37,36,37,36,37,36,59,60,61,62,63,64,65,66,67,68,69,69,70,70,69,70,30,0,30,30,30,30,30,0,30,41,30,30,30,0,30,30,30,30,0,30,30,0,30,43,0,0,30,30,30,0,41,0,30,30,30,30,30,43,0,30,46,46,30,38,39,40,41,42,43,44,45,46,30,38,39,40,41,42,43,44,45,30,38,39,40,41,42,43,44,45,30,38,39,40,41,42,43,44,45,46,30,38,39,40,41,42,43,44,45,46,30,38,39,40,41,42,43,44,45,46,30,38,39,40,41,42,43,44,45,46,30,38,39,40,41,42,43,44,45,30,46,30,38,39,40,41,42,43,44,45,30,38,39,40,41,42,43,44,45,46,30,38,39,40,41,42,43,44,45,46,30,38,39,40,41,42,43,44,45,46,30,38,39,40,41,42,43,44,45,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,78,82,83,85,86,87,88,89],"f":[0,0,0,0,0,0,0,0,[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[[4,[3]]]]]],[[],[[2,[[4,[3]]]]]],[[],[[2,[5]]]],[[],[[2,[5]]]],[[],[[2,[6]]]],[[],[[2,[6]]]],[[],[[2,[[0,[6,7]]]]]],[[],[[2,[[0,[6,7]]]]]],[[],[[2,[8]]]],[[],[[2,[8]]]],[[],[[2,[9]]]],[[],[[2,[9]]]],[[],2],[[],2],[[],[[2,[3]]]],[[],[[2,[3]]]],[1,[[11,[10]]]],[1,[[11,[10]]]],[5,[[11,[12,10]]]],[5,[[11,[12,10]]]],[13,[[11,[12,10]]]],[13,[[11,[12,10]]]],[14,[[11,[12,10]]]],[14,[[11,[12,10]]]],[[[16,[15]]],[[11,[12,10]]]],[[[16,[15]]],[[11,[12,10]]]],[[[16,[17]]],[[11,[12,10]]]],[[[16,[17]]],[[11,[12,10]]]],[8,[[11,[12,10]]]],[8,[[11,[12,10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[3,[[11,[12,10]]]],[3,[[11,[12,10]]]],[[]],[[]],[[]],[[]],[18,19],[20,2],[20,2],[20,2],[20,11],[20,2],[20,11],[20,2],[20,11],[20,2],[20,11],[[20,18],2],[[20,18],11],[20,11],[20,2],[20,11],[20,2],[20,11],[20,11],[20,2],[20,11],[20,2],[20,11],[20,2],[20,11],[20,2],[20,2],[20,11],[20,2],[20,11],[[[20,[21,0]]],2],[20,2],[20,11],[[20,18],2],[[20,18],11],[20,2],[20,11],[20,11],[20,2],[20,11],[20,2],[20,11],[20,2],[[20,18],11],[[20,18],2],[[20,12],11],[[20,12],2],[[20,18,12],11],[[20,18,12],2],[20,11],[20,2],[20,11],[20,2],[20,11],[20,2],[20,11],[20,2],[20,11],[20,2],[20,11],[[20,18],11],[[20,18],2],[22,2],[22,2],[22,2],[22,2],[22,2],[22,2],[22,2],0,[[]],[[]],[21,[[2,[23]]]],[21,[[20,[21,0]]]],0,[[]],[[]],0,[[],22],0,[[22,1],2],[22,2],[[22,5],2],[22,2],[22,2],[[22,13],2],[[22,14],2],[[22,18],2],[22,2],[[22,18],2],[22,2],[[22,24],2],[[22,25],2],[[22,15],2],[[22,26],2],[22,2],[[22,[27,[12]]],2],[[22,18],2],[[22,18,8,18],2],[22,2],[[22,[27,[12]]],2],[22,2],[[22,18],2],[[22,18,12],2],[[22,18,8,18,12],2],[[22,12],2],[[22,18,12],2],[[22,18,8,18,12],2],[[22,28],2],[[22,8],2],[[22,17],2],[[22,3],2],[22,2],[[22,18],2],[[22,18,8,18],2],[22,2],[[],2],[[],11],[[],11],[[],11],[[],11],[[],29],[[],29],0,[[[20,[21,0]],30],[[20,[21,0]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[31,32],[31,32],[[32,33],34],[[32,33],34],[10,32],[[]],[[]],[32,[[27,[35]]]],[[],9],[[],11],[[],11],[[],29],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[36,36],[[]],[[],36],[[],[[11,[37]]]],[[],[[11,[36]]]],[[36,36],1],[[36,33],34],[[]],[[]],[36,36],0,[36,[[27,[36]]]],[36,[[27,[36]]]],[[]],[[]],0,0,[[36,36],1],0,[37,11],[36,11],[[]],[[],11],[[],11],[[],11],[[],11],[[],29],[[],29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[30,30],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[11,[46]]]],[[],[[11,[30]]]],[[],[[11,[38]]]],[[],[[11,[39]]]],[[],[[11,[40]]]],[[],[[11,[41]]]],[[],[[11,[42]]]],[[],[[11,[43]]]],[[],[[11,[44]]]],[[],[[11,[45]]]],[[46,33],34],[[30,33],34],[[38,33],34],[[39,33],34],[[40,33],34],[[41,33],34],[[42,33],34],[[43,33],34],[[44,33],34],[[45,33],34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[30],[46,11],[30,11],[38,11],[39,11],[40,11],[41,11],[42,11],[43,11],[44,11],[45,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[15,"bool"],[6,"Result"],[15,"u8"],[3,"Vec"],[15,"char"],[8,"FromPrimitive"],[8,"Unsigned"],[15,"u32"],[3,"String"],[3,"Error"],[4,"Result"],[15,"usize"],[15,"f32"],[15,"f64"],[15,"i64"],[8,"Into"],[15,"u64"],[15,"str"],[6,"VariantHash"],[3,"Deserializer"],[8,"Read"],[3,"Serializer"],[8,"Deserialize"],[15,"i16"],[15,"i32"],[15,"i8"],[4,"Option"],[15,"u16"],[3,"TypeId"],[4,"BinProtRule"],[8,"Display"],[4,"Error"],[3,"Formatter"],[6,"Result"],[8,"Error"],[4,"Value"],[3,"EnumData"],[3,"RecordField"],[3,"Summand"],[3,"HashTblEntry"],[4,"Polyvar"],[3,"TaggedPolyvar"],[4,"RuleRef"],[3,"UnresolvedPayload"],[3,"ResolvedPayload"],[3,"Layout"],[8,"ReadBinProtExt"],[8,"WriteBinProtExt"],[13,"Io"],[13,"UnknownPolyvarTag"],[13,"InvalidByte"],[13,"InvalidIntegerByte"],[13,"InvalidUtf8"],[13,"InvalidOptionByte"],[13,"VariantIndexTooLarge"],[13,"Custom"],[13,"UnknownCustomType"],[8,"Index"],[13,"Nat0"],[13,"Bool"],[13,"String"],[13,"Char"],[13,"Int"],[13,"Float"],[13,"Option"],[13,"Record"],[13,"Tuple"],[13,"List"],[13,"Sum"],[13,"Polyvar"],[13,"Option"],[13,"Record"],[13,"Tuple"],[13,"Sum"],[13,"Polyvar"],[13,"List"],[13,"Hashtable"],[13,"Vec"],[13,"Reference"],[13,"TypeVar"],[13,"SelfReference"],[13,"TypeAbstraction"],[13,"TypeClosure"],[13,"Custom"],[13,"CustomForPath"],[13,"Tagged"],[13,"Inherited"],[13,"Unresolved"],[13,"Resolved"]]},\
"bin_prot_checker":{"doc":"","t":[13,13,13,13,13,13,13,13,4,13,13,13,13,13,3,13,3,13,4,4,4,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12],"n":["A","A","B","B","Bool","C","C","Deserialize","E","Enum","Int","Int32","Int64","Nat0","Opt","Record","S","Serialize","Subcommand","Test","V","Variant","a","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","clap","clap","cmd","deserialize","deserialize","deserialize","deserialize_test","fmt","fmt","fmt","from","from","from","from","from","from","from_clap","from_clap","from_str","into","into","into","into","into","into","main","path","serialize","serialize","serialize","serialize","test","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0"],"q":["bin_prot_checker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bin_prot_checker::Test","","","","","","","","bin_prot_checker::V","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Output file, stdout if not present","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[2,5,2,5,7,2,5,13,0,7,7,7,7,7,0,7,0,13,0,0,0,7,4,4,12,13,2,4,5,7,12,13,2,4,5,7,4,12,13,12,2,4,5,0,2,4,5,12,13,2,4,5,7,12,13,7,12,13,2,4,5,7,0,12,2,4,5,7,12,7,12,13,2,4,5,7,12,13,2,4,5,7,12,13,2,4,5,7,17,18,19,20,21,22,23,24,25,26,27],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],1],[[],1],0,[[],[[3,[2]]]],[[],[[3,[4]]]],[[],[[3,[5]]]],[[6,7],[[3,[7,8]]]],[[2,9],10],[[4,9],10],[[5,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[11,12],[11,13],[14,[[3,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[2,3],[4,3],[5,3],[7,3],0,[7,15],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"App"],[4,"E"],[4,"Result"],[3,"S"],[4,"V"],[8,"Read"],[4,"Test"],[4,"Error"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[3,"Opt"],[4,"Subcommand"],[15,"str"],[3,"String"],[3,"TypeId"],[13,"Nat0"],[13,"Bool"],[13,"Int"],[13,"Int32"],[13,"Int64"],[13,"Enum"],[13,"Record"],[13,"Variant"],[13,"A"],[13,"B"],[13,"C"]]},\
"mina_consensus":{"doc":"Contains definitions of data structures and APIs for mina …","t":[0,0,0,12,8,16,8,3,3,11,11,11,11,11,11,10,11,10,11,11,12,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,12,10,11,12,11,11,11,11,10,11,12,10,11,10,11,11,11,10,11,10,11,10,11,10,11,12,12,10,11,12,11,10,11,11,11,11,11,11,11,11,11,13,13,4,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["common","error","genesis","0","Chain","Chain","Consensus","ConsensusConstants","ProtocolStateChain","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","config","config","consensus_state","consensus_state","default","delta","deref","deref","deref_mut","deref_mut","devnet","drop","drop","epoch_slot","epoch_slot","eq","fmt","from","from","genesis_block","genesis_block","genesis_state_timestamp","global_slot","global_slot","grace_period_end","init","init","into","into","is_short_range","is_short_range","k","last_vrf_hash_digest","last_vrf_hash_digest","length","length","mainnet","ne","push","push","relative_min_window_density","relative_min_window_density","select_longer_chain","select_longer_chain","select_secure_chain","select_secure_chain","slots_per_epoch","slots_per_sub_window","state_hash","state_hash","sub_windows_per_window","to_owned","top","top","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CandidatesMissingSubWindowDensities","CandidatesNotFound","ConsensusError","ConsensusStateNotFound","FailedVrfHashDigest","GlobalSlotNotFound","InvalidBlake2bOutputSize","InvalidHeight","InvalidSubWindowDensityLen","TopBlockNotFound","borrow","borrow_mut","deref","deref_mut","drop","eq","fmt","fmt","from","init","into","ne","to_string","try_from","try_into","type_id","vzip","0","0","DEVNET_CONFIG","Genesis","GenesisInitConfig","MAINNET_CONFIG","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","from_genesis_config","init","init","init","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["mina_consensus","","","mina_consensus::common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_consensus::error","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_consensus::error::ConsensusError","","mina_consensus::genesis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Implements common APIs for the blockchain in the context …","Types that represent errors in mina consensus operations","This modules contains all genesis block related stuff","","Trait that represents a chain of block data structure","Chain type","A trait that defines operations for consensus calculation","Constants used for the conensus","A chain of ProtocolState","","","","","","","Constants used for consensus","","he function returns the consensus state of a block or …","","","Maximum permissable delay of packets (in slots after the …","","","","","Pre-defined constant values for devnet","","","The function computes the epoch slot number of a block. …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Gets ProtocolState of the genesis block","","Timestamp of genesis block in unixtime","The function returns the global slot number of a chain or …","","Number of slots before minimum density is used in chain …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks whether the fork is short range wrt to candidate …","","Point of finality (number of confirmations)","This function returns the hex digest of the hash of the …","","The function the length of a chain. The output is the …","","Pre-defined constant values for mainnet","","Pushes an item into the chain","","Calculates the relate minimum window density wrt to …","Computes the relative minimum window density of the given …","Selects the longer chain when there’s a short range fork.","","Top level API to select between chains during a fork.","","Number of slots per epoch","No of slots in a sub-window = 7","This function returns hash of the top block’s protocol …","","Sub windows within a window","","This function returns the last block of a given chain. The …","","","","","","","","","","Candidates missing some sub window densities","candidates not found","Type that represents errors in mina consensus operations","Consensus state not found","Blake2b digest generation failed","Global slot not found","Invalid Blake2b output size","header must have height 1 greater than top","Invalid sub window density length","Top block not found","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Config instance for initializing genesis block in devnet","Trait for genesis block initialization logic","Config for initializing genesis block","Config instance for initializing genesis block in mainnet","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a genesis block from config","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,1,0,21,0,0,0,2,1,2,1,1,1,21,1,22,1,1,2,2,1,2,1,2,2,1,22,1,1,1,2,1,22,1,2,22,1,2,2,1,2,1,21,1,2,22,1,22,1,2,1,22,1,21,1,21,1,21,1,2,2,22,1,2,1,22,1,2,1,2,1,2,1,2,1,12,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,23,24,0,0,0,0,18,17,19,18,17,19,18,17,17,19,19,18,17,19,18,17,19,18,17,19,25,18,17,19,18,17,19,18,17,19,18,17,19,18,17,19,18,17,19],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[[]],[[],2],[1,2],[[],[[4,[3]]]],[1,[[4,[3]]]],[[],1],0,[5],[5],[5],[5],[[],2],[5],[5],[[],[[4,[6]]]],[1,[[4,[6]]]],[[1,1],7],[[1,8],9],[[]],[[]],[[],[[4,[10]]]],[1,[[4,[10]]]],0,[[],[[4,[11]]]],[1,[[4,[11]]]],0,[[],5],[[],5],[[]],[[]],[1,[[13,[7,12]]]],[[1,1],[[13,[7,12]]]],0,[[],[[13,[14,12]]]],[1,[[13,[14,12]]]],[[],5],[1,5],[[],2],[[1,1],7],[[],[[13,[12]]]],[[1,10],[[13,[12]]]],[1,[[13,[6,12]]]],[[1,1],[[13,[6,12]]]],[1,[[13,[1,12]]]],[[1,1],[[13,[1,12]]]],[[],[[13,[1,12]]]],[1,[[13,[1,12]]]],0,0,[[],[[4,[15]]]],[1,[[4,[15]]]],0,[[]],[[],4],[1,[[4,[10]]]],[[],13],[[],13],[[],13],[[],13],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[5],[5],[5],[[12,12],7],[[12,8],9],[[12,8],9],[[]],[[],5],[[]],[[12,12],7],[[],14],[[],13],[[],13],[[],16],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[5],[17,18],[5],[19,18],[5],[5],[5],[5],[5],[5],[5],[[]],[[]],[[]],[18,20],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],16],[[],16],[[],16],[[]],[[]],[[]]],"p":[[3,"ProtocolStateChain"],[3,"ConsensusConstants"],[3,"ConsensusState"],[4,"Option"],[15,"usize"],[15,"u32"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"ProtocolState"],[3,"GlobalSlot"],[4,"ConsensusError"],[4,"Result"],[3,"String"],[6,"Fp"],[3,"TypeId"],[3,"MAINNET_CONFIG"],[3,"GenesisInitConfig"],[3,"DEVNET_CONFIG"],[3,"ExternalTransition"],[8,"Consensus"],[8,"Chain"],[13,"FailedVrfHashDigest"],[13,"InvalidBlake2bOutputSize"],[8,"Genesis"]]},\
"mina_crypto":{"doc":"Contains definitions of common simple crypto primitives …","t":[0,0,14,0,12,12,3,3,3,3,8,8,3,3,18,3,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,8,5,10,10,2],"n":["hash","hex","impl_from_for_hash","prelude","0","0","AuxHash","ChainHash","CoinBaseHash","EpochSeed","Hash","Hashable","LedgerHash","NonSnarkStagedLedgerHash","PREFIX","PendingCoinbaseAuxHash","StagedLedgerHash","StateHash","VrfOutputHash","aux_hash","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","domain_string","domain_string","domain_string","domain_string","domain_string","domain_string","domain_string","domain_string","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","hash","hash","impl_from_for_hash","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","ledger_hash","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","non_snark","pending_coinbase_aux","pending_coinbase_hash","prefixes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_roinput","to_roinput","to_roinput","to_roinput","to_roinput","to_roinput","to_roinput","to_roinput","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","ACCOUNT","BASE_SNARK","BOWE_GABIZON_HASH","CHECKPOINT_LIST","COINBASE","COINBASE_STACK","COINBASE_STACK_DATA","COINBASE_STACK_STATE_HASH","EPOCH_SEED","HashPrefix","MERGE_SNARK","PENDING_COINBASES","PROTOCOL_STATE","PROTOCOL_STATE_BODY","RECEIPT_CHAIN_SNAPP","RECEIPT_CHAIN_USER_COMMAND","SIDE_LOADED_VK","SIGNATURE_MAINNET","SIGNATURE_TESTNET","SNAPP_ACCOUNT","SNAPP_BODY","SNAPP_PAYLOAD","SNAPP_PREDICATE","SNAPP_PREDICATE_ACCOUNT","SNAPP_PREDICATE_PROTOCOL_STATE","TRANSITION_SYSTEM_SNARK","VRF_MESSAGE","VRF_OUTPUT","Error","HexEncodable","skip_0x_prefix_when_needed","to_hex_string","try_from_hex","HexEncodable"],"q":["mina_crypto","","","","mina_crypto::hashmina_crypto::hash::prefixes","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_crypto::hex","","","","","mina_crypto::prelude"],"d":["","","","","","","","","","","Trait that any internal hash wrapper type must implement …","Any internal type that needs to be hashed must implement …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,8,9,0,0,0,0,0,0,0,0,38,0,0,0,0,7,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,1,2,2,3,3,4,4,5,5,6,7,8,8,9,9,10,10,1,1,1,2,2,2,2,3,3,3,4,4,4,4,5,5,5,6,6,7,7,8,8,8,9,9,9,10,10,10,1,2,3,4,5,8,9,10,39,39,0,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,7,1,2,3,4,5,6,7,8,9,10,6,7,6,0,1,2,3,4,5,6,7,8,9,10,1,2,4,5,6,7,8,9,1,2,3,4,5,8,9,10,1,1,2,2,3,3,4,4,5,5,6,7,8,8,9,9,10,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,40,40,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[[],10],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[],[[13,[12]]]],[[],[[13,[12]]]],[[],[[13,[12]]]],[[],[[13,[12]]]],[[],[[13,[12]]]],[[],[[13,[12]]]],[[],[[13,[12]]]],[[],[[13,[12]]]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[1,1],14],[[2,2],14],[[3,3],14],[[4,4],14],[[5,5],14],[[6,6],14],[[7,7],14],[[8,8],14],[[9,9],14],[[10,10],14],[[1,15],[[17,[16]]]],[[1,15],18],[[2,15],18],[[2,15],[[17,[16]]]],[[3,15],18],[[3,15],[[17,[16]]]],[[4,15],[[17,[16]]]],[[4,15],18],[[5,15],[[17,[16]]]],[[5,15],18],[[6,15],18],[[7,15],18],[[8,15],18],[[8,15],[[17,[16]]]],[[9,15],18],[[9,15],[[17,[16]]]],[[10,15],18],[[10,15],[[17,[16]]]],[19,1],[[]],[20,1],[19,2],[[]],[21,2],[22,2],[23,3],[[]],[19,3],[[]],[24,4],[25,4],[19,4],[[]],[19,5],[26,5],[[]],[27,6],[28,7],[[]],[[]],[[[30,[29]]],8],[31,8],[32,9],[[]],[[[30,[29]]],9],[[]],[33,10],[19,10],[34,[[17,[1]]]],[34,[[17,[2]]]],[34,[[17,[3]]]],[34,[[17,[4]]]],[34,[[17,[5]]]],[34,[[17,[8]]]],[34,[[17,[9]]]],[34,[[17,[10]]]],[[]],[[]],0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[1,1],14],[[2,2],14],[[3,3],14],[[4,4],14],[[5,5],14],[[6,6],14],[[7,7],14],[[8,8],14],[[9,9],14],[[10,10],14],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,35],[2,35],[4,35],[5,35],[6,35],[7,35],[8,35],[9,35],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[34,[[17,[1]]]],[[],17],[[],17],[34,[[17,[2]]]],[[],17],[34,[[17,[3]]]],[34,[[17,[4]]]],[[],17],[[],17],[34,[[17,[5]]]],[[],17],[[],17],[34,[[17,[8]]]],[[],17],[34,[[17,[9]]]],[[],17],[34,[[17,[10]]]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],12],[37,17],0],"p":[[3,"StateHash"],[3,"LedgerHash"],[3,"ChainHash"],[3,"CoinBaseHash"],[3,"EpochSeed"],[3,"StagedLedgerHash"],[3,"NonSnarkStagedLedgerHash"],[3,"AuxHash"],[3,"PendingCoinbaseAuxHash"],[3,"VrfOutputHash"],[15,"usize"],[3,"String"],[4,"Option"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[6,"HashV1"],[6,"StateHashV1Json"],[6,"LedgerHashV1Json"],[6,"Fp"],[6,"ChainHashV1Json"],[6,"CoinBaseHashV1Json"],[6,"Hash2V1"],[6,"EpochSeedHashV1Json"],[6,"StagedLedgerHashV1"],[6,"NonSnarkStagedLedgerHashV1"],[15,"u8"],[3,"Vec"],[6,"AuxHashJson"],[6,"PendingCoinbaseAuxHashJson"],[6,"VrfOutputHashV1Json"],[15,"str"],[3,"ROInput"],[3,"TypeId"],[8,"AsRef"],[8,"Hash"],[8,"Hashable"],[8,"HexEncodable"]]},\
"mina_ledger":{"doc":"Functionality relating to the ledger or genesis ledgers","t":[16,8,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","GenesisLedger","MinaLedgerMerkleHasher","MinaLedgerMerkleTree","RocksDbGenesisLedger","accounts","accounts","borrow","borrow_mut","depth","depth","deref","deref_mut","drop","from","init","into","into_iter","new","to_mina_merkle_ledger","to_mina_merkle_ledger","try_from","try_into","type_id","vzip"],"q":["mina_ledger","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Error type that can be produces when trying to access the …","A genesis ledger provides access to its accounts by …","Type alias for mina merkle ledger hasher","Type alias for mina merkle ledger","A genesis ledger backed by a RocksDB instance","Return a iterator over the accounts in this genesis ledger …","Return a iterator over the accounts in this genesis ledger …","","","Return the depth of the ledger","Return the depth of the ledger","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Create a new rocksDB genesis ledger given a database …","Build mina merkle ledger tree with a fixed height","Build mina merkle ledger tree with a fixed height","","","",""],"i":[9,0,0,0,0,9,9,2,2,9,9,2,2,2,2,2,2,2,2,9,9,2,2,2,2],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[],1],[[],1],[1],[1],[1],[[]],[[],1],[[]],[2,[[4,[3]]]],[5,2],[[],6],[[],6],[[],7],[[],7],[[],8],[[]]],"p":[[15,"usize"],[3,"RocksDbGenesisLedger"],[8,"Iterator"],[3,"Box"],[6,"DB"],[6,"MinaLedgerMerkleTree"],[4,"Result"],[3,"TypeId"],[8,"GenesisLedger"]]},\
"mina_merkle":{"doc":"mina-merkle crate provides traits and data structure …","t":[3,16,3,16,16,16,16,8,13,13,16,16,16,8,8,13,8,8,8,16,4,8,3,3,3,3,8,8,3,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,10,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,11,11,11,0,10,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,2,2,0,6,3,6,3,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,0,11,11,11,11,11,11,0,11,11,6,3,6,3,6,17,17,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,17,17,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,6,8,8,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,10,10,11,11,11,11,11,10,11,11,11,10,11,11,0,10,0,11,11,11,10,11,11,11,10,11,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,3,6,3,13,4,3,6,3,3,3,8,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,0,12,11,11,12,12,0,0,10,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,12,3,4,13,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,13,13,13,13,13,3,17,13,3,4,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,3,3,3,12,12,8,8,8,0,0,0,10,0,0,10,10,10,0,0,11,10,10,10,0,10,10,11,10,10,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,8,10,10,10,10,8,10,10,10,10,13,13,8,4,6,11,11,11,11,11,11,11,11,11,11,11,10,10,10,5,11,11,11,11,10,10,10,11,11,11,11,11,11,8,18,11,5,3,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,5,5,5,5],"n":["DefaultMerkleProof","Error","FixedHeightMode","Hash","Hash","Hash","Hash","HeightMode","InvalidIndex","InvalidProof","Item","Item","Item","MaskableMerkleTree","MaskingMerkleTree","MergerFailure","MerkleHasher","MerkleMerger","MerkleProof","MerkleProof","MerkleProofError","MerkleTree","MerkleTreeNodeMetadata","MinaMerkleTree","MinaPoseidonMerkleHasher","MinaPoseidonMerkleMerger","PoseidonLegacyHasherPoolProvider","SparseMerkleTree","VariableHeightMode","add","add","add","add","add_batch","add_batch","add_batch","add_batch","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","commit","count","count","count","default","default","default","default","depth","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","eq","fixed_height","fixed_height","fixed_height","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_pool","get_proof","hash","hash","height","height","height","height","impl_poseidon_legacy_hasher_pool_provider","impl_poseidon_legacy_hasher_pool_provider","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","macros","merge","merge","new","new","new","new","prefixes","register","root","root","root","root_hash","root_hash","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unregister","update","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_capacity","lockfree_object_pool","once_cell","pasta","Fp","FpParameters","Fq","FqParameters","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fp","fq","from","from","init","init","into","into","pallas","try_from","try_from","try_into","try_into","type_id","type_id","vesta","vzip","vzip","Fp","FpParameters","Fq","FqParameters","Affine","G_GENERATOR_X","G_GENERATOR_Y","PallasParameters","Projective","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","from","init","into","mul_by_a","to_owned","try_from","try_into","type_id","vzip","Affine","G_GENERATOR_X","G_GENERATOR_Y","Projective","VestaParameters","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","from","init","into","mul_by_a","to_owned","try_from","try_into","type_id","vzip","D","DomainParameter","Fp","Hashable","Hasher","PoseidonHasherKimchi","PoseidonHasherLegacy","ROInput","append_bool","append_bytes","append_field","append_hashable","append_roinput","append_scalar","append_u32","append_u64","borrow","borrow_mut","clone","clone_into","create_kimchi","create_legacy","default","deref","deref_mut","digest","domain_string","drop","eq","fmt","from","hash","init","init","init_and_hash","into","into_bytes","ne","new","poseidon","reset","roinput","to_bytes","to_fields","to_owned","to_roinput","try_from","try_into","type_id","update","vzip","Poseidon","PoseidonHasherKimchi","PoseidonHasherLegacy","borrow","borrow_mut","deref","deref_mut","digest","drop","from","init","init","into","reset","try_from","try_into","type_id","update","vzip","ROInput","BaseField","CompressedPubKey","CurvePoint","Keypair","MAINNET","NetworkId","PubKey","ScalarField","Schnorr","SecKey","Signature","Signer","TESTNET","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","create_kimchi","create_legacy","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_address","from_address","from_hex","from_parts_unsafe","from_point_unsafe","get_address","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_address","into_address","into_bytes","into_compressed","into_point","into_scalar","is_odd","keypair","ne","ne","ne","ne","ne","new","new","pubkey","public","rand","rand","rx","s","schnorr","seckey","sign","sign","signature","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","x","Keypair","KeypairError","NonCurvePoint","Result","SecretKeyBytes","SecretKeyHex","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","fmt","from","init","into","public","to_owned","to_string","try_from","try_into","type_id","vzip","AddressBase58","AddressChecksum","AddressLength","AddressRawByteLength","AddressVersion","CompressedPubKey","MINA_ADDRESS_LEN","NonCurvePoint","PubKey","PubKeyError","Result","XCoordinate","XCoordinateBytes","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","fmt","from","init","into","is_odd","to_owned","to_string","try_from","try_into","type_id","vzip","x","Schnorr","SecKey","Signature","rx","s","ExtendedDensePolynomial","ExtendedEvaluations","FieldHelpers","adjacent_pairs","chunked_polynomial","dense_polynomial","eval_polynomial","evaluations","field_helpers","from_bits","from_bytes","from_hex","hasher","math","modulus_biguint","pow","scale","scale","serialization","shift","shiftr","size_in_bytes","square","to_bits","to_bytes","to_chunked_polynomial","to_hex","AdjacentPairs","borrow","borrow_mut","deref","deref_mut","drop","from","from","from","init","into","into_iter","next","try_from","try_into","type_id","vzip","ChunkedPolynomial","borrow","borrow_mut","deref","deref_mut","drop","evaluate_chunks","from","init","into","linearize","polys","size","try_from","try_into","type_id","vzip","ExtendedDensePolynomial","eval_polynomial","scale","shiftr","to_chunked_polynomial","ExtendedEvaluations","pow","scale","shift","square","DecodeHex","DeserializeBytes","FieldHelpers","FieldHelpersError","Result","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","fmt","from","from_bits","from_bytes","from_hex","i32_to_field","init","into","modulus_biguint","size_in_bytes","to_bits","to_bytes","to_hex","to_owned","to_string","try_from","try_into","type_id","vzip","CryptoDigest","PREFIX","digest","ceil_log2","SerdeAs","borrow","borrow_mut","deref","deref_mut","deserialize_as","drop","from","init","into","ser","serialize_as","try_from","try_into","type_id","vzip","deserialize","serialize","make_prefix_coinbase_merkle_tree","make_prefix_merkle_tree"],"q":["mina_merklemina_merkle::macros","","mina_merkle::macros::mina_curves","mina_merkle::macros::mina_curves::pasta","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_merkle::macros::mina_curves::pasta::fp","","mina_merkle::macros::mina_curves::pasta::fq","","mina_merkle::macros::mina_curves::pasta::pallas","","","","","","","","","","","","","","","","","","","","","","","mina_merkle::macros::mina_curves::pasta::vesta","","","","","","","","","","","","","","","","","","","","","","","mina_merkle::macros::mina_hasher","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_merkle::macros::mina_hasher::poseidon","","","","","","","","","","","","","","","","","","","mina_merkle::macros::mina_hasher::roinput","mina_merkle::macros::mina_signermina_merkle::macros::mina_signer::keypair","","","","","","","","","","","","","","","","","","","","","","","","","","mina_merkle::macros::mina_signer::pubkey","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_merkle::macros::mina_signer::schnorr","mina_merkle::macros::mina_signer::seckey","mina_merkle::macros::mina_signer::signature","","","mina_merkle::macros::o1_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_merkle::macros::o1_utils::adjacent_pairs","","","","","","","","","","","","","","","","","mina_merkle::macros::o1_utils::chunked_polynomial","","","","","","","","","","","","","","","","","mina_merkle::macros::o1_utils::dense_polynomial","","","","","mina_merkle::macros::o1_utils::evaluations","","","","","mina_merkle::macros::o1_utils::field_helpers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_merkle::macros::o1_utils::hasher","","","mina_merkle::macros::o1_utils::math","mina_merkle::macros::o1_utils::serialization","","","","","","","","","","","","","","","","mina_merkle::macros::o1_utils::serialization::ser","","mina_merkle::prefixes",""],"d":["Merkle proof implementation of a single leaf node, for …","Error type","Type state mode for a tree with a fixed height","Hash type","Type of the hash values","Type that represents the hash value","Type that represents the hash value","Type state mode for a tree","Index of a data node should be positive","The merkle proof is invalid","Type of the leaf data","Type that MerkleHasher calculates hash from","Item type","A merkle tree that can be masked by …","A merkle tree that can be used to mask …","Errors occur in hash merger","Trait for implementing binary merkle tree hasher","Trait that merges the hashes of child nodes and calculates …","Merkle proof trait of a single leaf node, for details …","Type of the merkle proof","Type that represents errors in calculating hashes for a …","Trait for implementing binary merkle tree","Metadata of a give tree node, including index and depth in …","Special complete binary merkle tree that is compatible with","Hasher for mina binary merkle tree that uses poseidon hash","Merger for mina binary merkle tree that uses poseidon hash …","Trait that provides poseidon hasher pool as it’s …","Trait for implementing sparse binary merkle tree. It is …","Type state mode for a tree with a variable height that …","Adds a new leaf","Adds a new leaf","Adds a single MerkleProof","Adds a single MerkleProof","Adds a batch of leaves in the give order","Adds a collection of MerkleProof","","","","","","","","","","","","","","","","","","","","","","","","","Commits changes from a super::MaskingMerkleTree to the …","Number of leafs","","","","","","","distance to the root node","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the fixed height if applicable","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets hasher pool for the associated Item type","Gets the merkle proof of an item with the 0-based index of …","Calculates hash from an item and its associated metadata","","Height of the tree, leaf nodes that store data are counted","","","distance to the leaf nodes that store data","Macro that auto-implements PoseidonLegacyHasherPoolProvider","Macro that auto-implements PoseidonLegacyHasherPoolProvider","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Re-exports external types that macro implementations …","Merges hashes of child nodes, with metadata of the target …","","Creates merkle proof instance index is the node index …","Creates a new instance of a variable height MinaMerkletree","Creates a new instance of a fixed height MinaMerkleTree","Creates a new instance of MerkleTreeNodeMetadata with the …","This module defines functions that generate domain prefix …","Register a super::MaskingMerkleTree","Root hash, lazy-evaluated","","","Calculates the root hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unregister a super::MaskingMerkleTree","Update a super::MaskingMerkleTree with changed notified …","Verifies if the proof is valid","Verifies if the proof is valid","","","","","","","","","Creates a new instance of MinaMerkleTree with estimated …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","G_GENERATOR_X = 1","G1_GENERATOR_Y = …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","G_GENERATOR_X = 1","G1_GENERATOR_Y = …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Generic domain string argument type","The domain parameter trait is used during hashing to …","","Interface for hashable objects","Interface for hashing <code>Hashable</code> inputs","Poseidon hasher type with experimental kimchi plonk sponge …","Poseidon hasher type with legacy plonk sponge constants","Random oracle input structure","Append a single bit","Append bytes","Append a base field element","Append a <code>Hashable</code> input","Append another random oracle input","Append a scalar field element","Append a 32-bit unsigned integer","Append a 64-bit unsigned integer","","","","","Create an experimental kimchi hasher context","Create a legacy hasher context","","","","Obtain has result output","Generate unique domain string of length <code>&lt;= 20</code>.","","","","Returns the argument unchanged.","Hash input and obtain result output","Set the initial state based on domain separation string …","","Initialize state, hash input and obtain result output","Calls <code>U::from(self)</code>.","Conversion into vector of bytes","","Create a new empty random oracle input","Mina Poseidon hasher","Restore the initial state that was set most recently","Random oracle input structures and algorithms","Serialize random oracle input to bytes","Serialize random oracle input to vector of base field …","","Serialization to random oracle input","","","","Consume hash <code>input</code>","","Poseidon hasher context","Poseidon hasher type with experimental kimchi plonk sponge …","Poseidon hasher type with legacy plonk sponge constants","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","Random oracle input structure","Base field element type","Compressed public keys consist of x-coordinate and …","","Keypair structure","Id for mainnet","Mina network (or blockchain) identifier","Public key","Scalar field element type","Schnorr signer context for the Mina signature algorithm","Secret key","Signature structure","Interface for signed objects","Id for all testnets","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an experimental kimchi signer context with domain …","Create a legacy signer context with domain parameters …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize Mina address into public key","Deserialize Mina address into compressed public key (via …","Deserialize a keypair from secret key hex","Create a keypair from scalar field <code>secret</code> element and …","Create a public key from curve point Note: Does not check …","Obtain the Mina address corresponding to the keypair’s …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Serialize public key into corresponding Mina address","Serialize compressed public key into corresponding Mina …","","Convert public key into compressed public key","Convert public key into curve point","Convert secret key into scalar field element","Parity of y-coordinate","Keypair structures and algorithms","","","","","","Create a secret key from scalar field element","Create a new signature","Public key structures and algorithms","Public key","Generate a random keypair","Generate a random secret key","Base field component","Scalar field component","Mina Schnorr signature scheme","Secret key structures and helpers","Sign <code>input</code> (see <code>Hashable</code>) using keypair <code>kp</code> and return the …","","Mina signature structure and associated helpers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify that the signature <code>sig</code> on <code>input</code> (see <code>Hashable</code>) is …","","","","","","","","","X-coordinate","Keypair structure","Keypair error","point not on curve","Keypair result","Invalid secret key bytes","Invalid secret key hex","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Public key","","","","","","","Invalid address base58","Invalid address checksum","Invalid address length","Invalid raw address bytes length","Invalid address version","Compressed public keys consist of x-coordinate and …","Length of Mina addresses","Point not on curve","Public key","Public key errors","Public key Result","Invalid x-coordinate","Invalid x-coordinate bytes","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Parity of y-coordinate","","","","","","","X-coordinate","Schnorr signer context for the Mina signature algorithm","Secret key","Signature structure","Base field component","Scalar field component","An extension for the DensePolynomial type.","An extension for the Evaluations type.","Field element helpers Unless otherwise stated everything …","This module hosts the AdjacentPairs type, which can be …","","This adds a few utility functions for the DensePolynomial …","<code>eval_polynomial(coeffs, x)</code> evaluates a polynomial given …","This adds a few utility functions for the Evaluations …","","Deserialize from bits","Deserialize from bytes","Deserialize from little-endian hex","This module provides the CryptoDigest trait, which …","This modules implements some math helper functions.","Get the modulus as <code>BigUint</code>","Raise each evaluation to some power <code>pow</code>","This function “scales” (multiplies all the …","This function “scales” (multiplies) a polynomial with …","This adds a few utility functions for serializing and …","Utility function for shifting poly along domain coordinate","Shifts all the coefficients to the right.","Field size in bytes","Square each evaluation","Serialize to bits","Serialize to bytes","Convert a polynomial into chunks.","Serialize to hex","You can create a new AdjacentPairs from an iterator using:","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","This struct contains multiple chunk polynomials with …","","","","","","This function evaluates polynomial in chunks.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Multiplies the chunks of a polynomial with powers of …","The chunk polynomials.","Each chunk polynomial has degree <code>size-1</code>.","","","","","An extension for the DensePolynomial type.","<code>eval_polynomial(coeffs, x)</code> evaluates a polynomial given …","This function “scales” (multiplies all the …","Shifts all the coefficients to the right.","Convert a polynomial into chunks.","An extension for the Evaluations type.","Raise each evaluation to some power <code>pow</code>","This function “scales” (multiplies) a polynomial with …","Utility function for shifting poly along domain coordinate","Square each evaluation","","","Field element helpers Unless otherwise stated everything …","","","","","","","","","","","","","Returns the argument unchanged.","Deserialize from bits","Deserialize from bytes","Deserialize from little-endian hex","","","Calls <code>U::from(self)</code>.","Get the modulus as <code>BigUint</code>","Field size in bytes","Serialize to bits","Serialize to bytes","Serialize to hex","","","","","","","This trait can be implemented on any type that implements […","The domain separation string to use in the hash. This is …","Returns the digest of <code>self</code>. Note: this is implemented as …","Returns ceil(log2(d)) but panics if d = 0.","You can use SerdeAs with [serde_with] in order to …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","You can use this module for serialization and …","","","","","","You can use this to deserialize an arkworks type with …","You can use this to serialize an arkworks type with serde …","Builds a hash prefix for a node at the given height in a …","Builds a hash prefix for a node at the given height in a …"],"i":[0,55,0,55,56,57,58,0,9,9,56,58,59,0,0,9,0,0,0,60,0,0,0,0,0,0,0,0,0,56,56,60,60,56,60,3,3,15,3,61,62,9,2,4,5,15,3,61,62,9,2,4,5,2,4,5,2,4,5,17,56,3,3,3,2,4,5,5,15,3,61,62,9,2,4,5,15,3,61,62,9,2,4,5,15,3,61,62,9,2,4,5,9,63,2,4,9,9,2,4,5,15,3,61,62,9,2,4,5,59,3,58,62,56,3,3,5,0,0,15,3,61,62,9,2,4,5,15,3,61,62,9,2,4,5,0,57,61,15,3,3,5,0,6,56,3,3,55,15,2,4,5,9,15,3,61,62,9,2,4,5,15,3,61,62,9,2,4,5,15,3,61,62,9,2,4,5,6,17,55,55,15,3,61,62,9,2,4,5,3,0,0,0,0,0,0,0,24,26,24,26,24,26,24,26,24,26,0,0,24,26,24,26,24,26,0,24,26,24,26,24,26,0,24,26,0,0,0,0,0,0,0,0,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,64,0,0,0,0,0,0,0,23,23,23,23,23,23,23,23,23,23,23,23,0,0,23,23,23,32,64,23,23,23,23,32,32,23,32,23,65,23,23,0,32,0,23,23,23,64,23,23,23,32,23,0,0,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,0,0,0,0,40,0,0,0,0,0,0,0,40,46,35,36,37,38,39,40,46,35,36,37,38,39,40,35,36,37,38,39,40,35,36,37,38,39,40,0,0,46,35,36,37,38,39,40,46,35,36,37,38,39,40,46,35,36,37,38,39,40,35,36,37,38,39,35,35,36,36,37,39,39,46,35,36,37,38,39,40,36,37,35,35,36,35,46,35,36,37,38,39,40,46,35,36,37,38,39,40,36,37,40,36,36,38,37,0,35,36,37,38,39,38,39,0,35,35,38,39,39,0,0,41,46,0,35,36,37,38,39,40,35,36,39,46,35,36,37,38,39,40,46,35,36,37,38,39,40,46,35,36,37,38,39,40,41,46,46,35,36,37,38,39,40,37,0,0,44,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,35,44,44,44,44,44,44,43,43,43,43,43,0,0,43,0,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,37,43,43,43,43,43,43,37,0,0,0,39,39,0,0,0,0,0,0,66,0,0,67,67,67,0,0,67,68,66,68,0,68,66,67,68,67,67,66,67,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,66,66,66,66,0,68,68,68,68,47,47,0,0,0,47,47,47,47,47,47,47,47,47,47,47,67,67,67,0,47,47,67,67,67,67,67,47,47,47,47,47,47,0,69,69,0,0,70,70,70,70,70,70,70,70,70,0,70,70,70,70,70,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1],[1],[[[3,[2]],1]],[[[3,[4]],1]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[4,4],[5,5],[[]],[[]],[[]],[6],[[],7],[[[3,[2]]],7],[[[3,[4]]],7],[[],3],[[],2],[[],4],[[],5],[5,8],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[9,9],10],[[],[[11,[8]]]],[2,[[11,[8]]]],[4,[[11,[8]]]],[[9,12],13],[[9,12],13],[[2,12],13],[[4,12],13],[[5,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[3,7],[[11,[15]]]],[5],[5],[[],8],[[[3,[2]]],8],[[[3,[4]]],8],[5,8],0,0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[5,11],[5,11],[[7,[16,[7]],[16,[11]]],15],[[],[[3,[4]]]],[8,[[3,[2]]]],[[7,8],5],0,[17,10],[[],11],[[[3,[4]]],11],[[[3,[2]]],11],[[],18],[15,18],[[]],[[]],[[]],[[],19],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[17,10],[[]],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,3],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[7],[7],[7],[7],[7],[7],0,0,[[]],[[]],[[],7],[[],7],[[]],[[]],0,[[],18],[[],18],[[],18],[[],18],[[],20],[[],20],0,[[]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[21,21],[[]],[[],21],[7],[7],[7],[[21,21],10],[[]],[[],7],[[]],[[]],[[]],[[],18],[[],18],[[],20],[[]],0,0,0,0,0,[[]],[[]],[22,22],[[]],[[],22],[7],[7],[7],[[22,22],10],[[]],[[],7],[[]],[[]],[[]],[[],18],[[],18],[[],20],[[]],0,0,0,0,0,0,0,0,[[23,10],23],[23,23],[[23,[25,[24]]],23],[23,23],[[23,23],23],[[23,[25,[26]]],23],[[23,8],23],[[23,27],23],[[]],[[]],[23,23],[[]],[[],[[29,[28]]]],[[],[[29,[30]]]],[[],23],[7],[7],[[],[[25,[24]]]],[[],[[11,[19]]]],[7],[[23,23],10],[[23,12],[[18,[31]]]],[[]],[[],[[25,[24]]]],[[],32],[[],7],[[],[[25,[24]]]],[[]],[[],[[16,[33,34]]]],[[23,23],10],[[],23],0,[[],32],0,[23,[[16,[33,34]]]],[23,[[16,[[25,[24]],34]]]],[[]],[[],23],[[],18],[[],18],[[],20],[[],32],[[]],0,0,0,[[]],[[]],[7],[7],[29,[[25,[24]]]],[7],[[]],[[],7],[29,32],[[]],[29,32],[[],18],[[],18],[[],20],[29,32],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[[]],[[]],[[]],[[]],[[]],[[]],[[],41],[[],41],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[35,35],10],[[36,36],10],[[37,37],10],[[38,38],10],[[39,39],10],[[35,12],[[18,[31]]]],[[35,12],[[18,[31]]]],[[36,12],[[18,[31]]]],[[36,12],[[18,[31]]]],[[37,12],[[18,[31]]]],[[39,12],[[18,[31]]]],[[39,12],[[18,[31]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[42,[[18,[36,43]]]],[42,[[18,[37,43]]]],[42,[[18,[35,44]]]],[[[45,[21]]],35],[[[45,[21]]],36],[35,19],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[36,19],[37,19],[40,[[16,[33,34]]]],[36,37],[36,[[45,[21]]]],[38],0,0,[[35,35],10],[[36,36],10],[[37,37],10],[[38,38],10],[[39,39],10],[[],38],[[],39],0,0,[[],35],[[],38],0,0,0,0,[35,39],[[46,35],39],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[39,36],10],[[46,39,36],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[44,44],[[]],[7],[7],[7],[[44,44],10],[[44,12],[[18,[31]]]],[[44,12],[[18,[31]]]],[[]],[[],7],[[]],0,[[]],[[],19],[[],18],[[],18],[[],20],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[43,43],[[]],[7],[7],[7],[[43,43],10],[[43,12],[[18,[31]]]],[[43,12],[[18,[31]]]],[[]],[[],7],[[]],0,[[]],[[],19],[[],18],[[],18],[[],20],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,[[],[[18,[47]]]],[[],[[18,[47]]]],[42,[[18,[47]]]],0,0,[[],48],[7],[[]],[[]],0,[7],[7],[[],7],[[]],[[],[[16,[10,34]]]],[[],[[16,[33,34]]]],[7,49],[[],19],0,[[]],[[]],[7],[7],[7],[[]],[50],[[],51],[[],7],[[]],[[]],[51,11],[[],18],[[],18],[[],20],[[]],0,[[]],[[]],[7],[7],[7],[49,[[16,[34]]]],[[]],[[],7],[[]],[49,52],0,0,[[],18],[[],18],[[],20],[[]],0,[[]],[[]],[7],[7,49],0,[7],[[]],[7],[[]],0,0,0,0,0,[[]],[[]],[47,47],[[]],[7],[7],[7],[[47,47],10],[[47,12],[[18,[31]]]],[[47,12],[[18,[31]]]],[[]],[[],[[18,[47]]]],[[],[[18,[47]]]],[42,[[18,[47]]]],[53],[[],7],[[]],[[],48],[[],7],[[],[[16,[10,34]]]],[[],[[16,[33,34]]]],[[],19],[[]],[[],19],[[],18],[[],18],[[],20],[[]],0,0,[[]],[7,7],0,[[]],[[]],[7],[7],[[],18],[7],[[]],[[],7],[[]],0,[[],18],[[],18],[[],18],[[],20],[[]],[[],18],[54,18],[8,19],[8,19]],"p":[[8,"IntoIterator"],[3,"FixedHeightMode"],[3,"MinaMerkleTree"],[3,"VariableHeightMode"],[3,"MerkleTreeNodeMetadata"],[8,"MaskableMerkleTree"],[15,"usize"],[15,"u32"],[4,"MerkleProofError"],[15,"bool"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"SpinLockObjectPool"],[3,"DefaultMerkleProof"],[3,"Vec"],[8,"MaskingMerkleTree"],[4,"Result"],[3,"String"],[3,"TypeId"],[3,"PallasParameters"],[3,"VestaParameters"],[3,"ROInput"],[3,"FpParameters"],[3,"Fp256"],[3,"FqParameters"],[15,"u64"],[3,"PlonkSpongeConstantsKimchi"],[3,"Poseidon"],[3,"PlonkSpongeConstantsLegacy"],[3,"Error"],[8,"Hasher"],[15,"u8"],[3,"Global"],[3,"Keypair"],[3,"PubKey"],[3,"CompressedPubKey"],[3,"SecKey"],[3,"Signature"],[4,"NetworkId"],[8,"Signer"],[15,"str"],[4,"PubKeyError"],[4,"KeypairError"],[3,"GroupAffine"],[3,"Schnorr"],[4,"FieldHelpersError"],[3,"BigUint"],[3,"ChunkedPolynomial"],[15,"never"],[3,"AdjacentPairs"],[3,"DensePolynomial"],[15,"i32"],[8,"CanonicalSerialize"],[8,"MerkleProof"],[8,"MerkleTree"],[8,"MerkleMerger"],[8,"MerkleHasher"],[8,"PoseidonLegacyHasherPoolProvider"],[8,"SparseMerkleTree"],[3,"MinaPoseidonMerkleMerger"],[3,"MinaPoseidonMerkleHasher"],[8,"HeightMode"],[8,"Hashable"],[8,"DomainParameter"],[8,"ExtendedDensePolynomial"],[8,"FieldHelpers"],[8,"ExtendedEvaluations"],[8,"CryptoDigest"],[3,"SerdeAs"]]},\
"mina_network":{"doc":"Network crate provides utilities that facilites libp2p …","t":[0,0,6,3,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,3,3,8,3,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,10,11,10,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["p2p","processor","BoxedP2PTransport","MAINNET_CONFIG","P2PTransport","TransportBuilder","TransportConfig","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","from","from","from","get_mplex_config","get_shared_key","init","init","init","into","into","into","mplex_protocol_name","new","new_with_key","new_with_key_and_config","rendezvous_string","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","with_config","with_mainnet_config","with_timeout","Block","Block","NaiveTransitionFrontier","NetworkMessageProcessor","NonConsensusNetworkingOps","QueryBlockRequest","TransitionFrontier","add_block","add_block","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","from","from","from","get_best_chain","height","init","init","init","into","into","into","new","new","nonconsensus_ops","query_block","run","set_block_requester","set_block_requester","set_block_responder","state_hash","to_owned","transition_frontier","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["mina_network","","mina_network::p2p","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_network::processor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["libp2p setup utilities for mina","Implementation agnostic abstraction of networking …","Type alias for boxed libp2p transport","Mainnet config for mina p2p network","Type alias for libp2p transport","Builds libp2p transport for mina with various …","Configuration type for super::TransportBuilder","","","","","","","Builds libp2p transport","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets MplexConfig from the TransportConfig instance","Gets PreSharedKey from the TransportConfig instance","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Protocol name for configuring libp2p multiplexer","Creates a new instance of TransportBuilder with random …","Creates a new instance of TransportBuilder with given …","Creates a new instance of TransportBuilder with given …","Rendezvous string for configuring private network","","","","","","","","","","","","","","","Updates config for the TransportBuilder instance","Uses mainnet config for the TransportBuilder instance","Sets timeout duration for the TransportBuilder instance","Type that represents a block","Type that represents a block","Struct that represents a naive implementation of the …","This struct processes all the interactions and data …","abstraction of networking operations for non-consensus …","Request struct for querying a block","This struct handles the blocks that are received from the …","Adds a block that is received from networking layer. The …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","TODO: Doc","Height of the block","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new NetworkMessageProcessor with the given …","TODO: Doc","Gets the NonConsensusNetworkingOps instance","Queries a block with its height and state hash","Schedules event loops of all types of communications …","Sets the block requester for querying a block, e.g. parent …","","Sets the block responder that sends the blocks to the …","State hash of the block","","Gets the TransitionFrontier instance","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,5,4,1,5,4,1,1,4,1,4,1,4,1,5,5,4,1,5,4,1,5,4,1,4,5,4,1,4,4,5,4,1,5,4,1,4,1,1,1,4,4,1,5,4,1,5,4,1,5,4,1,5,4,1,1,1,1,22,23,0,0,0,0,0,22,17,20,19,17,20,19,17,17,17,17,20,19,17,20,19,17,20,19,17,17,20,19,17,17,20,20,19,17,20,19,17,19,17,19,23,19,22,17,23,20,17,19,20,19,17,20,19,17,20,19,17,20,19,17],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,[[3,[2]]]],[4,4],[1,1],[[]],[[]],[[],4],[[],1],[5,4],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[4,7],8],[[]],[[]],[[]],[4,9],[4,10],[[],6],[[],6],[[],6],[[]],[[]],[[]],0,[[],1],[11,1],[[11,4],1],0,[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[1,4],1],[1,1],[[1,13],1],0,0,0,0,0,0,0,[[],[[16,[[15,[14]]]]]],[17,[[16,[[15,[14]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[17,17],[[]],[[],17],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[17,7],8],[[]],[[]],[[]],[17,18],0,[[],6],[[],6],[[],6],[[]],[[]],[[]],[[],19],[[],17],[19,14],[20,[[16,[[15,[14]]]]]],[19,14],[[[21,[20]]]],[[17,[21,[20]]]],[21],0,[[]],[19,14],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],12],[[],12],[[],12],[[]],[[]],[[]]],"p":[[3,"TransportBuilder"],[3,"Error"],[4,"Result"],[3,"TransportConfig"],[3,"MAINNET_CONFIG"],[15,"usize"],[3,"Formatter"],[6,"Result"],[3,"MplexConfig"],[3,"PreSharedKey"],[4,"Keypair"],[3,"TypeId"],[3,"Duration"],[8,"Future"],[3,"Box"],[3,"Pin"],[3,"NaiveTransitionFrontier"],[3,"ProtocolStateChain"],[3,"NetworkMessageProcessor"],[3,"QueryBlockRequest"],[3,"Sender"],[8,"TransitionFrontier"],[8,"NonConsensusNetworkingOps"]]},\
"mina_rs_base":{"doc":"This crate implements a number of the base types required …","t":[8,8,16,16,0,0,0,0,0,0,0,14,14,0,0,0,0,0,0,0,11,11,11,11,0,0,0,0,3,2,2,2,2,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,12,12,12,12,0,12,11,11,12,0,12,11,11,11,12,11,4,13,13,13,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,13,3,4,13,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,12,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,11,11,12,11,12,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,3,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,12,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,13,13,3,3,3,3,3,18,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,11,12,10,11,11,11,11,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,2,2,3,3,3,2,3,3,3,3,2,4,13,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,12,12,12,12,12,12,12,0,0,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,3,4,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,4,3,6,3,13,3,3,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,12,11,11,11,11,11,12,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,12,12,3,3,13,13,4,3,3,13,4,3,3,3,3,3,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,13,13,4,13,3,3,13,13,3,13,4,13,13,13,13,13,13,13,13,13,13,13,13,3,3,3,4,3,3,4,13,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,2,2,13,2,2,2,2,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,0,11,11,11,11,11,11,12,12,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,13,13,3,3,4,3,4,13,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,3,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BinProtSerializationType","JsonSerializationType","T","T","account","blockchain_state","common","consensus_state","delta_transition_chain_proof","epoch_data","external_transition","finite_ec_point","finite_ec_point_pair","global_slot","numbers","protocol_state","protocol_state_proof","protocol_version","snark_work","staged_ledger_diff","try_from_binprot","try_from_json","try_into_binprot","try_into_json","types","user_commands","verifiable","verification_key","Account","AuthRequired","Permissions","Timing","TokenPermissions","balance","borrow","borrow_mut","clone","clone_into","delegate","deref","deref_mut","domain_string","drop","fmt","from","from","from","from","from","from","get_pool","init","into","nonce","permissions","permissions","public_key","receipt_chain_hash","snapp","timing","timing","to_owned","to_roinput","token_id","token_permissions","token_permissions","try_from","try_into","type_id","voting_for","vzip","AuthRequired","Both","Either","Impossible","None","Permissions","Proof","Signature","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","edit_state","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","init","init","into","into","receive","send","set_delegate","set_permissions","set_verification_key","stake","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Timed","TimedData","Timing","Untimed","borrow","borrow","borrow_mut","borrow_mut","cliff_amount","cliff_time","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","init","init","initial_minimum_balance","into","into","ne","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vesting_increment","vesting_period","vzip","vzip","0","NotOwned","TokenOwned","TokenPermissions","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","from","from","from","from","from","init","into","to_owned","try_from","try_into","type_id","vzip","account_disabled","disable_new_accounts","BlockchainState","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","domain_string","drop","eq","fmt","from","from","from","from","from","from","from","genesis_ledger_hash","init","into","ne","snarked_ledger_hash","snarked_next_available_token","staged_ledger_hash","timestamp","to_owned","to_roinput","try_from","try_into","type_id","vzip","0","ByteVec","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","from","from","from","from","from","from","init","into","ne","to_owned","try_from","try_into","type_id","vzip","0","ConsensusState","VrfOutputTruncated","block_creator","block_stake_winner","blockchain_length","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","coinbase_receiver","curr_global_slot","default","default","deref","deref","deref_mut","deref_mut","domain_string","domain_string","drop","drop","epoch_count","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","global_slot_since_genesis","has_ancestor_in_same_checkpoint_window","init","init","into","into","last_vrf_output","min_window_density","ne","ne","next_epoch_data","partial_cmp","staking_epoch_data","sub_window_densities","sub_window_densities","supercharge_coinbase","to_owned","to_owned","to_roinput","to_roinput","to_string","total_currency","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","1","DeltaTransitionChainProof","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","fmt","from","from","from","from","from","from","from","from","init","into","ne","to_owned","try_from","try_into","type_id","vzip","EpochData","EpochLedger","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref","deref_mut","deref_mut","domain_string","domain_string","drop","drop","epoch_length","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","hash","init","init","into","into","ledger","lock_checkpoint","ne","ne","seed","start_checkpoint","to_owned","to_owned","to_roinput","to_roinput","total_currency","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ExternalTransition","borrow","borrow_mut","clone","clone_into","current_protocol_version","delta_transition_chain_proof","deref","deref_mut","drop","eq","fmt","from","from","from","from","from","from","from","init","into","ne","proposed_protocol_version_opt","protocol_state","protocol_state_proof","staged_ledger_diff","to_owned","try_from","try_into","type_id","validation_callback","verify","vzip","GlobalSlot","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","domain_string","drop","eq","fmt","from","from","from","from","from","from","init","into","ne","slot_number","slots_per_epoch","to_owned","to_roinput","try_from","try_into","type_id","vzip","0","0","0","0","0","0","0","0","0","0","0","0","0","AccountNonce","Amount","BigInt256","BlockTime","BlockTimeSpan","Char","Delta","ErrorInvalidFormat","ErrorParsingInteger","ExtendedU32","ExtendedU64","GlobalSlotNumber","Hex64","Length","MAX","ParseAmountError","TokenId","as_bits","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","datetime","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","domain_string","domain_string","domain_string","domain_string","domain_string","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encode_hex","encode_hex_upper","epoch_millis","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_unix_epoch","from_unix_epoch_millis","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","partial_cmp","partial_cmp","partial_cmp","partial_cmp","source","to_hex_string","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_roinput","to_roinput","to_roinput","to_roinput","to_roinput","to_string","to_string","to_string","try_as_bits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_hex","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","Header","ProtocolConstants","ProtocolState","ProtocolStateBody","blockchain_state","body","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","consensus_state","constants","curr_global_slot","default","default","default","delta","deref","deref","deref","deref_mut","deref_mut","deref_mut","domain_string","domain_string","domain_string","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","genesis_state_hash","genesis_state_timestamp","get_height","get_height","init","init","init","into","into","into","k","min_window_density","min_window_density","ne","ne","ne","previous_state_hash","slots_per_epoch","slots_per_sub_window","sub_window_densities","sub_window_densities","to_owned","to_owned","to_owned","to_roinput","to_roinput","to_roinput","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","0","0","0","0","1","1","1","2","3","4","BulletproofChallenge","BulletproofChallengeTuple17","BulletproofChallengeTuple18","BulletproofChallenges","BulletproofPreChallenge","ECPoint","ECPointVec","FieldElement","FieldElementVec","FiniteECPoint","FiniteECPointPair","FiniteECPointPairVec","FiniteECPointVec","OpeningProof","PairingBased","Plonk","PrevEvals","PrevXHat","Proof","ProofEvaluations","ProofMessages","ProofOpenings","ProofOpeningsEvals","ProofState","ProofStateBulletproofChallenges","ProofStateDeferredValues","ProofStatePairingBased","ProofStatement","ProtocolStateProof","ScalarChallengeVector2","ShiftedValue","ShiftedValue","SpongeDigestBeforeEvaluations","alpha","app_state","b","beta","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bulletproof_challenges","bulletproof_challenges","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combined_inner_product","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deferred_values","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evals","field_and_curve_elements","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gamma","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","me_only","messages","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","old_bulletproof_challenges","old_bulletproof_challenges","opening_proof","openings","pass_through","plonk","prev_evals","prev_x_hat","proof","proof","proof_evaluations","proof_messages","proof_state","sg","sg","sponge_digest_before_evaluations","statement","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","which_branch","xi","zeta","0","0","0","0","0","0","1","1","1","1","10","10","11","11","12","12","13","13","14","14","15","15","16","16","17","17","18","2","2","2","2","3","3","4","4","5","5","6","6","7","7","8","8","9","9","BulletproofChallenge","BulletproofChallengeTuple17","BulletproofChallengeTuple18","BulletproofChallenges","BulletproofPreChallenge","ProofStateBulletproofChallenges","ScalarChallenge","ScalarChallengeVector2","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","into","into","into","into","into","into","into","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","prechallenge","scalar","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","0","0","1","1","ECPoint","ECPointVec","FieldElement","FieldElementVec","Finite","FiniteECPoint","FiniteECPointPair","FiniteECPointPairVec","FiniteECPointVec","Infinite","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","into","into","into","into","into","into","into","ne","ne","ne","ne","ne","ne","ne","to_hex_string","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_hex","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","OpeningProof","borrow","borrow_mut","clone","clone_into","default","delta","deref","deref_mut","drop","eq","fmt","from","from","from","from","from","from","init","into","lr","ne","sg","to_owned","try_from","try_into","type_id","vzip","z_1","z_2","ProofEvaluations","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","f","fmt","from","from","from","from","from","from","init","into","l","ne","o","r","sigma1","sigma2","t","to_owned","try_from","try_into","type_id","vzip","z","0","ProofMessageWithDegreeBound","ProofMessageWithoutDegreeBoundList","ProofMessages","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","into","into","into","l_comm","ne","ne","ne","o_comm","r_comm","shifted","t_comm","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unshifted","vzip","vzip","vzip","z_comm","ProtocolVersion","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","fmt","from","from","from","from","from","from","init","into","major","minor","ne","patch","to_owned","try_from","try_into","type_id","vzip","0","1","FeeExcess","FeeExcessPair","Neg","One","OneORTwo","PendingCoinbase","PendingCoinbaseStackState","Pos","SgnType","Signed","StateStack","Statement","TransactionSnark","TransactionSnarkWork","Two","amount","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","curr","data_stack","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fee","fee_excess","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","magnitude","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","next_available_token_after","next_available_token_before","pending_coinbase_stack_state","proofs","prover","sgn","sok_digest","source","source","state_stack","statement","supply_increase","target","target","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","token","transaction_snark_proof","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","1","AmountInsufficientToCreateAccount","Applied","CannotPayCreationFeeInToken","CoinBase","CoinBase","CoinBaseBalanceData","CoinBaseFeeTransfer","Failed","FeeTransfer","FeeTransferBalanceData","IncorrectNonce","InternalCommandBalanceData","MismatchedTokenPermissions","NotTokenOwner","One","Overflow","Predicate","ReceiverAlreadyExists","ReceiverNotPresent","SignedCommandOnSnappAccount","SnappAccountNotPresent","SourceInsufficientBalance","SourceMinimumBalanceViolation","SourceNotPresent","StagedLedgerDiff","StagedLedgerDiffTuple","StagedLedgerPreDiff","TransactionStatus","TransactionStatusAuxiliaryData","TransactionStatusBalanceData","TransactionStatusFailedType","Two","UpdateNotPermitted","UserCommandWithStatus","Zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coinbase","coinbase_receiver_balance","commands","completed_works","created_token","data","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","diff","diff_one","diff_two","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fee","fee_payer_account_creation_fee_paid","fee_payer_balance","fee_transfer_receiver_balance","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","internal_command_balances","into","into","into","into","into","into","into","into","into","into","into","into","into","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","receiver1_balance","receiver2_balance","receiver_account_creation_fee_paid","receiver_balance","receiver_pk","source_balance","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","1","0","0","0","0","1","1","PaymentPayload","SignedCommand","SignedCommand","SignedCommandMemo","SignedCommandPayload","SignedCommandPayloadBody","SignedCommandPayloadCommon","UserCommand","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","from","from","from","from","from","from","from","init","into","memo","ne","payment","signed_command","to_owned","try_from","try_into","type_id","verify","vzip","0","0","SignedCommandMemo","SignedCommandMemoError","StringTooLong","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","init","init","into","into","ne","to_owned","to_string","to_string","to_text","try_from","try_from","try_from","try_from_text","try_into","try_into","type_id","type_id","vzip","vzip","PaymentPayload","amount","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","from","from","from","from","from","from","init","into","ne","receiver_pk","source_pk","to_owned","token_id","try_from","try_into","type_id","vzip","PaymentPayload","SetDelegate","SignedCommand","SignedCommandPayload","SignedCommandPayloadBody","SignedCommandPayloadCommon","StakeDelegation","StakeDelegation","body","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","common","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","domain_string","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","fee","fee_payer_pk","fee_token","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_payload","init","init","init","init","init","into","into","into","into","into","into_signed_command","memo","ne","ne","ne","ne","ne","nonce","payload","signature","signer","to_owned","to_owned","to_owned","to_owned","to_owned","to_roinput","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","valid_until","verify","vzip","vzip","vzip","vzip","vzip","0","0","delegator","new_delegate","SignedTransferCommandBuilder","borrow","borrow_mut","build","deref","deref_mut","drop","fee_payer","fee_token","from","init","into","memo","new","transfer_token","try_from","try_into","type_id","valid_until","vzip","Verifiable","verify","Data","VerificationKey","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","constraints","data","default","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","fmt","from","from","init","init","into","into","ne","ne","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["mina_rs_base","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::account","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::account::permissions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::account::timing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::account::timing::Timing","mina_rs_base::account::token_permissions","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::account::token_permissions::TokenPermissions","","mina_rs_base::blockchain_state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::common","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::consensus_state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::delta_transition_chain_proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::epoch_data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::external_transition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::global_slot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::numbersmina_rs_base::numbers::ParseAmountError","","mina_rs_base::protocol_state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::protocol_state_proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::protocol_state_proof::ShiftedValue","mina_rs_base::protocol_state_proof::bulletproof_challengesmina_rs_base::protocol_state_proof::bulletproof_challenges::BulletproofPreChallenge","mina_rs_base::protocol_state_proof::field_and_curve_elementsmina_rs_base::protocol_state_proof::field_and_curve_elements::ECPoint","mina_rs_base::protocol_state_proof::opening_proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::protocol_state_proof::proof_evaluations","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::protocol_state_proof::proof_messages","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::protocol_version","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::snark_workmina_rs_base::snark_work::OneORTwo","","","mina_rs_base::staged_ledger_diffmina_rs_base::staged_ledger_diff::CoinBase","","","mina_rs_base::staged_ledger_diff::InternalCommandBalanceData","","mina_rs_base::staged_ledger_diff::TransactionStatus","","","","mina_rs_base::user_commands","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::user_commands::UserCommand","mina_rs_base::user_commands::memo","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::user_commands::payment","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::user_commands::signed_command","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_rs_base::user_commands::signed_command::SignedCommandPayloadBody","","mina_rs_base::user_commands::signed_command::StakeDelegation","","mina_rs_base::user_commands::signed_command::builder","","","","","","","","","","","","","","","","","","","","mina_rs_base::verifiable","","mina_rs_base::verification_key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Re-export serialization type annotations This trait …","Re-export serialization type annotations This trait …","The corresponding serialization type for bin-prot format …","The corresponding serialization type for json format Self …","Module contains the Account data type and associated types","Types related to the Blockchain State","Common data types.","Types and funcions related to the Mina consensus state","Delta transition chain proof structures and functions","Types and functions related to the EpochData structure","Mina ExternalTransition","","","Structure of a global slot","Newtypes for different numeric types used throughout Mina","Types related to the Mina protocol state","Module containing the components of a protocol state proof","Protocol version structure","Types related to the Transaction Snark Work","In this context a diff refers to a difference between two …","Construct from binprot bytes reader","Construct from json string","Convert into binprot byte vec","Convert into json string","Re-export all the public types under this module for …","User commands are how external users can mutate the state …","Traits and helpers for data structures that require …","types and functions related to Mina verificiation keys","An account identified by its public key and token ID. …","","","","","Balance of token held by account","","","","","Delegate for staking purposes","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Nonce (incremented with each tx to prevent replay)","Account based permissions","Level of permission required to do different account …","Account public key","?","TODO: This should contain a Snapp account data once we …","Account Timing","Any timing limitations places on this accounts balance …","","","Account token ID","Account token permissions","Permission associated with the given token","","","","The state hash this account is voting for","","The level of auth required to perform a particular action …","Both proof and signature must be provided","Either a proof or a signature","This action can never occur","None required","Permissions associated with the account","Proof must be provided","Signature must be provided","","","","","","","","","","","","","","","Permission required to edit state","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Permission required to receive balance","Permission required to send a balance","Permission required to set the delegate","Permission required to cange permissions","Permission require to set verification key","If the account can stake","","","","","","","","","","","Account does have timing limitations as specified","Payload for the timing variant Timed","Timing information for an account with regard to when its …","Account does not have any timing limitations","","","","","Amount extra available when fully fested","Time when all balance is avaiable","","","","","Return <code>Timing::Untimed</code>","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","Initial balance for the account","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Ammount released in each vesting period","Period in whcih allocation is released in chunks","","","","Account does not own a token","Account owns a token","Need to learn exactly what this is..","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","?","?","Mina blockchain state struct","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Hash of the genesis state","","Calls <code>U::from(self)</code>.","","Hash of the most recently proven state of the blockchain","Check whether the change of the next token ID is …","Hash of the proposed next state of the blockchain","Timestamps for blocks","","","","","","","","Wrapper of Vec","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","This structure encapsulates the succinct state of the …","Wrapper struct for the output for a VRF","Compressed public key of the block producer","Compressed public key of winning account","Height of block","","","","","","","","","Compresed public key of account receiving the block reward","Current global slot number relative to the current hard …","","Return …","","","","","","","","","Epoch number","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","Absolute global slot number since genesis","If the block has an ancestor in the same checkpoint window","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Additional VRS output from leader (for seeding Random …","Minimum window density oberved on the chain","","","Epoch data for current epoch","","Epoch data for previous epoch","Returns the sub-window densities as a vec of u32","Current sliding window of densities","true if block_stake_winner has no locked tokens, false …","","","","","","Total supply of currency","","","","","","","","","","","","Proof that the block was produced within the allotted slot …","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","Epoch data","Epoch Ledger","","","","","","","","","","","","","","","","","","","Length of an epoch","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","A unique identifier of the EpochLedger","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Epoch Ledger, contains ledger related data for the epoch","State hash of last known block in the first 2/3 of epoch …","","","Initialize the random number generator","State hash of first block of epoch","","","","","The total currency in circulation after the block was …","","","","","","","","","This structure represents a mina block This structure …","","","","","Current protocol version","Proof that the block was produced within the allotted slot …","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","Proposed protocol version","The blockchain state, including consensus and the ledger","Proof that the protocol state and entire history of the …","Diff of the proposed next state of the blockchain","","","","","Validation callback","","","A global slot","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","The global slot number of a chain or block","Number of slots per epoch","","","","","","","","","","","","","","","","","","","","Number representing how many txns sent from an account","This structure represents fixed point numbers typically …","Mina 256 bit Bit Integer type","Block time numeric type","Time span between two block time instants","A single char defined by a single byte (not variable …","Represents a difference between two lengths","Unable to split the string on a ‘.’ into to integer …","Error occurs when parsing the integer components","u32 wrapped in 1 version byte This will not be part of the …","This will not be part of the public API once the …","Consensus slot index","4 bytes wrapped by a version Will not form part of the …","Represents the length of something (e.g. an epoch or …","Maximum value this type can hold","Error that can be returned when parsing an Amount from …","Newtype for TokenIds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets timestamp in time::OffsetDateTime format","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets unix timestamp in milliseconds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Unix timestamp conversion (seconds since the unix epoch)","Unix timestamp conversion (milliseconds since the unix …","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implementing types have some notion of height and can …","Constants that define the consensus parameters","This structure can be thought of like the block header. It …","Body of the protocol state","Ledger related state","The body of the protocol state","","","","","","","","","","","","","Consensus related state","Consensus constants","Gets the current global slot the current epoch","","","","Maximum permissable delay of packets (in slots after the …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Genesis protocol state hash (used for hardforks)","Timestamp of genesis block in unixtime","Get the height for the implementing type","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Point of finality (number of confirmations)","The minimum window density at the current epoch.","","","","","Commitment to previous block (hash of previous protocol …","Number of slots per epoch","No of slots in a sub-window = 7","A list of density values of the sub windows.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","SNARK proof of the protocol state at some point in time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Elliptic curve point that can either be the coordinates of …","Vector of EC points (with version number defined in the …","Represents an element in a finite field that can be …","Vector of finite field elements (with version number …","","An elliptic curve point defined over a base field with …","","Vector of 2-tuples of finite EC points (with version …","Vector of finite EC points (with version number defined in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return <code>ECPoint::Infinite</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Defines a version of the Mina protocol in semver format","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Major version number","Minor version number","","Patch version number","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Top level wrapper type for a StagedLedgerDiff","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return <code>CoinBase::Zero</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A command signed by a private key","","","","","The top level user command type This is the output of the …","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Commands can include memo fields which contain arbitrary …","","Payment commands are for transfering some token amounts …","Signed commands are commands that require signing with …","","","","","","","","","A memo byte strong for a signed command","Error type for converting memo types","Tried to build a memo from a string that is too long to fit","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Convert into text","","","","Try build from text","","","","","","","The data specific to payload commands","The ammount of that token to transfer","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","Account to transfer to","Account to transfer from","","The token to transfer","","","","","Payment transfer fields","Set Delegate","Top level signed command type","The part of a signed command that needs to be serialized …","Enum of variable fields in a signed command","Common fields required by all signed commands","Enum of variable fields for stake delegation","Stake Delegation fields","Fields that depend on the type of command (e.g. payment, …","","","","","","","","","","","Helpers for building a user command","","","","","","","","","","","Fields common to all command types","","","","","","","","","","","","","","","","","","","","","","Amount paid in fees to include this command in a block","The public key of the payer of the fees (need not be the …","Token to be used to pay the fees","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Sign a SignedCommandPayload to construct a SignedCommand","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert into a signed command by signing with the given …","Arbitary bytes that can be included","","","","","","Nonce assicociated with account sending transaction","The payload to sign","The signature (result of signing payload with public key)","The signer (public key)","","","","","","","","","","","","","","","","","","","","","","UNIX timestamp after which the signed command is no longer …","","","","","","","","","Delegator","New Delegate","A builder for UserCommands to transfer funds","","","Sign the transaction and produce a UserCommand with the …","","","","Set the fee payer to something other than the sender","Set the fee token to pay the block producer","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Set a non-empty memo for the command","All required fields must be defined initially","Set token to transfer","","","","Set the global slot which this command is valid until","","Types that implement Verifiable are able to self-check …","Accepts self and a context and returns if the implementor …","Data associated with a verification key","Public data required to verify a Mina snark","","","","","","","","","Number of constaints","Associated data","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,254,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,254,255,0,0,0,0,0,0,0,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,10,10,10,10,0,10,10,10,10,0,10,10,10,10,10,10,0,20,20,20,20,0,20,20,20,21,20,21,20,21,20,21,20,21,20,21,20,21,21,20,21,20,20,20,20,20,20,21,21,21,21,21,21,20,21,20,21,21,21,21,21,21,21,20,21,20,21,20,21,20,21,20,21,25,0,0,25,24,25,24,25,24,24,24,25,24,25,25,24,25,24,25,24,25,24,24,25,24,24,24,24,24,24,25,25,25,25,25,25,24,25,24,24,25,24,24,25,24,25,24,25,24,25,24,24,24,25,256,29,29,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,257,258,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,34,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,36,0,0,37,37,37,36,37,36,37,36,37,36,37,37,37,36,37,36,37,36,37,36,37,36,37,37,36,37,36,36,37,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,36,37,37,36,37,36,37,37,37,36,37,37,36,37,37,37,37,36,37,36,37,36,37,36,36,37,36,37,36,37,36,37,45,45,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,48,49,48,49,48,49,48,49,48,49,48,49,48,49,48,49,48,49,49,48,49,48,49,48,48,48,48,48,48,49,49,49,49,49,49,48,48,49,48,49,49,49,48,49,49,49,48,49,48,49,48,48,49,48,49,48,49,48,49,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,59,60,61,62,63,64,65,66,67,68,69,70,58,0,0,0,0,0,0,0,73,73,0,0,0,0,0,66,0,0,58,58,59,60,61,62,63,64,73,65,66,67,68,69,70,58,59,60,61,62,63,64,73,65,66,67,68,69,70,58,59,60,61,62,63,64,65,66,67,68,69,70,58,59,60,61,62,63,64,65,66,67,68,69,70,58,69,59,60,61,62,63,64,65,66,67,68,69,70,58,59,60,61,62,63,64,73,65,66,67,68,69,70,58,59,60,61,62,63,64,73,65,66,67,68,69,70,58,59,60,64,66,69,59,60,61,62,63,64,73,65,66,67,68,69,70,58,58,58,69,59,60,61,62,63,64,73,65,66,67,68,69,70,58,59,60,61,62,63,64,64,73,73,65,66,67,68,68,69,70,58,59,59,59,60,60,60,61,61,61,62,62,62,63,63,64,64,64,64,73,73,65,65,65,65,66,66,66,66,67,67,67,68,68,68,68,68,68,68,68,69,69,69,70,70,58,58,64,68,69,69,59,60,61,62,63,64,73,65,66,67,68,69,70,58,59,60,61,62,63,64,73,65,66,67,68,69,70,58,59,60,61,62,63,64,73,65,66,67,68,69,70,58,60,61,62,63,73,58,59,60,61,62,63,64,65,66,67,68,69,70,58,59,60,64,66,69,64,73,68,58,59,60,61,62,63,64,73,65,66,67,68,68,69,70,58,58,59,60,61,62,63,64,73,65,66,67,68,69,70,58,59,60,61,62,63,64,73,65,66,67,68,69,70,58,59,60,61,62,63,64,73,65,66,67,68,69,70,58,259,260,0,0,0,0,94,93,92,93,94,92,93,94,92,93,94,92,93,94,94,94,93,92,93,94,92,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,92,92,92,92,92,92,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,92,261,93,92,93,94,92,93,94,92,261,93,92,93,94,93,92,92,261,93,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,107,110,111,113,107,110,113,107,107,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,0,105,109,104,105,101,102,103,104,105,106,107,108,109,110,111,112,113,114,101,102,103,104,105,106,107,108,109,110,111,112,113,114,0,104,101,102,103,104,105,106,107,108,109,110,111,112,113,114,101,102,103,104,105,106,107,108,109,110,111,112,113,114,104,101,102,103,104,105,106,107,108,109,110,111,112,113,114,103,101,102,103,104,105,106,107,108,109,110,111,112,113,114,101,102,103,104,105,106,107,108,109,110,111,112,113,114,101,102,103,104,105,106,107,108,109,110,111,112,113,114,101,102,103,104,105,106,107,108,109,110,111,112,113,114,114,0,101,102,103,104,105,106,107,108,109,110,111,112,113,114,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,103,103,103,103,103,103,104,104,104,104,104,104,105,105,105,105,105,105,106,106,106,106,106,106,107,107,107,107,107,107,108,108,108,108,108,108,109,109,109,109,109,109,110,110,110,110,110,110,111,111,111,111,111,111,112,112,112,112,112,112,113,113,113,113,113,113,114,114,114,114,114,114,105,101,102,103,104,105,106,107,108,109,110,111,112,113,114,101,102,103,104,105,106,107,108,109,110,111,112,113,114,103,112,101,102,103,104,105,106,107,108,109,110,111,112,113,114,108,109,0,112,102,104,101,101,101,114,0,0,102,108,109,103,101,101,102,103,104,105,106,107,108,109,110,111,112,113,114,101,102,103,104,105,106,107,108,109,110,111,112,113,114,101,102,103,104,105,106,107,108,109,110,111,112,113,114,101,102,103,104,105,106,107,108,109,110,111,112,113,114,101,102,103,104,105,106,107,108,109,110,111,112,113,114,104,104,105,262,133,134,135,136,138,134,135,136,138,135,136,135,136,135,136,135,136,135,136,135,136,135,136,135,136,136,134,135,136,138,135,136,135,136,135,136,135,136,135,136,135,136,135,136,0,0,0,0,0,0,137,0,132,133,134,135,136,137,138,132,133,134,135,136,137,138,132,133,134,135,136,137,138,132,133,134,135,136,137,138,132,133,134,135,136,137,138,132,133,134,135,136,137,138,132,133,134,135,136,137,138,132,133,134,135,136,137,138,132,133,134,135,136,137,138,132,133,134,135,136,137,138,132,132,132,132,132,132,133,133,133,133,133,133,134,134,134,134,134,134,135,135,135,135,135,135,136,136,136,136,136,136,137,137,137,137,137,137,138,138,138,138,138,138,132,133,134,135,136,137,138,132,133,134,135,136,137,138,132,133,134,135,136,137,138,132,135,136,138,132,137,132,133,134,135,136,137,138,132,133,134,135,136,137,138,132,133,134,135,136,137,138,132,133,134,135,136,137,138,132,133,134,135,136,137,138,263,146,147,148,149,150,152,147,149,0,0,0,0,151,0,0,0,0,151,146,147,148,149,150,151,152,146,147,148,149,150,151,152,146,147,148,149,150,151,152,146,147,148,149,150,151,152,146,147,148,149,150,151,152,146,147,148,149,150,151,152,146,147,148,149,150,151,152,146,147,148,149,150,151,152,146,147,148,149,150,151,152,146,147,148,149,150,151,152,146,146,146,146,146,146,147,147,147,147,147,147,148,148,148,148,148,148,149,149,149,149,149,149,150,150,150,150,150,150,151,151,151,151,151,151,152,152,152,152,152,152,146,147,148,149,150,151,152,146,147,148,149,150,151,152,146,147,148,149,150,151,152,146,146,147,148,149,150,151,152,146,147,148,149,150,151,152,146,146,147,148,149,150,151,152,146,147,148,149,150,151,152,146,147,148,149,150,151,152,264,0,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,0,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,165,0,0,0,164,165,166,164,165,166,164,165,166,164,165,166,164,165,166,164,165,166,164,165,166,164,165,166,164,165,166,164,165,166,164,164,164,164,164,164,165,165,165,165,165,165,166,166,166,166,166,166,164,165,166,164,165,166,164,164,165,166,164,164,166,164,164,165,166,164,165,166,164,165,166,164,165,166,166,164,165,166,164,0,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,179,179,0,0,182,173,0,0,0,182,0,0,0,0,0,0,173,180,172,173,174,175,176,177,178,179,180,181,182,172,173,174,175,176,177,178,179,180,181,182,172,173,174,175,176,177,178,179,180,181,182,172,173,174,175,176,177,178,179,180,181,182,178,177,172,173,174,175,176,177,178,179,180,181,182,172,173,174,175,176,177,178,179,180,181,182,172,173,174,175,176,177,178,179,180,181,182,172,173,174,175,176,177,178,179,180,181,182,172,175,172,173,174,175,176,177,178,179,180,181,182,172,172,172,172,172,172,172,173,173,173,173,173,173,174,174,174,174,174,174,175,175,175,175,175,175,175,176,176,176,176,176,176,177,177,177,177,177,177,178,178,178,178,178,178,179,179,179,179,179,179,180,180,180,180,180,180,181,181,181,181,181,181,182,182,182,182,182,182,172,173,174,175,176,177,178,179,180,181,182,178,172,173,174,175,176,177,178,179,180,181,182,181,172,173,174,175,176,177,178,179,180,181,175,175,175,172,172,181,175,175,176,177,174,175,175,176,172,173,174,175,176,177,178,179,180,181,182,180,174,172,173,174,175,176,177,178,179,180,181,182,172,173,174,175,176,177,178,179,180,181,182,172,173,174,175,176,177,178,179,180,181,182,172,173,174,175,176,177,178,179,180,181,182,265,266,266,203,200,203,0,206,0,0,200,206,0,203,0,203,203,204,203,203,203,203,203,203,203,203,203,0,0,0,0,0,0,0,204,203,0,204,196,197,198,199,200,201,202,203,204,205,206,207,208,196,197,198,199,200,201,202,203,204,205,206,207,208,196,197,198,199,200,201,202,203,204,205,206,207,208,196,197,198,199,200,201,202,203,204,205,206,207,208,198,207,198,198,201,199,196,197,198,204,196,197,198,199,200,201,202,203,204,205,206,207,208,196,197,198,199,200,201,202,203,204,205,206,207,208,196,197,197,196,197,198,199,200,201,202,203,204,205,206,207,208,196,197,198,199,200,201,202,203,204,205,206,207,208,205,201,202,207,196,197,198,199,200,201,202,203,204,205,206,207,208,196,196,196,196,196,196,196,197,197,197,197,197,197,198,198,198,198,198,198,199,199,199,199,199,199,199,200,200,200,200,200,200,200,201,201,201,201,201,201,202,202,202,202,202,202,203,203,203,203,203,203,203,204,204,204,204,204,204,204,205,205,205,205,205,205,206,206,206,206,206,206,206,207,207,207,207,207,207,208,208,208,208,208,208,196,197,198,199,200,201,202,203,204,205,206,207,208,198,196,197,198,199,200,201,202,203,204,205,206,207,208,196,197,198,199,200,201,202,204,205,206,207,208,208,208,201,202,205,202,199,196,197,198,199,200,201,202,203,204,205,206,207,208,196,197,198,199,200,201,202,203,204,205,206,207,208,196,197,198,199,200,201,202,203,204,205,206,207,208,196,197,198,199,200,201,202,203,204,205,206,207,208,196,198,196,197,198,199,200,201,202,203,204,205,206,207,208,267,268,268,269,270,271,272,271,272,0,0,228,0,0,0,0,0,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,0,228,0,0,228,228,228,228,228,228,273,231,0,0,232,231,232,231,232,231,231,231,231,232,231,232,231,232,231,231,231,232,232,231,231,231,231,231,231,231,231,231,231,231,231,232,231,231,232,231,232,231,231,231,232,231,231,231,232,231,231,232,231,232,231,232,0,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,240,241,0,0,0,0,0,240,238,237,238,239,240,241,237,238,239,240,241,0,237,238,239,240,241,237,238,239,240,241,238,237,238,239,240,241,237,238,239,240,241,238,237,238,239,240,241,237,238,239,240,241,239,239,239,237,238,239,240,241,237,237,237,237,237,237,238,238,238,238,238,238,239,239,239,239,239,239,240,240,240,240,240,240,241,241,241,241,241,241,237,237,238,239,240,241,237,238,239,240,241,238,239,237,238,239,240,241,239,237,237,237,237,238,239,240,241,238,237,238,239,240,241,237,238,239,240,241,237,238,239,240,241,239,237,237,238,239,240,241,274,275,276,276,0,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,0,277,0,0,252,253,252,253,252,253,252,253,253,252,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[4,[[3,[5]]]],[[],[[3,[[8,[6,7]],2]]]],[[],[[3,[9,5]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[10,10],[[]],0,[11],[11],[[],[[12,[9]]]],[11],[[10,13],14],[15,10],[[]],[[[16,[[16,[[16,[[16,[15]]]]]]]]],10],[[[16,[[16,[[16,[15]]]]]]],10],[[[16,[[16,[15]]]]],10],[[[16,[15]]],10],[[],17],[[],11],[[]],0,0,0,0,0,0,0,0,[[]],[10,18],0,0,0,[[],3],[[],3],[[],19],0,[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[20,20],[21,21],[[]],[[]],[11],[11],[11],[11],[11],[11],0,[[20,13],14],[[21,13],14],[[[16,[[16,[[16,[22]]]]]]],20],[22,20],[[[16,[[16,[[16,[[16,[22]]]]]]]]],20],[[]],[[[16,[[16,[22]]]]],20],[[[16,[22]]],20],[[]],[[[16,[[16,[23]]]]],21],[23,21],[[[16,[23]]],21],[[[16,[[16,[[16,[[16,[23]]]]]]]]],21],[[[16,[[16,[[16,[23]]]]]]],21],[[],11],[[],11],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],0,0,[24,24],[25,25],[[]],[[]],[[],25],[11],[11],[11],[11],[11],[11],[[24,24],26],[[24,13],14],[[25,13],14],[[[16,[[16,[27]]]]],24],[[]],[27,24],[[[16,[27]]],24],[[[16,[[16,[[16,[27]]]]]]],24],[[[16,[[16,[[16,[[16,[27]]]]]]]]],24],[[]],[28,25],[[[16,[28]]],25],[[[16,[[16,[28]]]]],25],[[[16,[[16,[[16,[28]]]]]]],25],[[[16,[[16,[[16,[[16,[28]]]]]]]]],25],[[],11],[[],11],0,[[]],[[]],[[24,24],26],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],0,0,[[]],[[]],0,0,0,0,[[]],[[]],[29,29],[[]],[11],[11],[11],[[29,13],14],[[[16,[[16,[[16,[30]]]]]]],29],[[[16,[30]]],29],[[]],[[[16,[[16,[[16,[[16,[30]]]]]]]]],29],[30,29],[[[16,[[16,[30]]]]],29],[[],11],[[]],[[]],[[],3],[[],3],[[],19],[[]],0,0,0,[[]],[[]],[31,31],[[]],[[],31],[11],[11],[[],[[12,[9]]]],[11],[[31,31],26],[[31,13],14],[32,31],[[[16,[32]]],31],[[[16,[[16,[32]]]]],31],[[[16,[[16,[[16,[32]]]]]]],31],[[[16,[[16,[[16,[[16,[32]]]]]]]]],31],[33,31],[[]],0,[[],11],[[]],[[31,31],26],0,0,0,0,[[]],[31,18],[[],3],[[],3],[[],19],[[]],0,0,[[]],[[]],[34,34],[[]],[11],[11],[11],[[34,34],26],[[34,13],14],[[]],[[[16,[35]]],34],[[[16,[[16,[35]]]]],34],[[[16,[[16,[[16,[35]]]]]]],34],[35,34],[[[16,[[16,[[16,[[16,[35]]]]]]]]],34],[[],11],[[]],[[34,34],26],[[]],[[],3],[[],3],[[],19],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[36,36],[37,37],[[]],[[]],0,0,[[],36],[[],37],[11],[11],[11],[11],[[],[[12,[9]]]],[[],[[12,[9]]]],[11],[11],0,[[36,36],26],[[37,37],26],[[36,13],14],[[36,13],[[3,[38]]]],[[37,13],14],[[[16,[[16,[[16,[39]]]]]]],36],[[[16,[[16,[40]]]]],36],[[[16,[[16,[[16,[[16,[40]]]]]]]]],36],[[[16,[[16,[[16,[40]]]]]]],36],[[]],[[[16,[40]]],36],[40,36],[[[16,[[16,[[16,[[16,[39]]]]]]]]],36],[[[16,[[16,[39]]]]],36],[[[16,[39]]],36],[39,36],[[[8,[6]]],36],[[]],[41,37],[[[16,[41]]],37],[[[16,[[16,[41]]]]],37],[[[16,[[16,[[16,[41]]]]]]],37],[42,37],[[[16,[[16,[[16,[[16,[41]]]]]]]]],37],[4,[[3,[36]]]],0,0,[[],11],[[],11],[[]],[[]],0,0,[[36,36],26],[[37,37],26],0,[[36,36],[[12,[43]]]],0,[37,[[8,[44]]]],0,0,[[]],[[]],[36,18],[37,18],[[],9],0,[4,[[3,[36]]]],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[]],[[]],0,0,0,[[]],[[]],[45,45],[[]],[[],45],[11],[11],[11],[[45,45],26],[[45,13],14],[[]],[[[16,[46]]],45],[[],45],[46,45],[47,45],[[[16,[[16,[[16,[[16,[46]]]]]]]]],45],[[[16,[[16,[[16,[46]]]]]]],45],[[[16,[[16,[46]]]]],45],[[],11],[[]],[[45,45],26],[[]],[[],3],[[],3],[[],19],[[]],0,0,[[]],[[]],[[]],[[]],[48,48],[49,49],[[]],[[]],[[],48],[[],49],[11],[11],[11],[11],[[],[[12,[9]]]],[[],[[12,[9]]]],[11],[11],0,[[48,48],26],[[49,49],26],[[48,13],14],[[49,13],14],[[[16,[50]]],48],[[[16,[[16,[[16,[[16,[50]]]]]]]]],48],[[[16,[[16,[[16,[50]]]]]]],48],[[[16,[[16,[50]]]]],48],[[]],[50,48],[[[16,[[16,[[16,[51]]]]]]],49],[[[16,[[16,[[16,[[16,[51]]]]]]]]],49],[[]],[[[16,[51]]],49],[51,49],[[[16,[[16,[51]]]]],49],0,[[],11],[[],11],[[]],[[]],0,0,[[48,48],26],[[49,49],26],0,0,[[]],[[]],[48,18],[49,18],0,[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[]],[[]],0,[[]],[[]],[52,52],[[]],0,0,[11],[11],[11],[[52,52],26],[[52,13],14],[53,52],[[[16,[53]]],52],[[[16,[[16,[53]]]]],52],[[]],[[[16,[[16,[[16,[53]]]]]]],52],[[[16,[[16,[[16,[[16,[53]]]]]]]]],52],[54,52],[[],11],[[]],[[52,52],26],0,0,0,0,[[]],[[],3],[[],3],[[],19],0,[52,26],[[]],0,[[]],[[]],[55,55],[[]],[[],55],[11],[11],[[],[[12,[9]]]],[11],[[55,55],26],[[55,13],14],[[[16,[56]]],55],[[]],[[[16,[[16,[[16,[[16,[56]]]]]]]]],55],[56,55],[[[16,[[16,[56]]]]],55],[[[16,[[16,[[16,[56]]]]]]],55],[[],11],[[]],[[55,55],26],0,0,[[]],[55,18],[[],3],[[],3],[[],19],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],57],[58],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[58,58],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[69,71],[[],59],[[],60],[[],61],[[],62],[[],63],[[],64],[[],65],[[],66],[[],67],[[],68],[[],69],[[],70],[[],58],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[],[[12,[9]]]],[[],[[12,[9]]]],[[],[[12,[9]]]],[[],[[12,[9]]]],[[],[[12,[9]]]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[]],[[]],[69,72],[[59,59],26],[[60,60],26],[[61,61],26],[[62,62],26],[[63,63],26],[[64,64],26],[[73,73],26],[[65,65],26],[[66,66],26],[[67,67],26],[[68,68],26],[[69,69],26],[[70,70],26],[[58,58],26],[[59,13],14],[[60,13],14],[[61,13],14],[[62,13],14],[[63,13],14],[[64,13],14],[[64,13],14],[[73,13],14],[[73,13],14],[[65,13],14],[[66,13],14],[[67,13],14],[[68,13],[[3,[38]]]],[[68,13],14],[[69,13],14],[[70,13],14],[[58,13],14],[74,59],[[]],[72,59],[[]],[75,60],[44,60],[44,61],[[]],[76,61],[77,62],[78,62],[[]],[72,63],[[]],[72,64],[79,64],[80,64],[[]],[81,73],[[]],[44,65],[[]],[82,65],[78,65],[44,66],[[]],[78,66],[83,66],[84,67],[[]],[85,67],[86,68],[[]],[6,68],[87,68],[[[16,[87]]],68],[[[16,[[16,[87]]]]],68],[[[16,[[16,[[16,[87]]]]]]],68],[[[16,[[16,[[16,[[16,[87]]]]]]]]],68],[88,69],[[]],[72,69],[[]],[72,70],[[]],[[],58],[4,[[3,[64]]]],[4,[[3,[68]]]],[72,69],[72,69],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[59,59],26],[[60,60],26],[[61,61],26],[[62,62],26],[[63,63],26],[[64,64],26],[[73,73],26],[[65,65],26],[[66,66],26],[[67,67],26],[[68,68],26],[[69,69],26],[[70,70],26],[[58,58],26],[[60,60],[[12,[43]]]],[[61,61],[[12,[43]]]],[[62,62],[[12,[43]]]],[[63,63],[[12,[43]]]],[73,[[12,[89]]]],[58,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[59,18],[60,18],[64,18],[66,18],[69,18],[[],9],[[],9],[[],9],[[],[[3,[57,90]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[4,[[3,[68]]]],[[],3],[[],3],[[],3],[91,[[3,[58]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[92,92],[93,93],[94,94],[[]],[[]],[[]],0,0,[93,55],[[],92],[[],93],[[],94],0,[11],[11],[11],[11],[11],[11],[[],[[12,[9]]]],[[],[[12,[9]]]],[[],[[12,[9]]]],[11],[11],[11],[[92,92],26],[[93,93],26],[[94,94],26],[[92,13],14],[[93,13],14],[[94,13],14],[[[16,[95]]],92],[[[16,[[16,[95]]]]],92],[[]],[96,92],[[[16,[[16,[[16,[[16,[95]]]]]]]]],92],[95,92],[[[16,[[16,[[16,[95]]]]]]],92],[[[16,[97]]],93],[98,93],[97,93],[[[16,[[16,[[16,[[16,[97]]]]]]]]],93],[[[16,[[16,[[16,[97]]]]]]],93],[[]],[[[16,[[16,[97]]]]],93],[[[16,[[16,[99]]]]],94],[[]],[99,94],[[[16,[99]]],94],[[[16,[[16,[[16,[99]]]]]]],94],[[[16,[[16,[[16,[[16,[99]]]]]]]]],94],[100,94],0,0,[[],60],[93,60],[[],11],[[],11],[[],11],[[]],[[]],[[]],0,[[],60],[93,60],[[92,92],26],[[93,93],26],[[94,94],26],0,0,0,[[],8],[93,8],[[]],[[]],[[]],[92,18],[93,18],[94,18],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[101,101],[102,102],[103,103],[104,104],[105,105],[106,106],[107,107],[108,108],[109,109],[110,110],[111,111],[112,112],[113,113],[114,114],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],101],[[],102],[[],103],[[],104],[[],105],[[],106],[[],107],[[],108],[[],109],[[],110],[[],111],[[],112],[[],113],[[],114],0,[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[101,101],26],[[102,102],26],[[103,103],26],[[104,104],26],[[105,105],26],[[106,106],26],[[107,107],26],[[108,108],26],[[109,109],26],[[110,110],26],[[111,111],26],[[112,112],26],[[113,113],26],[[114,114],26],0,0,[[101,13],14],[[102,13],14],[[103,13],14],[[104,13],14],[[105,13],14],[[106,13],14],[[107,13],14],[[108,13],14],[[109,13],14],[[110,13],14],[[111,13],14],[[112,13],14],[[113,13],14],[[114,13],14],[[[16,[[16,[[16,[115]]]]]]],101],[115,101],[[]],[[[16,[[16,[[16,[[16,[115]]]]]]]]],101],[116,101],[117,101],[[[16,[[16,[115]]]]],101],[[[16,[115]]],101],[[[16,[[16,[[16,[[16,[118]]]]]]]]],102],[[[16,[[16,[118]]]]],102],[119,102],[118,102],[[[16,[118]]],102],[[]],[[[16,[[16,[[16,[118]]]]]]],102],[[[16,[120]]],103],[120,103],[[[16,[[16,[[16,[[16,[120]]]]]]]]],103],[[]],[[[16,[[16,[[16,[120]]]]]]],103],[[[16,[[16,[120]]]]],103],[[]],[[[16,[[16,[[16,[[16,[121]]]]]]]]],104],[[[16,[[16,[[16,[121]]]]]]],104],[[[16,[[16,[121]]]]],104],[[[16,[121]]],104],[121,104],[[[16,[[16,[[16,[122]]]]]]],105],[[[16,[[16,[[16,[[16,[122]]]]]]]]],105],[[]],[[[16,[[16,[122]]]]],105],[[[16,[122]]],105],[122,105],[[[16,[123]]],106],[123,106],[[]],[[[16,[[16,[[16,[[16,[123]]]]]]]]],106],[[[16,[[16,[[16,[123]]]]]]],106],[[[16,[[16,[123]]]]],106],[[[16,[[16,[[16,[[16,[124]]]]]]]]],107],[[[16,[124]]],107],[124,107],[[[16,[[16,[[16,[124]]]]]]],107],[[]],[[[16,[[16,[124]]]]],107],[[]],[125,108],[[[16,[125]]],108],[[[16,[[16,[125]]]]],108],[[[16,[[16,[[16,[125]]]]]]],108],[[[16,[[16,[[16,[[16,[125]]]]]]]]],108],[126,109],[[[16,[126]]],109],[[[16,[[16,[126]]]]],109],[[[16,[[16,[[16,[126]]]]]]],109],[[[16,[[16,[[16,[[16,[126]]]]]]]]],109],[[]],[[]],[[[16,[[16,[[16,[[16,[127]]]]]]]]],110],[[[16,[[16,[[16,[127]]]]]]],110],[[[16,[[16,[127]]]]],110],[[[16,[127]]],110],[127,110],[128,111],[[[16,[[16,[[16,[[16,[128]]]]]]]]],111],[[[16,[[16,[[16,[128]]]]]]],111],[[[16,[[16,[128]]]]],111],[[[16,[128]]],111],[[]],[[[16,[[16,[[16,[129]]]]]]],112],[[[16,[[16,[129]]]]],112],[[[16,[129]]],112],[129,112],[[[16,[[16,[[16,[[16,[129]]]]]]]]],112],[[]],[[]],[[[16,[130]]],113],[[[16,[[16,[[16,[[16,[130]]]]]]]]],113],[[[16,[[16,[130]]]]],113],[[[16,[[16,[[16,[130]]]]]]],113],[130,113],[[[16,[[16,[[16,[[16,[131]]]]]]]]],114],[[]],[[[16,[[16,[131]]]]],114],[[[16,[131]]],114],[131,114],[[[16,[[16,[[16,[131]]]]]]],114],0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[101,101],26],[[102,102],26],[[103,103],26],[[104,104],26],[[105,105],26],[[106,106],26],[[107,107],26],[[108,108],26],[[109,109],26],[[110,110],26],[[111,111],26],[[112,112],26],[[113,113],26],[[114,114],26],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[132,132],[133,133],[134,134],[135,135],[136,136],[137,137],[138,138],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],132],[[],133],[[],134],[[],135],[[],136],[[],137],[[],138],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[132,132],26],[[133,133],26],[[134,134],26],[[135,135],26],[[136,136],26],[[137,137],26],[[138,138],26],[[132,13],14],[[133,13],14],[[134,13],14],[[135,13],14],[[136,13],14],[[137,13],14],[[138,13],14],[[[16,[[16,[139]]]]],132],[[[16,[[16,[[16,[139]]]]]]],132],[139,132],[[[16,[139]]],132],[[[16,[[16,[[16,[[16,[139]]]]]]]]],132],[[]],[[[16,[[16,[140]]]]],133],[[[16,[[16,[[16,[[16,[140]]]]]]]]],133],[[]],[[[16,[[16,[[16,[140]]]]]]],133],[[[16,[140]]],133],[140,133],[[[16,[[16,[141]]]]],134],[[[16,[[16,[[16,[[16,[141]]]]]]]]],134],[141,134],[[[16,[141]]],134],[[]],[[[16,[[16,[[16,[141]]]]]]],134],[[]],[[[16,[[16,[[16,[[16,[142]]]]]]]]],135],[[[16,[[16,[[16,[142]]]]]]],135],[142,135],[[[16,[142]]],135],[[[16,[[16,[142]]]]],135],[[[16,[[16,[[16,[143]]]]]]],136],[143,136],[[]],[[[16,[143]]],136],[[[16,[[16,[[16,[[16,[143]]]]]]]]],136],[[[16,[[16,[143]]]]],136],[[[16,[144]]],137],[144,137],[[]],[[[16,[[16,[[16,[[16,[144]]]]]]]]],137],[[[16,[[16,[144]]]]],137],[[[16,[[16,[[16,[144]]]]]]],137],[[[16,[[16,[145]]]]],138],[[[16,[[16,[[16,[145]]]]]]],138],[[]],[[[16,[145]]],138],[145,138],[[[16,[[16,[[16,[[16,[145]]]]]]]]],138],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[132,132],26],[[133,133],26],[[134,134],26],[[135,135],26],[[136,136],26],[[137,137],26],[[138,138],26],[[84,84],132],[[],135],[[],136],[[84,84],138],0,[[84,84],137],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[146,146],[147,147],[148,148],[149,149],[150,150],[151,151],[152,152],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],146],[[],147],[[],148],[[],149],[[],150],[[],151],[[],152],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[146,146],26],[[147,147],26],[[148,148],26],[[149,149],26],[[150,150],26],[[151,151],26],[[152,152],26],[[146,13],14],[[147,13],14],[[148,13],14],[[149,13],14],[[150,13],14],[[151,13],14],[[152,13],14],[[]],[[[16,[[16,[[16,[[16,[153]]]]]]]]],146],[[[16,[[16,[[16,[153]]]]]]],146],[[[16,[[16,[153]]]]],146],[[[16,[153]]],146],[153,146],[154,147],[[[16,[[16,[[16,[[16,[154]]]]]]]]],147],[[[16,[154]]],147],[[[16,[[16,[154]]]]],147],[[[16,[[16,[[16,[154]]]]]]],147],[[]],[[[16,[155]]],148],[[[16,[[16,[155]]]]],148],[155,148],[[]],[[[16,[[16,[[16,[[16,[155]]]]]]]]],148],[[[16,[[16,[[16,[155]]]]]]],148],[[[16,[[16,[[16,[[16,[156]]]]]]]]],149],[[]],[156,149],[[[16,[156]]],149],[[[16,[[16,[156]]]]],149],[[[16,[[16,[[16,[156]]]]]]],149],[157,150],[[]],[[[16,[[16,[[16,[157]]]]]]],150],[[[16,[[16,[[16,[[16,[157]]]]]]]]],150],[[[16,[[16,[157]]]]],150],[[[16,[157]]],150],[158,151],[[[16,[158]]],151],[[[16,[[16,[158]]]]],151],[[[16,[[16,[[16,[[16,[158]]]]]]]]],151],[[]],[[[16,[[16,[[16,[158]]]]]]],151],[[[16,[[16,[[16,[[16,[159]]]]]]]]],152],[159,152],[[]],[[[16,[[16,[[16,[159]]]]]]],152],[[[16,[159]]],152],[[[16,[[16,[159]]]]],152],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[146,146],26],[[147,147],26],[[148,148],26],[[149,149],26],[[150,150],26],[[151,151],26],[[152,152],26],[146,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[91,[[3,[146]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[160,160],[[]],[[],160],0,[11],[11],[11],[[160,160],26],[[160,13],14],[[[16,[[16,[[16,[[16,[161]]]]]]]]],160],[161,160],[[]],[[[16,[[16,[[16,[161]]]]]]],160],[[[16,[[16,[161]]]]],160],[[[16,[161]]],160],[[],11],[[]],0,[[160,160],26],0,[[]],[[],3],[[],3],[[],19],[[]],0,0,0,[[]],[[]],[162,162],[[]],[[],162],[11],[11],[11],[[162,162],26],0,[[162,13],14],[[[16,[[16,[[16,[[16,[163]]]]]]]]],162],[163,162],[[[16,[[16,[163]]]]],162],[[[16,[[16,[[16,[163]]]]]]],162],[[]],[[[16,[163]]],162],[[],11],[[]],0,[[162,162],26],0,0,0,0,0,[[]],[[],3],[[],3],[[],19],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[164,164],[165,165],[166,166],[[]],[[]],[[]],[[],164],[[],165],[[],166],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[164,164],26],[[165,165],26],[[166,166],26],[[164,13],14],[[165,13],14],[[166,13],14],[[[16,[167]]],164],[167,164],[[[16,[[16,[[16,[[16,[167]]]]]]]]],164],[[[16,[[16,[[16,[167]]]]]]],164],[[]],[[[16,[[16,[167]]]]],164],[[]],[[[16,[168]]],165],[168,165],[[[16,[[16,[168]]]]],165],[[[16,[[16,[[16,[168]]]]]]],165],[[[16,[[16,[[16,[[16,[168]]]]]]]]],165],[[[16,[[16,[[16,[[16,[169]]]]]]]]],166],[[[16,[[16,[169]]]]],166],[[[16,[169]]],166],[169,166],[[[16,[[16,[[16,[169]]]]]]],166],[[]],[[],11],[[],11],[[],11],[[]],[[]],[[]],0,[[164,164],26],[[165,165],26],[[166,166],26],0,0,0,0,[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],0,[[]],[[]],[[]],0,0,[[]],[[]],[170,170],[[]],[[],170],[11],[11],[11],[[170,170],26],[[170,13],14],[[[16,[[16,[171]]]]],170],[[[16,[171]]],170],[171,170],[[]],[[[16,[[16,[[16,[171]]]]]]],170],[[[16,[[16,[[16,[[16,[171]]]]]]]]],170],[[],11],[[]],0,0,[[170,170],26],0,[[]],[[],3],[[],3],[[],19],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[172,172],[173,173],[174,174],[175,175],[176,176],[177,177],[178,178],[179,179],[180,180],[181,181],[182,182],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[172,172],26],[[173,173],26],[[174,174],26],[[175,175],26],[[176,176],26],[[177,177],26],[[178,178],26],[[179,179],26],[[180,180],26],[[181,181],26],[[182,182],26],0,0,[[172,13],14],[[173,13],14],[[174,13],14],[[175,13],14],[[176,13],14],[[177,13],14],[[178,13],14],[[179,13],14],[[180,13],14],[[181,13],14],[[182,13],14],[183,172],[[[16,[[16,[[16,[184]]]]]]],172],[[[16,[[16,[184]]]]],172],[[[16,[184]]],172],[184,172],[[[16,[[16,[[16,[[16,[184]]]]]]]]],172],[[]],[[[16,[[16,[[16,[[16,[185]]]]]]]]],173],[[[16,[[16,[[16,[185]]]]]]],173],[[]],[[[16,[[16,[185]]]]],173],[[[16,[185]]],173],[185,173],[[[16,[[16,[[16,[[16,[186]]]]]]]]],174],[[[16,[[16,[[16,[186]]]]]]],174],[[]],[[[16,[[16,[186]]]]],174],[[[16,[186]]],174],[186,174],[[[16,[[16,[[16,[[16,[187]]]]]]]]],175],[187,175],[[[16,[187]]],175],[188,175],[[[16,[[16,[187]]]]],175],[[[16,[[16,[[16,[187]]]]]]],175],[[]],[189,176],[[[16,[189]]],176],[[[16,[[16,[189]]]]],176],[[[16,[[16,[[16,[189]]]]]]],176],[[[16,[[16,[[16,[[16,[189]]]]]]]]],176],[[]],[[]],[[[16,[[16,[[16,[[16,[190]]]]]]]]],177],[[[16,[[16,[[16,[190]]]]]]],177],[[[16,[[16,[190]]]]],177],[[[16,[190]]],177],[190,177],[[]],[191,178],[[[16,[191]]],178],[[[16,[[16,[191]]]]],178],[[[16,[[16,[[16,[191]]]]]]],178],[[[16,[[16,[[16,[[16,[191]]]]]]]]],178],[[[16,[[16,[[16,[192]]]]]]],179],[192,179],[[[16,[[16,[[16,[[16,[192]]]]]]]]],179],[[]],[[[16,[[16,[192]]]]],179],[[[16,[192]]],179],[[]],[193,180],[[[16,[193]]],180],[[[16,[[16,[193]]]]],180],[[[16,[[16,[[16,[193]]]]]]],180],[[[16,[[16,[[16,[[16,[193]]]]]]]]],180],[[]],[[[16,[[16,[[16,[[16,[194]]]]]]]]],181],[194,181],[[[16,[194]]],181],[[[16,[[16,[[16,[194]]]]]]],181],[[[16,[[16,[194]]]]],181],[195,182],[[[16,[195]]],182],[[[16,[[16,[[16,[[16,[195]]]]]]]]],182],[[[16,[[16,[195]]]]],182],[[[16,[[16,[[16,[195]]]]]]],182],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[172,172],26],[[173,173],26],[[174,174],26],[[175,175],26],[[176,176],26],[[177,177],26],[[178,178],26],[[179,179],26],[[180,180],26],[[181,181],26],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[196,196],[197,197],[198,198],[199,199],[200,200],[201,201],[202,202],[203,203],[204,204],[205,205],[206,206],[207,207],[208,208],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[],196],[[],197],[[],198],[[],204],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],0,[197,12],[197,198],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[196,196],26],[[197,197],26],[[198,198],26],[[199,199],26],[[200,200],26],[[201,201],26],[[202,202],26],[[203,203],26],[[204,204],26],[[205,205],26],[[206,206],26],[[207,207],26],[[208,208],26],0,0,0,0,[[196,13],14],[[197,13],14],[[198,13],14],[[199,13],14],[[200,13],14],[[201,13],14],[[202,13],14],[[203,13],14],[[204,13],14],[[205,13],14],[[206,13],14],[[207,13],14],[[208,13],14],[209,196],[[[16,[209]]],196],[[[16,[[16,[209]]]]],196],[[[16,[[16,[[16,[209]]]]]]],196],[[[16,[[16,[[16,[[16,[209]]]]]]]]],196],[210,196],[[]],[[[16,[[16,[[16,[211]]]]]]],197],[[[16,[[16,[[16,[[16,[211]]]]]]]]],197],[211,197],[[[16,[[16,[211]]]]],197],[[[16,[211]]],197],[[]],[[[16,[[16,[[16,[[16,[212]]]]]]]]],198],[[[16,[[16,[[16,[212]]]]]]],198],[[]],[[[16,[[16,[212]]]]],198],[[[16,[212]]],198],[212,198],[[]],[[[16,[213]]],199],[[[16,[[16,[213]]]]],199],[[[16,[[16,[[16,[213]]]]]]],199],[[[16,[[16,[[16,[[16,[213]]]]]]]]],199],[214,199],[213,199],[[]],[215,200],[[[16,[[16,[[16,[[16,[216]]]]]]]]],200],[[[16,[216]]],200],[[[16,[[16,[216]]]]],200],[[[16,[[16,[[16,[216]]]]]]],200],[216,200],[[[16,[[16,[[16,[[16,[217]]]]]]]]],201],[[]],[[[16,[[16,[[16,[217]]]]]]],201],[[[16,[[16,[217]]]]],201],[[[16,[217]]],201],[217,201],[[[16,[218]]],202],[[]],[[[16,[[16,[[16,[[16,[218]]]]]]]]],202],[[[16,[[16,[[16,[218]]]]]]],202],[[[16,[[16,[218]]]]],202],[218,202],[219,203],[[[16,[[16,[[16,[220]]]]]]],203],[[]],[[[16,[[16,[220]]]]],203],[[[16,[220]]],203],[220,203],[[[16,[[16,[[16,[[16,[220]]]]]]]]],203],[221,204],[[]],[[[16,[[16,[222]]]]],204],[222,204],[[[16,[222]]],204],[[[16,[[16,[[16,[222]]]]]]],204],[[[16,[[16,[[16,[[16,[222]]]]]]]]],204],[[[16,[223]]],205],[[[16,[[16,[[16,[223]]]]]]],205],[[[16,[[16,[[16,[[16,[223]]]]]]]]],205],[223,205],[[[16,[[16,[223]]]]],205],[[]],[[]],[224,206],[[[16,[224]]],206],[[[16,[[16,[224]]]]],206],[[[16,[[16,[[16,[224]]]]]]],206],[[[16,[[16,[[16,[[16,[224]]]]]]]]],206],[225,206],[[[16,[226]]],207],[[[16,[[16,[[16,[[16,[226]]]]]]]]],207],[[[16,[[16,[226]]]]],207],[[]],[226,207],[[[16,[[16,[[16,[226]]]]]]],207],[[[16,[[16,[[16,[[16,[227]]]]]]]]],208],[[]],[[[16,[[16,[[16,[227]]]]]]],208],[[[16,[[16,[227]]]]],208],[[[16,[227]]],208],[227,208],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[196,196],26],[[197,197],26],[[198,198],26],[[199,199],26],[[200,200],26],[[201,201],26],[[202,202],26],[[204,204],26],[[205,205],26],[[206,206],26],[[207,207],26],[[208,208],26],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[196,26],[198,26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[228,228],[[]],[11],[11],[11],[[228,228],26],[[228,13],14],[229,228],[[]],[230,228],[[[16,[229]]],228],[[[16,[[16,[229]]]]],228],[[[16,[[16,[[16,[229]]]]]]],228],[[[16,[[16,[[16,[[16,[229]]]]]]]]],228],[[],11],[[]],0,[[228,228],26],0,0,[[]],[[],3],[[],3],[[],19],[228,26],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[231,231],[[]],[[],231],[11],[11],[11],[11],[11],[11],[[231,231],26],[[231,13],14],[[231,13],[[3,[38]]]],[[232,13],14],[[232,13],14],[[[16,[233]]],231],[[[8,[6]]],231],[[[16,[[16,[[16,[[16,[234]]]]]]]]],231],[[[16,[[16,[[16,[234]]]]]]],231],[[[16,[[16,[234]]]]],231],[[]],[[[16,[234]]],231],[234,231],[[[16,[[16,[[16,[[16,[233]]]]]]]]],231],[[[16,[[16,[[16,[233]]]]]]],231],[[[16,[[16,[233]]]]],231],[233,231],[[]],[4,[[3,[231]]]],[[],11],[[],11],[[]],[[]],[[231,231],26],[[]],[[],9],[[],9],[231,9],[[],3],[4,[[3,[231]]]],[[],3],[91,[[3,[231,232]]]],[[],3],[[],3],[[],19],[[],19],[[]],[[]],0,0,[[]],[[]],[235,235],[[]],[11],[11],[11],[[235,235],26],[[235,13],14],[[[16,[[16,[236]]]]],235],[[]],[[[16,[[16,[[16,[[16,[236]]]]]]]]],235],[[[16,[[16,[[16,[236]]]]]]],235],[[[16,[236]]],235],[236,235],[[],11],[[]],[[235,235],26],0,0,[[]],0,[[],3],[[],3],[[],19],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[237,237],[238,238],[239,239],[240,240],[241,241],[[]],[[]],[[]],[[]],[[]],0,[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[242,[[12,[9]]]],[11],[11],[11],[11],[11],[[237,237],26],[[238,238],26],[[239,239],26],[[240,240],26],[[241,241],26],0,0,0,[[237,13],14],[[238,13],14],[[239,13],14],[[240,13],14],[[241,13],14],[243,237],[[]],[[[16,[[16,[[16,[243]]]]]]],237],[[[16,[[16,[[16,[[16,[243]]]]]]]]],237],[[[16,[[16,[243]]]]],237],[[[16,[243]]],237],[[[16,[[16,[244]]]]],238],[[[16,[[16,[[16,[244]]]]]]],238],[[]],[[[16,[[16,[[16,[[16,[244]]]]]]]]],238],[244,238],[[[16,[244]]],238],[245,239],[[[16,[[16,[[16,[[16,[245]]]]]]]]],239],[[[16,[245]]],239],[[[16,[[16,[245]]]]],239],[[[16,[[16,[[16,[245]]]]]]],239],[[]],[[[16,[[16,[[16,[[16,[246]]]]]]]]],240],[[[16,[[16,[246]]]]],240],[[[16,[246]]],240],[246,240],[[[16,[[16,[[16,[246]]]]]]],240],[[]],[[[16,[[16,[[16,[247]]]]]]],241],[[[16,[[16,[[16,[[16,[247]]]]]]]]],241],[[]],[[[16,[[16,[247]]]]],241],[[[16,[247]]],241],[247,241],[[238,248,242],237],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[238,248,242],237],0,[[237,237],26],[[238,238],26],[[239,239],26],[[240,240],26],[[241,241],26],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[238,18],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[],19],0,[237,26],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[249,238],[11],[11],[11],[[249,250],249],[[249,[251,[59]]],249],[[]],[[],11],[[]],[[249,231],249],[[250,250,[251,[64]],[251,[64]],[251,[65]]],249],[[249,[251,[59]]],249],[[],3],[[],3],[[],19],[[249,[251,[66]]],249],[[]],0,[[],26],0,0,[[]],[[]],[[]],[[]],[252,252],[253,253],[[]],[[]],0,0,[[],252],[[],253],[11],[11],[11],[11],[11],[11],[[252,252],26],[[253,253],26],[[252,13],14],[[253,13],14],[[]],[[]],[[],11],[[],11],[[]],[[]],[[252,252],26],[[253,253],26],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[]],[[]]],"p":[[8,"Read"],[4,"Error"],[4,"Result"],[15,"str"],[3,"Error"],[15,"u8"],[3,"Global"],[3,"Vec"],[3,"String"],[3,"Account"],[15,"usize"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"Account"],[3,"Versioned"],[3,"SpinLockObjectPool"],[3,"ROInput"],[3,"TypeId"],[4,"AuthRequired"],[3,"Permissions"],[4,"AuthRequired"],[3,"Permissions"],[3,"TimedData"],[4,"Timing"],[15,"bool"],[3,"TimedData"],[4,"Timing"],[4,"TokenPermissions"],[4,"TokenPermissions"],[3,"BlockchainState"],[3,"BlockchainState"],[3,"BlockchainStateJson"],[3,"ByteVec"],[3,"ByteVec"],[3,"VrfOutputTruncated"],[3,"ConsensusState"],[3,"Error"],[3,"VrfOutputTruncated"],[3,"VrfOutputTruncatedJson"],[3,"ConsensusState"],[3,"ConsensusStateJson"],[4,"Ordering"],[15,"u32"],[3,"DeltaTransitionChainProof"],[3,"DeltaTransitionChainProof"],[3,"DeltaTransitionChainProofJson"],[3,"EpochLedger"],[3,"EpochData"],[3,"EpochLedger"],[3,"EpochData"],[3,"ExternalTransition"],[3,"ExternalTransition"],[3,"ExternalTransitionJson"],[3,"GlobalSlot"],[3,"GlobalSlot"],[3,"BitSlice"],[3,"BigInt256"],[3,"TokenId"],[3,"Length"],[3,"Delta"],[3,"ExtendedU32"],[3,"ExtendedU64"],[3,"Amount"],[3,"AccountNonce"],[3,"GlobalSlotNumber"],[3,"Hex64"],[3,"Char"],[3,"BlockTime"],[3,"BlockTimeSpan"],[3,"OffsetDateTime"],[15,"u64"],[4,"ParseAmountError"],[6,"TokenIdV1"],[6,"LengthV1"],[6,"DeltaV1"],[15,"i32"],[6,"ExtendedU32"],[6,"ExtendedU64_3"],[6,"AmountV1"],[3,"ParseIntError"],[6,"AccountNonceV1"],[6,"GlobalSlotNumberV1"],[15,"i64"],[6,"Hex64V1"],[6,"CharV1"],[3,"CharJson"],[6,"BlockTimeV1"],[8,"Error"],[4,"BitSpanError"],[8,"AsRef"],[3,"ProtocolConstants"],[3,"ProtocolState"],[3,"ProtocolStateBody"],[3,"ProtocolConstants"],[3,"ProtocolConstantsJson"],[3,"ProtocolState"],[3,"ProtocolStateJson"],[3,"ProtocolStateBody"],[3,"ProtocolStateBodyJson"],[3,"ProtocolStateProof"],[3,"ProofStatement"],[3,"ProofState"],[3,"ProofStateDeferredValues"],[3,"Plonk"],[4,"ShiftedValue"],[3,"SpongeDigestBeforeEvaluations"],[3,"ProofStatePairingBased"],[3,"PairingBased"],[3,"PrevEvals"],[3,"PrevXHat"],[3,"Proof"],[3,"ProofOpeningsEvals"],[3,"ProofOpenings"],[3,"ProtocolStateProof"],[3,"ProtocolStateProofBase64Json"],[3,"ProtocolStateProofJson"],[3,"ProofStatement"],[3,"ProofStatementJson"],[3,"ProofState"],[3,"ProofStateDeferredValues"],[3,"Plonk"],[4,"ShiftedValue"],[3,"SpongeDigestBeforeEvaluations"],[3,"ProofStatePairingBased"],[3,"PairingBased"],[3,"PrevEvals"],[3,"PrevXHat"],[3,"Proof"],[3,"ProofOpeningsEvals"],[3,"ProofOpenings"],[3,"BulletproofChallenge"],[3,"BulletproofChallenges"],[3,"ProofStateBulletproofChallenges"],[3,"BulletproofChallengeTuple17"],[3,"BulletproofChallengeTuple18"],[4,"BulletproofPreChallenge"],[3,"ScalarChallengeVector2"],[3,"BulletproofChallenge"],[3,"BulletproofChallenges"],[3,"ProofStateBulletproofChallenges"],[3,"BulletproofChallengeTuple17"],[3,"BulletproofChallengeTuple18"],[4,"BulletproofPreChallenge"],[3,"ScalarChallengeVector2"],[3,"FieldElementVec"],[3,"FiniteECPoint"],[3,"FiniteECPointVec"],[3,"FiniteECPointPair"],[3,"FiniteECPointPairVec"],[4,"ECPoint"],[3,"ECPointVec"],[3,"FieldElementVec"],[3,"FiniteECPoint"],[3,"FiniteECPointVec"],[3,"FiniteECPointPair"],[3,"FiniteECPointPairVec"],[4,"ECPoint"],[3,"ECPointVec"],[3,"OpeningProof"],[3,"OpeningProof"],[3,"ProofEvaluations"],[3,"ProofEvaluations"],[3,"ProofMessages"],[3,"ProofMessageWithoutDegreeBoundList"],[3,"ProofMessageWithDegreeBound"],[3,"ProofMessages"],[3,"ProofMessageWithoutDegreeBoundList"],[3,"ProofMessageWithDegreeBound"],[3,"ProtocolVersion"],[3,"ProtocolVersion"],[3,"TransactionSnarkWork"],[4,"OneORTwo"],[3,"TransactionSnark"],[3,"Statement"],[3,"PendingCoinbaseStackState"],[3,"PendingCoinbase"],[3,"StateStack"],[3,"FeeExcessPair"],[3,"FeeExcess"],[3,"Signed"],[4,"SgnType"],[3,"TransactionSnarkWorkJson"],[3,"TransactionSnarkWork"],[4,"OneORTwo"],[3,"TransactionSnark"],[3,"Statement"],[3,"StatementJson"],[3,"PendingCoinbaseStackState"],[3,"PendingCoinbase"],[3,"StateStack"],[3,"FeeExcessPair"],[3,"FeeExcess"],[3,"Signed"],[4,"SgnType"],[3,"StagedLedgerDiff"],[3,"StagedLedgerDiffTuple"],[3,"StagedLedgerPreDiff"],[3,"UserCommandWithStatus"],[4,"TransactionStatus"],[3,"TransactionStatusAuxiliaryData"],[3,"TransactionStatusBalanceData"],[4,"TransactionStatusFailedType"],[4,"CoinBase"],[3,"CoinBaseFeeTransfer"],[4,"InternalCommandBalanceData"],[3,"CoinBaseBalanceData"],[3,"FeeTransferBalanceData"],[3,"StagedLedgerDiff"],[3,"StagedLedgerDiffJson"],[3,"StagedLedgerDiffTuple"],[3,"StagedLedgerPreDiff"],[3,"UserCommandWithStatus"],[3,"UserCommandWithStatusJson"],[4,"TransactionStatusJson"],[4,"TransactionStatus"],[3,"TransactionStatusAuxiliaryData"],[3,"TransactionStatusBalanceData"],[4,"TransactionStatusFailedTypeJson"],[4,"TransactionStatusFailedType"],[4,"CoinBaseJson"],[4,"CoinBase"],[3,"CoinBaseFeeTransfer"],[4,"InternalCommandBalanceData"],[4,"InternalCommandBalanceDataJson"],[3,"CoinBaseBalanceData"],[3,"FeeTransferBalanceData"],[4,"UserCommand"],[4,"UserCommand"],[4,"UserCommandJson"],[3,"SignedCommandMemo"],[4,"SignedCommandMemoError"],[3,"SignedCommandMemo"],[3,"SignedCommandMemoJson"],[3,"PaymentPayload"],[3,"PaymentPayload"],[3,"SignedCommand"],[3,"SignedCommandPayload"],[3,"SignedCommandPayloadCommon"],[4,"SignedCommandPayloadBody"],[4,"StakeDelegation"],[4,"NetworkId"],[3,"SignedCommand"],[3,"SignedCommandPayload"],[3,"SignedCommandPayloadCommon"],[4,"SignedCommandPayloadBody"],[4,"StakeDelegation"],[3,"Keypair"],[3,"SignedTransferCommandBuilder"],[3,"CompressedPubKey"],[8,"Into"],[3,"VerificationKey"],[3,"Data"],[8,"BinProtSerializationType"],[8,"JsonSerializationType"],[13,"Timed"],[13,"NotOwned"],[13,"TokenOwned"],[13,"ErrorParsingInteger"],[13,"ErrorInvalidFormat"],[8,"Header"],[13,"ShiftedValue"],[13,"ScalarChallenge"],[13,"Finite"],[13,"One"],[13,"Two"],[13,"One"],[13,"Two"],[13,"CoinBase"],[13,"FeeTransfer"],[13,"Applied"],[13,"Failed"],[13,"SignedCommand"],[13,"PaymentPayload"],[13,"StakeDelegation"],[13,"SetDelegate"],[8,"Verifiable"]]},\
"mina_secrets":{"doc":"This crate provides utilities for managing account …","t":[0,13,13,13,4,13,13,13,3,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12],"n":["secret_box","AeadError","Argon2Error","Base58DecodeError","Error","InvalidPasswordHashPrimitiveError","InvalidSecretBoxPrimitiveError","JsonSerdeError","Keypair","KeypairError","PasswordHashError","SecretBox","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_hex","from_parts_unsafe","get_address","get_keypair","get_private_key_bytes","init","init","init","into","into","into","ne","public","rand","source","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","0","0","0","0","0","0"],"q":["mina_secrets","mina_secrets::secret_box","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_secrets::secret_box::Error","","","","",""],"d":["This module contains utilties for loading keypair from …","AeadError","Argon2Error","Fail to decode base58 string","Error type of handling wallet files generated from …","Invalid password hash primitive","Invalid secret box primitive","Fail to serialize / deserialize json","Keypair structure","KeypairError","PasswordHashError","Type that represents a wallet loaded from a wallet file …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a keypair from secret key hex","Create a keypair from scalar field <code>secret</code> element and …","Obtain the Mina address corresponding to the keypair’s …","Gets Keypair from the wallet with a password","Gets raw bytes(little-endian) of the private key from the …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Public key","Generate a random keypair","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,5,5,5,0,5,5,5,0,5,5,0,5,1,2,5,1,2,1,2,1,2,5,1,2,5,1,2,5,1,2,2,5,5,1,2,2,5,5,5,1,2,2,2,2,1,1,5,1,2,5,1,2,2,2,2,5,1,2,5,2,5,1,1,2,5,1,1,1,2,5,1,2,5,1,2,24,25,26,27,28,29],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[2,2],4],[[5,6],7],[[5,6],7],[[1,6],7],[[2,6],[[9,[8]]]],[[2,6],[[9,[8]]]],[10,5],[[]],[11,5],[[]],[[]],[12,[[9,[2,13]]]],[[[15,[14]]],2],[2,16],[[1,17],[[9,[2,5]]]],[[1,17],[[9,[[19,[18]],5]]]],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[2,2],4],0,[[],2],[5,[[21,[20]]]],[[]],[[]],[[],16],[[],16],[[],9],[12,[[9,[1]]]],[[],9],[[],9],[[],9],[1,[[9,[16,5]]]],[1,[[9,[22,5]]]],[[],9],[[],9],[[],23],[[],23],[[],23],[[]],[[]],[[]],0,0,0,0,0,0],"p":[[3,"SecretBox"],[3,"Keypair"],[15,"usize"],[15,"bool"],[4,"Error"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[3,"Error"],[4,"Error"],[15,"str"],[4,"KeypairError"],[3,"PallasParameters"],[3,"GroupAffine"],[3,"String"],[8,"AsRef"],[15,"u8"],[3,"Vec"],[8,"Error"],[4,"Option"],[4,"Value"],[3,"TypeId"],[13,"JsonSerdeError"],[13,"Base58DecodeError"],[13,"Argon2Error"],[13,"PasswordHashError"],[13,"AeadError"],[13,"KeypairError"]]},\
"mina_serialization_types":{"doc":"This crate provides a number of types that capture shape …","tn":["BinProtSerializationType","JsonSerializationType","T","T","account","blockchain_state","bulletproof_challenges","common","consensus_state","delta_transition_chain_proof","epoch_data","errors","external_transition","field_and_curve_elements","global_slot","impl_mina_enum_json_serde","impl_mina_enum_json_serde_with_option","impl_strconv_via_json","json","macros","opening_proof","proof_evaluations","proof_messages","protocol_constants","protocol_state","protocol_state_body","protocol_state_proof","protocol_version","signatures","snark_work","staged_ledger_diff","try_from_binprot","try_from_binprot","try_from_json","try_from_json","try_into_binprot","try_into_binprot","try_into_json","try_into_json","v1","version_bytes","Account","AccountV1","AuthRequired","AuthRequiredV1","Both","Either","Impossible","None","NotOwned","Permissions","PermissionsV1","Proof","Signature","Timed","TimedData","TimedDataV1","Timing","TimingV1","TokenOwned","TokenPermissions","TokenPermissionsV1","Untimed","balance","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cliff_amount","cliff_time","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","delegate","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","edit_state","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","init","init","init","init","init","init","initial_minimum_balance","into","into","into","into","into","into","ne","ne","ne","ne","ne","nonce","permissions","public_key","receipt_chain_hash","receive","send","serialize","serialize","serialize","serialize","serialize","serialize","set_delegate","set_permissions","set_verification_key","snapp","stake","timing","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","token_id","token_permissions","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vesting_increment","vesting_period","voting_for","vzip","vzip","vzip","vzip","vzip","vzip","0","account_disabled","disable_new_accounts","BlockchainState","BlockchainStateJson","BlockchainStateV1","NonSnarkStagedLedgerHash","NonSnarkStagedLedgerHashJson","NonSnarkStagedLedgerHashV1","StagedLedgerHash","StagedLedgerHashJson","StagedLedgerHashV1","aux_hash","aux_hash","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","genesis_ledger_hash","genesis_ledger_hash","init","init","init","init","init","init","into","into","into","into","into","into","ledger_hash","ledger_hash","ne","ne","ne","ne","ne","ne","non_snark","non_snark","pending_coinbase_aux","pending_coinbase_aux","pending_coinbase_hash","pending_coinbase_hash","serialize","serialize","serialize","serialize","serialize","serialize","snarked_ledger_hash","snarked_ledger_hash","snarked_next_available_token","snarked_next_available_token","staged_ledger_hash","staged_ledger_hash","timestamp","timestamp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","10","10","10","10","11","11","11","11","12","12","12","12","13","13","13","13","14","14","14","14","15","15","15","15","16","16","16","16","17","17","17","17","18","18","2","2","2","2","2","2","2","2","3","3","3","3","4","4","4","4","5","5","5","5","6","6","6","6","7","7","7","7","8","8","8","8","9","9","9","9","BulletproofChallenge","BulletproofChallengeJson","BulletproofChallengeTuple17","BulletproofChallengeTuple17Json","BulletproofChallengeTuple17V1","BulletproofChallengeTuple18","BulletproofChallengeTuple18Json","BulletproofChallengeTuple18V1","BulletproofChallengeV1","BulletproofChallenges","BulletproofChallengesJson","BulletproofChallengesV1","BulletproofPreChallenge","BulletproofPreChallengeJson","BulletproofPreChallengeV1","ProofStateBulletproofChallenges","ProofStateBulletproofChallengesJson","ProofStateBulletproofChallengesV1","ScalarChallenge","ScalarChallenge","ScalarChallengeVector2","ScalarChallengeVector2Json","ScalarChallengeVector2V1","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","prechallenge","prechallenge","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","0","0","0","0","0","0","AccountNonceV1","AmountV1","AuxHashJson","Base58EncodableType","Base58EncodableVersionedType","BigInt256","BlockTimeV1","ByteVec","ByteVecJson","ByteVecV1","ChainHashV1Json","CharJson","CharV1","CoinBaseHashV1Json","CoinBaseStackDataV1Json","CoinBaseStackHashV1Json","DecimalJson","DeltaV1","EpochSeedHashV1Json","ExtendedU32","ExtendedU64","ExtendedU64_2","ExtendedU64_3","GlobalSlotNumberV1","Hash2V1","HashV1","HashV1Json","Hex64V1","I64","LedgerHashV1Json","LengthV1","PendingCoinbaseAuxHashJson","StateHashV1Json","TokenIdV1","U32Json","U64Json","VrfOutputHashV1Json","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_base58","from_base58","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","ne","ne","ne","ne","ne","ne","ne","ne","ne","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_base58_builder","to_base58_builder","to_base58_string","to_base58_string","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","ConsensusState","ConsensusStateJson","ConsensusStateV1","VrfOutputTruncated","VrfOutputTruncatedJson","VrfOutputTruncatedV1","block_creator","block_creator","block_stake_winner","block_stake_winner","blockchain_length","blockchain_length","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","coinbase_receiver","coinbase_receiver","curr_global_slot","curr_global_slot","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","epoch_count","epoch_count","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","global_slot_since_genesis","global_slot_since_genesis","has_ancestor_in_same_checkpoint_window","has_ancestor_in_same_checkpoint_window","init","init","init","init","into","into","into","into","last_vrf_output","last_vrf_output","min_window_density","min_window_density","ne","ne","ne","ne","next_epoch_data","next_epoch_data","serialize","serialize","serialize","serialize","staking_epoch_data","staking_epoch_data","sub_window_densities","sub_window_densities","supercharge_coinbase","supercharge_coinbase","to_owned","to_owned","to_owned","to_owned","total_currency","total_currency","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","0","0","1","1","DeltaTransitionChainProof","DeltaTransitionChainProofJson","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","init","init","into","into","ne","ne","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","EpochData","EpochDataJson","EpochDataV1","EpochLedger","EpochLedgerJson","EpochLedgerV1","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","epoch_length","epoch_length","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","init","init","init","init","into","into","into","into","ledger","ledger","lock_checkpoint","lock_checkpoint","ne","ne","ne","ne","seed","seed","serialize","serialize","serialize","serialize","start_checkpoint","start_checkpoint","to_owned","to_owned","to_owned","to_owned","total_currency","total_currency","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Base58DecodeError","BinProtError","Custom","Error","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","init","into","source","to_string","try_from","try_into","type_id","vzip","0","0","0","ExternalTransition","ExternalTransitionJson","ExternalTransitionV1","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","current_protocol_version","current_protocol_version","delta_transition_chain_proof","delta_transition_chain_proof","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","init","init","into","into","ne","ne","proposed_protocol_version_opt","proposed_protocol_version_opt","protocol_state","protocol_state","protocol_state_proof","protocol_state_proof","serialize","serialize","staged_ledger_diff","staged_ledger_diff","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","validation_callback","validation_callback","vzip","vzip","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","ECPoint","ECPointJson","ECPointV1","ECPointVec","ECPointVecJson","ECPointVecV1","FieldElement","FieldElementJson","FieldElementVec","FieldElementVecJson","FieldElementVecV1","Finite","Finite","FiniteECPoint","FiniteECPointJson","FiniteECPointPair","FiniteECPointPairJson","FiniteECPointPairVec","FiniteECPointPairVecJson","FiniteECPointPairVecV1","FiniteECPointVec","FiniteECPointVecJson","FiniteECPointVecV1","Infinite","Infinite","InnerCurveScalar","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_hex_string","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_hex_str","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","GlobalSlot","GlobalSlotJson","GlobalSlotV1","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","init","init","into","into","ne","ne","serialize","serialize","slot_number","slot_number","slots_per_epoch","slots_per_epoch","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AuxHashJson","BlockchainStateJson","BulletproofChallengeJson","BulletproofChallengeTuple17Json","BulletproofChallengeTuple18Json","BulletproofChallengesJson","BulletproofPreChallengeJson","ByteVecJson","ChainHashV1Json","CharJson","CoinBaseBalanceDataJson","CoinBaseHashV1Json","CoinBaseJson","ConsensusStateJson","DeltaTransitionChainProofJson","ECPointJson","ECPointVecJson","EpochSeedHashV1Json","ExternalTransitionJson","FeeExcessJson","FeeExcessPairJson","FeeTransferBalanceDataJson","FieldElementJson","FieldElementVecJson","FiniteECPointJson","FiniteECPointPairJson","FiniteECPointPairVecJson","FiniteECPointVecJson","HashV1Json","InternalCommandBalanceDataJson","LedgerHashV1Json","OneORTwoJson","OpeningProofJson","PairingBasedJson","PaymentPayloadJson","PendingCoinbaseAuxHashJson","PendingCoinbaseJson","PendingCoinbaseStackStateJson","PlonkJson","PrevEvalsJson","PrevXHatJson","ProofEvaluationsJson","ProofJson","ProofMessageWithDegreeBoundJson","ProofMessageWithoutDegreeBoundListJson","ProofMessagesJson","ProofOpeningsEvalsJson","ProofOpeningsJson","ProofStateBulletproofChallengesJson","ProofStateDeferredValuesJson","ProofStateJson","ProofStatePairingBasedJson","ProofStatementJson","ProtocolConstantsJson","ProtocolStateBodyJson","ProtocolStateJson","ProtocolStateProofBase64Json","ProtocolStateProofJson","ProtocolVersionJson","PublicKeyJson","ScalarChallengeVector2Json","SgnTypeJson","ShiftedValueJson","SignatureJson","SignedCommandJson","SignedCommandMemoJson","SignedCommandPayloadBodyJson","SignedCommandPayloadCommonJson","SignedCommandPayloadJson","SignedJson","SpongeDigestBeforeEvaluations","StagedLedgerDiffJson","StakeDelegationJson","StateHashV1Json","StateStackJson","StatementJson","TransactionSnarkJson","TransactionSnarkWorkJson","TransactionStatusAuxiliaryDataJson","TransactionStatusBalanceDataJson","TransactionStatusFailedTypeJson","TransactionStatusJson","UserCommandJson","UserCommandWithStatusJson","VrfOutputHashV1Json","VrfOutputTruncatedJson","OpeningProof","OpeningProofJson","OpeningProofV1","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","delta","delta","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","init","init","into","into","lr","lr","ne","ne","serialize","serialize","sg","sg","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","z_1","z_1","z_2","z_2","ProofEvaluations","ProofEvaluationsJson","ProofEvaluationsV1","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","f","f","fmt","fmt","from","from","from","from","from","from","from","from","init","init","into","into","l","l","ne","ne","o","o","r","r","serialize","serialize","sigma1","sigma1","sigma2","sigma2","t","t","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","z","z","0","0","ProofMessageWithDegreeBound","ProofMessageWithDegreeBoundJson","ProofMessageWithDegreeBoundV1","ProofMessageWithoutDegreeBoundList","ProofMessageWithoutDegreeBoundListJson","ProofMessageWithoutDegreeBoundListV1","ProofMessages","ProofMessagesJson","ProofMessagesV1","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","into","into","into","into","into","into","l_comm","l_comm","ne","ne","ne","ne","ne","ne","o_comm","o_comm","r_comm","r_comm","serialize","serialize","serialize","serialize","serialize","serialize","shifted","shifted","t_comm","t_comm","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unshifted","unshifted","vzip","vzip","vzip","vzip","vzip","vzip","z_comm","z_comm","ProtocolConstants","ProtocolConstantsJson","ProtocolConstantsV1","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","delta","delta","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","genesis_state_timestamp","genesis_state_timestamp","init","init","into","into","k","k","ne","ne","serialize","serialize","slots_per_epoch","slots_per_epoch","slots_per_sub_window","slots_per_sub_window","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ProtocolState","ProtocolStateJson","ProtocolStateV1","body","body","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","init","init","into","into","ne","ne","previous_state_hash","previous_state_hash","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ProtocolStateBody","ProtocolStateBodyJson","ProtocolStateBodyV1","blockchain_state","blockchain_state","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","consensus_state","consensus_state","constants","constants","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","genesis_state_hash","genesis_state_hash","init","init","into","into","ne","ne","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","2","2","3","3","4","4","PairingBased","PairingBasedJson","PairingBasedV1","Plonk","PlonkJson","PlonkV1","PrevEvals","PrevEvalsJson","PrevEvalsV1","PrevXHat","PrevXHatJson","PrevXHatV1","Proof","ProofJson","ProofOpenings","ProofOpeningsEvals","ProofOpeningsEvalsJson","ProofOpeningsJson","ProofOpeningsV1","ProofState","ProofStateDeferredValues","ProofStateDeferredValuesJson","ProofStateDeferredValuesV1","ProofStateJson","ProofStatePairingBased","ProofStatePairingBasedJson","ProofStatePairingBasedV1","ProofStateV1","ProofStatement","ProofStatementJson","ProofStatementV1","ProofV1","ProtocolStateProof","ProtocolStateProofBase64Json","ProtocolStateProofJson","ProtocolStateProofV1","ShiftedValue","ShiftedValue","ShiftedValue","ShiftedValueJson","ShiftedValueV1","SpongeDigestBeforeEvaluations","SpongeDigestBeforeEvaluationsJson","SpongeDigestBeforeEvaluationsV1","alpha","alpha","app_state","app_state","b","b","beta","beta","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bulletproof_challenges","bulletproof_challenges","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combined_inner_product","combined_inner_product","deferred_values","deferred_values","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evals","evals","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gamma","gamma","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","me_only","me_only","messages","messages","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","old_bulletproof_challenges","old_bulletproof_challenges","old_bulletproof_challenges","old_bulletproof_challenges","openings","openings","pass_through","pass_through","plonk","plonk","prev_evals","prev_evals","prev_x_hat","prev_x_hat","proof","proof","proof","proof","proof_state","proof_state","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","sg","sg","sg","sg","sponge_digest_before_evaluations","sponge_digest_before_evaluations","statement","statement","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","which_branch","which_branch","xi","xi","zeta","zeta","0","0","ProtocolVersion","ProtocolVersionJson","ProtocolVersionV1","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","drop","eq","fmt","from","from","init","into","major","minor","ne","patch","serialize","to_owned","try_from","try_into","type_id","vzip","0","0","0","0","CompressedCurvePoint","PublicKey2V1","PublicKeyJson","PublicKeyV1","SignatureJson","SignatureV1","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","init","init","init","init","init","init","into","into","into","into","into","into","is_odd","is_odd","ne","ne","ne","ne","ne","ne","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","x","x","0","0","1","1","FeeExcess","FeeExcessJson","FeeExcessPair","FeeExcessPairJson","FeeExcessPairV1","LedgerProofV1","Neg","Neg","Neg","One","One","OneORTwo","OneORTwoJson","OneORTwoV1","PendingCoinbase","PendingCoinbaseJson","PendingCoinbaseStackState","PendingCoinbaseStackStateJson","PendingCoinbaseStackStateV1","PendingCoinbaseV1","Pos","Pos","Pos","SgnType","SgnTypeJson","SgnTypeJsonProxy","SgnTypeV1","Signed","SignedJson","SignedV1","StateStack","StateStackJson","StateStackV1","Statement","StatementJson","StatementV1","TransactionSnark","TransactionSnarkJson","TransactionSnarkV1","TransactionSnarkWork","TransactionSnarkWorkJson","TransactionSnarkWorkV1","Two","Two","amount","amount","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","curr","curr","data_stack","data_stack","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fee","fee","fee_excess","fee_excess","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","magnitude","magnitude","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","next_available_token_after","next_available_token_after","next_available_token_before","next_available_token_before","pending_coinbase_stack_state","pending_coinbase_stack_state","proofs","proofs","prover","prover","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","sgn","sgn","sok_digest","sok_digest","source","source","source","source","state_stack","state_stack","statement","statement","supply_increase","supply_increase","target","target","target","target","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","token","token","transaction_snark_proof","transaction_snark_proof","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","1","0","0","1","0","0","0","0","1","1","AmountInsufficientToCreateAccount","AmountInsufficientToCreateAccount","Applied","Applied","CannotPayCreationFeeInToken","CannotPayCreationFeeInToken","CoinBase","CoinBase","CoinBase","CoinBaseBalanceData","CoinBaseBalanceDataJson","CoinBaseBalanceDataV1","CoinBaseFeeTransfer","CoinBaseFeeTransferJson","CoinBaseFeeTransferV1","CoinBaseJson","CoinBaseV1","Failed","Failed","FeeTransfer","FeeTransfer","FeeTransferBalanceData","FeeTransferBalanceDataJson","FeeTransferBalanceDataV1","IncorrectNonce","IncorrectNonce","InternalCommandBalanceData","InternalCommandBalanceDataJson","InternalCommandBalanceDataV1","MismatchedTokenPermissions","MismatchedTokenPermissions","NotTokenOwner","NotTokenOwner","One","One","Overflow","Overflow","PaymentPayload","PaymentPayload","PaymentPayload","PaymentPayloadJson","PaymentPayloadV1","Predicate","Predicate","ReceiverAlreadyExists","ReceiverAlreadyExists","ReceiverNotPresent","ReceiverNotPresent","SetDelegate","SetDelegate","SignedCommand","SignedCommand","SignedCommand","SignedCommandFeeTokenV1","SignedCommandJson","SignedCommandMemo","SignedCommandMemoJson","SignedCommandMemoV1","SignedCommandOnSnappAccount","SignedCommandOnSnappAccount","SignedCommandPayload","SignedCommandPayloadBody","SignedCommandPayloadBodyJson","SignedCommandPayloadBodyV1","SignedCommandPayloadCommon","SignedCommandPayloadCommonJson","SignedCommandPayloadCommonV1","SignedCommandPayloadJson","SignedCommandPayloadV1","SignedCommandV1","SnappAccountNotPresent","SnappAccountNotPresent","SnappCommand","SourceInsufficientBalance","SourceInsufficientBalance","SourceMinimumBalanceViolation","SourceMinimumBalanceViolation","SourceNotPresent","SourceNotPresent","StagedLedgerDiff","StagedLedgerDiffJson","StagedLedgerDiffTuple","StagedLedgerDiffTupleJson","StagedLedgerDiffTupleV1","StagedLedgerDiffV1","StagedLedgerPreDiff","StagedLedgerPreDiffJson","StagedLedgerPreDiffV1","StakeDelegation","StakeDelegation","StakeDelegation","StakeDelegationJson","StakeDelegationV1","TransactionStatus","TransactionStatusAuxiliaryData","TransactionStatusAuxiliaryDataJson","TransactionStatusAuxiliaryDataV1","TransactionStatusBalanceData","TransactionStatusBalanceDataJson","TransactionStatusBalanceDataV1","TransactionStatusFailedType","TransactionStatusFailedTypeJson","TransactionStatusFailedTypeV1","TransactionStatusJson","TransactionStatusV1","Two","Two","UpdateNotPermitted","UpdateNotPermitted","UserCommand","UserCommandJson","UserCommandV1","UserCommandWithStatus","UserCommandWithStatusJson","UserCommandWithStatusV1","Zero","Zero","amount","amount","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coinbase","coinbase","coinbase_receiver_balance","coinbase_receiver_balance","commands","commands","common","common","completed_works","completed_works","created_token","created_token","data","data","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","diff","diff","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fee","fee","fee","fee","fee_payer_account_creation_fee_paid","fee_payer_account_creation_fee_paid","fee_payer_balance","fee_payer_balance","fee_payer_pk","fee_payer_pk","fee_token","fee_token","fee_transfer_receiver_balance","fee_transfer_receiver_balance","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","internal_command_balances","internal_command_balances","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","memo","memo","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","nonce","nonce","payload","payload","receiver1_balance","receiver1_balance","receiver2_balance","receiver2_balance","receiver_account_creation_fee_paid","receiver_account_creation_fee_paid","receiver_balance","receiver_balance","receiver_pk","receiver_pk","receiver_pk","receiver_pk","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","signature","signer","signer","source_balance","source_balance","source_pk","source_pk","status","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","token_id","token_id","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","valid_until","valid_until","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","1","0","0","1","0","0","0","0","0","0","0","0","delegator","new_delegate","delegator","new_delegate","0","0","1","1","0","0","1","1","0","0","AccountNonceV1","AccountV1","AmountV1","AuthRequiredV1","BigInt256","BlockTimeV1","BlockchainStateV1","BulletproofChallengeTuple17V1","BulletproofChallengeTuple18V1","BulletproofChallengeV1","BulletproofChallengesV1","BulletproofPreChallengeV1","ByteVecV1","CharV1","CoinBaseBalanceDataV1","CoinBaseFeeTransferV1","CoinBaseV1","ConsensusStateV1","DeltaTransitionChainProof","DeltaV1","ECPointV1","ECPointVecV1","EpochDataV1","EpochLedgerV1","ExtendedU32","ExtendedU64","ExtendedU64_2","ExtendedU64_3","ExternalTransitionV1","FeeExcessPairV1","FeeTransferBalanceDataV1","FieldElement","FieldElementVecV1","FiniteECPoint","FiniteECPointPairVecV1","FiniteECPointVecV1","GlobalSlotNumberV1","GlobalSlotV1","Hash2V1","HashV1","Hex64V1","InnerCurveScalar","InternalCommandBalanceDataV1","LedgerProofV1","LengthV1","NonSnarkStagedLedgerHashV1","OneORTwoV1","OpeningProofV1","PairingBasedV1","PaymentPayloadV1","PendingCoinbaseStackStateV1","PendingCoinbaseV1","PermissionsV1","PlonkV1","PrevEvalsV1","PrevXHatV1","ProofEvaluationsV1","ProofMessageWithDegreeBoundV1","ProofMessageWithoutDegreeBoundListV1","ProofMessagesV1","ProofOpeningsV1","ProofStateBulletproofChallengesV1","ProofStateDeferredValuesV1","ProofStatePairingBasedV1","ProofStateV1","ProofStatementV1","ProofV1","ProtocolConstantsV1","ProtocolStateBodyV1","ProtocolStateProofV1","ProtocolStateV1","ProtocolVersionV1","PublicKey2V1","PublicKeyV1","ScalarChallengeVector2V1","SgnTypeV1","ShiftedValueV1","SignatureV1","SignedCommandFeeTokenV1","SignedCommandMemoV1","SignedCommandPayloadBodyV1","SignedCommandPayloadCommonV1","SignedCommandPayloadV1","SignedCommandV1","SignedV1","SpongeDigestBeforeEvaluationsV1","StagedLedgerDiffTupleV1","StagedLedgerDiffV1","StagedLedgerHashV1","StagedLedgerPreDiffV1","StakeDelegationV1","StateStackV1","StatementV1","TimingV1","TokenIdV1","TokenPermissionsV1","TransactionSnarkV1","TransactionSnarkWorkV1","TransactionStatusAuxiliaryDataV1","TransactionStatusBalanceDataV1","TransactionStatusFailedTypeV1","TransactionStatusV1","UserCommandV1","UserCommandWithStatusV1","VrfOutputTruncatedV1","COINBASE_HASH","COINBASE_STACK_DATA","COINBASE_STACK_HASH","EPOCH_SEED","LEDGER_HASH","SIGNATURE","STAGED_LEDGER_HASH_AUX_HASH","STAGED_LEDGER_HASH_PENDING_COINBASE_AUX","STATE_HASH","USER_COMMAND_MEMO","VRF_TRUNCATED_OUTPUT"],"q":["mina_serialization_types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::account","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::account::Timing","mina_serialization_types::account::TokenPermissions","","mina_serialization_types::blockchain_state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::bulletproof_challengesmina_serialization_types::bulletproof_challenges::BulletproofPreChallenge","mina_serialization_types::bulletproof_challenges::BulletproofPreChallengeJson","mina_serialization_types::commonmina_serialization_types::consensus_state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::delta_transition_chain_proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::epoch_data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::errors","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::errors::Error","","","mina_serialization_types::external_transition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::field_and_curve_elementsmina_serialization_types::field_and_curve_elements::ECPoint","mina_serialization_types::field_and_curve_elements::ECPointJson","mina_serialization_types::global_slot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::json","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::opening_proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::proof_evaluations","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::proof_messages","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::protocol_constants","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::protocol_state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::protocol_state_body","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::protocol_state_proofmina_serialization_types::protocol_state_proof::ShiftedValue","mina_serialization_types::protocol_state_proof::ShiftedValueJson","mina_serialization_types::protocol_version","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::signatures","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::snark_work","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::snark_work::OneORTwo","","","mina_serialization_types::snark_work::OneORTwoJson","","","mina_serialization_types::staged_ledger_diffmina_serialization_types::staged_ledger_diff::CoinBase","","","mina_serialization_types::staged_ledger_diff::CoinBaseJson","","","mina_serialization_types::staged_ledger_diff::InternalCommandBalanceData","","mina_serialization_types::staged_ledger_diff::InternalCommandBalanceDataJson","","mina_serialization_types::staged_ledger_diff::SignedCommandPayloadBody","","mina_serialization_types::staged_ledger_diff::SignedCommandPayloadBodyJson","","mina_serialization_types::staged_ledger_diff::StakeDelegation","","mina_serialization_types::staged_ledger_diff::StakeDelegationJson","","mina_serialization_types::staged_ledger_diff::TransactionStatus","","","","mina_serialization_types::staged_ledger_diff::TransactionStatusJson","","","","mina_serialization_types::staged_ledger_diff::UserCommand","mina_serialization_types::staged_ledger_diff::UserCommandJson","mina_serialization_types::v1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_serialization_types::version_bytes","","","","","","","","","",""],"d":["This trait annotates a given type its corresponding …","This trait annotates a given type its corresponding json …","The corresponding serialization type for bin-prot format …","The corresponding serialization type for json format Self …","A Mina account record and supporting types This isn’t …","Types related to the Blockchain State","Types that capture serialized bullet proof challenges and …","Some basic versioned types used throughout","Types and funcions related to the Mina consensus state","Delta transition chain proof structures and functions","Types and functions related to the EpochData structure","Types that represent errors in mina serialization and …","Mina ExternalTransition","Versioned types that represent finite field and elliptic …","Structure of a global slot","Implement list tagged enum json serde format for the given …","Implement list tagged enum json serde format for the given …","Implements std::str::FromStr and std::fmt::Display by …","json serialization types for the Mina protocol","Heper macros for type conversions","The opening proof used by the protocol state proof","Proof evaluations used by the protocol state proof","Proof messages used by the protocol state proof","Types related to the Mina protocol state","Types related to the Mina protocol state","Types related to the Mina protocol state","Module containing the components of a protocol state proof","Protocol version structure","Signatures and public key types","Types related to the Transaction Snark Work","In this context a diff refers to a difference between two …","Construct from binprot bytes reader","Construct from binprot bytes reader","Construct from json string","Construct from json string","Convert into binprot byte vec","Convert into binprot byte vec","Convert into json string","Convert into json string","Version 1 serialization types for the Mina protocol","All human readable values (e.g base58 encoded hashes and …","An account as is serialized into the Mina ledger database …","An account as is serialized into the Mina ledger database …","The level of auth required to perform a particular action …","The level of auth required to perform a particular action …","Both proof and signature must be provided","Either a proof or a signature","This action can never occur","None required","Account does not own a token","Permissions associated with the account","Permissions associated with the account (v1)","Proof must be provided","Signature must be provided","Account does have timing limitations as specified","Payload for the timing variant Timed Needs its own version …","Payload for the timing variant Timed Needs its own version …","Timing information for an account with regard to when its …","Timing information for an account with regard to when its …","Account owns a token","Need to learn exactly what this is..","","Account does not have any timing limitations","Balance of token held by account","","","","","","","","","","","","","Amount extra available when fully fested","Time when all balance is avaiable","","","","","","","","","","","","","Delegate for staking purposes","","","","","","","","","","","","","","","","","","","","","","","","","Permission required to edit state","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Initial balance for the account","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Nonce (incremented with each tx to prevent replay)","Level of permission required to do different account …","Account public key","?","Permission required to receive balance","Permission required to send a balance","","","","","","","Permission required to set the delegate","Permission required to cange permissions","Permission require to set verification key","TODO: This should contain a Snapp account data once we …","If the account can stake","Any timing limitations places on this accounts balance …","","","","","","","Account token ID","Permission associated with the given token","","","","","","","","","","","","","","","","","","","Ammount released in each vesting period","Period in whcih allocation is released in chunks","The state hash this account is voting for","","","","","","","","?","?","Mina blockchain state struct","Mina blockchain state struct (json)","Mina blockchain state struct (v1)","Non-snarked ledger hash","Non-snarked ledger hash (json)","Non-snarked ledger hash (v1)","Staged ledger hash structure","Staged ledger hash structure (json)","Staged ledger hash structure (v1)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Hash of the genesis state","Hash of the genesis state","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Hash of the most recently proven state of the blockchain","Hash of the most recently proven state of the blockchain","Check whether the change of the next token ID is …","Check whether the change of the next token ID is …","Hash of the proposed next state of the blockchain","Hash of the proposed next state of the blockchain","Timestamps for blocks","Timestamps for blockseturns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","u64 representing an account nonce (v1) // This should also …","u64 representing an amount of currency (v1)","base58 string representation of a aux hash","A wrapper of versioned type that is base58 encodable","A wrapper of versioned type that is base58 encodable with …","32 bytes representing a BigInt256","u64 representing a block time (v1)","Wrapper of Vec","Wrapper of Vec (json)","Vector of bytes with a version number. Also encodes its …","base58 string representation of a chain hash","char (json)","char (v1)","base58 string representation of a coinbase hash","base58 string representation of a coinbase stack data hash","base58 string representation of a coinbase stack hash","u64 wrapper (json) Note that integers are represented as …","u32 representing a delta (i.e. difference) (v1)","base58 string representation of a coinbase hash","u32 wrapped in 1 version byte","u64 wrapped in 1 version byte","u64 wrapped in 2 version bytes","u64 wrapped in 3 version bytes","u32 representing a slot number (v1)","32 bytes representing a hash of some kind (v1) with extra …","32 bytes representing a hash of some kind (v1)","base58 string representation of a hash","Versioned 64 bytes","i64 wrapper (json)","base58 string representation of a ledger hash","u32 representing a length (v1)","base58 string representation of a pending coinbase aux hash","base58 string representation of a state hash","u64 representing a token ID (v1)","u32 wrapper (json) Note that integers are represented as …","u64 wrapper (json) Note that integers are represented as …","base58 string representation of a vrf output hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Decode input base58 encoded bytes into Base58EncodableType","Decode input base58 encoded bytes into …","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Encode inner data with version check byte into …","Encode inner data with version check byte into …","Encode inner data with version check byte into String","Encode inner data with version check byte into String","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This structure encapsulates the succinct state of the …","json protocol version of the consensus state","V1 protocol version of the consensus state","Wrapper struct for the output for a VRF","Wrapper struct for the output for a VRF (json)","Wrapper struct for the output for a VRF, with version","Compressed public key of the block producer","Compressed public key of the block producer","Compressed public key of winning account","Compressed public key of winning account","Height of block","Height of block","","","","","","","","","","","","","","","","","Compresed public key of account receiving the block reward","Compresed public key of account receiving the block reward","Current global slot number relative to the current hard …","Current global slot number relative to the current hard …","","","","","","","","","","","","","","","","","Epoch number","Epoch number","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Absolute global slot number since genesis","Absolute global slot number since genesis","If the block has an ancestor in the same checkpoint window","If the block has an ancestor in the same checkpoint window","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Additional VRS output from leader (for seeding Random …","Additional VRS output from leader (for seeding Random …","Minimum window density oberved on the chain","Minimum window density oberved on the chain","","","","","Epoch data for current epoch","Epoch data for current epoch","","","","","Epoch data for previous epoch","Epoch data for previous epoch","Current sliding window of densities","Current sliding window of densities","true if block_stake_winner has no locked tokens, false …","true if block_stake_winner has no locked tokens, false …","","","","","Total supply of currency","Total supply of currency","","","","","","","","","","","","","","","","","","","","","Proof that the block was produced within the allotted slot …","Proof that the block was produced within the allotted slot …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Epoch data","Epoch data (json)","Epoch data (v1)","Epoch Ledger","Epoch Ledger (json)","Epoch Ledger (v1)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Length of an epoch","Length of an epoch","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","A unique identifier of the EpochLedger","A unique identifier of the EpochLedger","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Epoch Ledger, contains ledger related data for the epoch","Epoch Ledger, contains ledger related data for the epoch","State hash of last known block in the first 2/3 of epoch …","State hash of last known block in the first 2/3 of epoch …","","","","","Initialize the random number generator","Initialize the random number generator","","","","","State hash of first block of epoch","State hash of first block of epoch","","","","","The total currency in circulation after the block was …","The total currency in circulation after the block was …","","","","","","","","","","","","","","","","","Error decoding base58 string","Error serde-ing bin-prot bytes","Custom error","Type that represents errors in mina serialization and …","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","This structure represents a mina block received from an …","This structure represents a mina block received from an …","Versioned structure to use externally","","","","","","","","","Current protocol version","Current protocol version","Proof that the block was produced within the allotted slot …","Proof that the block was produced within the allotted slot …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Proposed protocol version","Proposed protocol version","The blockchain state, including consensus and the ledger","The blockchain state, including consensus and the ledger","Proof that the protocol state and entire history of the …","Proof that the protocol state and entire history of the …","","","Diff of the proposed next state of the blockchain","Diff of the proposed next state of the blockchain","","","","","","","","","Callback used for validating external transition received …","Callback used for validating external transition received …","","","","","","","","","","","","","","","","","","","","Elliptic curve point that can either be the coordinates of …","Elliptic curve point that can either be the coordinates of …","Elliptic curve point that can either be the coordinates of …","Vector of EC points","Vector of EC points (json)","Vector of EC points (with version number defined in the …","Represents an element in a finite field that can be …","Field element (json)","Vector of finite field elements","Vector of finite field elements (json)","Vector of finite field elements (v1)","Point on the curve","Point on the curve","An elliptic curve point defined over a base field with …","A finite EC point (json)","Pair if finite EC Points","Pair if finite EC Points (json)","Vector of 2-tuples of finite EC points","Vector of 2-tuples of finite EC points (json)","Vector of 2-tuples of finite EC points (with version …","Vector of finite EC points","Vector of finite EC points (json)","Vector of finite EC points (with version number)","The point at infinity","The point at infinity","Wrapper type for field element denoting it is on the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return <code>ECPoint::Infinite</code>","Return <code>ECPointJson::Infinite</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get hex string repr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from hex str","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A global slot","A global slot (json)","A global slot (v1)","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","The global slot number of a chain or block","The global slot number of a chain or block","Number of slots per epoch","Number of slots per epoch","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constants that define the consensus parameters","Constants that define the consensus parameters (json)","Constants that define the consensus parameters (v1)","","","","","","","","","Maximum permissable delay of packets (in slots after the …","Maximum permissable delay of packets (in slots after the …","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Timestamp of genesis block in unixtime","Timestamp of genesis block in unixtime","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Point of finality (number of confirmations)","Point of finality (number of confirmations)","","","","","Number of slots per epoch","Number of slots per epoch","No of slots in a sub-window = 7","No of slots in a sub-window = 7","","","","","","","","","","","This structure can be thought of like the block header. It …","This structure can be thought of like the block header. It …","This structure can be thought of like the block header. It …","The body of the protocol state","The body of the protocol state","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Commitment to previous block (hash of previous protocol …","Commitment to previous block (hash of previous protocol …","","","","","","","","","","","","","Body of the protocol state","Body of the protocol state (json)","Body of the protocol state (v1)","Ledger related state","Ledger related state","","","","","","","","","Consensus related state","Consensus related state","Consensus constants","Consensus constants","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Genesis protocol state hash (used for hardforks)","Genesis protocol state hash (used for hardforks)","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","SNARK proof of the protocol state at some point in time","SNARK proof of the protocol state at some point in time …","SNARK proof of the protocol state at some point in time …","SNARK proof of the protocol state at some point in time …eturns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeefines a version of the Mina protocol in semver format","ProtocolVersion that is convertible from / to the mina …","Defines a version of the Mina protocol in semver format …","","","","","Return <code>ProtocolVersion { major: 2, minor: 0, patch: 0 }</code>","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Major version number","Minor version number","","Patch version number","","","","","","","","","","","An EC point stored in compressed form containing only the …","Public key (v1) with an extra version byte","An EC point stored in compressed form containing only the …","Public key (v1)","Signature (json)","Signature (v1)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the point is odd (or even)","If the point is odd (or even)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The x coordinate of the EC point","The x coordinate of the EC point","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeop level wrapper type for a StagedLedgerDiff","Top level wrapper type for a StagedLedgerDiff (json)","","","","Top level wrapper type for a StagedLedgerDiff (veturn <code>CoinBase::Zero</code>","Return <code>CoinBaseJson::Zero</codeeturns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codebase58 version check byte for coinbase hash","base58 version check byte for coinbase stack data","base58 version check byte for coinbase stack hash","base58 version check byte for epoch seed hash","base58 version check byte for ledger hash","base58 version check byte for signature","base58 version check byte for aux hash","base58 version check byte for pending coinbase aux hash","base58 version check byte for state hash","base58 version check byte for user command memo","base58 version check byte for vrf output hash"],"i":[0,0,227,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,227,228,228,227,227,228,228,0,0,0,0,0,0,12,12,12,12,10,0,0,12,12,13,0,0,0,0,10,0,0,13,9,9,10,11,12,13,14,9,10,11,12,13,14,14,14,9,10,11,12,13,14,9,10,11,12,13,14,9,9,10,11,12,13,14,9,10,11,12,13,14,9,10,11,12,13,14,9,10,11,12,13,14,11,9,10,11,12,13,14,9,10,11,12,13,14,9,10,11,12,13,14,9,10,11,12,13,14,14,9,10,11,12,13,14,9,10,11,13,14,9,9,9,9,11,11,9,10,11,12,13,14,11,11,11,9,11,9,9,10,11,12,13,14,9,9,9,10,11,12,13,14,9,10,11,12,13,14,9,10,11,12,13,14,14,14,9,9,10,11,12,13,14,229,230,231,0,0,0,0,0,0,0,0,0,24,25,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,20,20,21,21,21,21,21,21,22,22,23,23,23,23,23,23,24,24,25,25,25,25,25,25,20,21,20,21,22,23,24,25,20,21,22,23,24,25,24,25,20,21,22,23,24,25,22,23,24,25,22,23,20,21,22,23,24,25,20,21,20,21,20,21,20,21,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,29,30,31,32,33,34,35,36,39,40,31,32,33,34,35,36,39,40,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,35,36,31,32,33,34,35,36,39,40,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,38,0,0,0,27,28,29,30,31,32,33,34,35,36,37,38,39,40,27,28,29,30,31,32,33,34,35,36,37,38,39,40,27,28,29,30,31,32,33,34,35,36,37,38,39,40,27,28,29,30,31,32,33,34,35,36,37,38,39,40,27,28,29,30,31,32,33,34,35,36,37,38,39,40,27,28,29,30,31,32,33,34,35,36,37,38,39,40,27,28,29,30,31,32,33,34,35,36,37,38,39,40,27,28,29,30,31,32,33,34,35,36,37,38,39,40,27,28,29,30,31,32,33,34,35,36,37,38,39,40,27,28,29,30,31,32,33,34,35,36,37,38,39,40,27,27,28,28,28,28,28,28,29,29,30,30,30,30,30,30,31,31,32,32,32,32,32,32,33,33,34,34,34,34,34,34,35,35,36,36,36,36,36,36,37,37,38,38,38,38,38,38,38,38,38,38,39,39,40,40,40,40,40,40,27,28,29,30,31,32,33,34,35,36,37,38,39,40,27,28,29,30,31,32,33,34,35,36,37,38,39,40,27,28,29,30,31,32,33,34,35,36,37,38,39,40,27,28,27,28,29,30,31,32,33,34,35,36,37,38,39,40,27,28,29,30,31,32,33,34,35,36,37,38,39,40,27,28,29,30,31,32,33,34,35,36,37,38,39,40,27,28,29,30,31,32,33,34,35,36,37,38,39,40,27,28,29,30,31,32,33,34,35,36,37,38,39,40,27,28,29,30,31,32,33,34,35,36,37,38,39,40,232,233,41,42,43,44,45,46,47,49,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,42,43,44,45,46,47,49,50,41,42,43,44,45,46,47,49,50,41,42,43,44,45,46,47,49,50,41,42,43,44,45,46,47,49,50,41,42,43,44,45,46,47,49,50,41,42,43,44,45,46,47,49,50,41,42,43,44,45,46,47,49,50,41,42,43,44,45,46,47,49,50,41,42,43,44,45,46,47,49,50,41,42,43,44,45,46,47,49,50,54,55,56,57,58,58,59,60,61,62,53,41,41,41,41,42,42,42,42,43,43,43,44,44,44,45,45,45,46,46,46,46,46,47,47,47,47,47,47,47,49,49,49,49,50,50,50,49,50,41,42,43,44,45,46,47,49,50,41,42,43,44,45,46,47,49,50,41,42,43,44,45,46,47,49,50,41,42,43,44,45,46,47,49,50,49,50,49,50,41,42,43,44,45,46,47,49,50,41,42,43,44,45,46,47,49,50,41,42,43,44,45,46,47,49,50,41,42,43,44,45,46,47,49,50,41,42,43,44,45,46,47,49,50,70,71,0,0,0,0,0,0,72,73,72,73,72,73,70,71,72,73,70,71,72,73,70,71,72,73,70,71,72,73,72,73,72,73,70,71,72,73,70,71,72,73,70,71,72,73,70,71,72,73,72,73,70,71,72,73,70,71,72,73,70,70,71,71,71,71,71,71,72,72,73,73,73,73,73,73,72,73,72,73,70,71,72,73,70,71,72,73,72,73,72,73,70,71,72,73,72,73,70,71,72,73,72,73,72,73,72,73,70,71,72,73,72,73,70,71,72,73,70,71,72,73,70,71,72,73,70,71,72,73,74,75,74,75,0,0,74,75,74,75,74,75,74,75,74,75,74,75,74,75,74,75,74,75,74,75,74,74,75,75,75,75,75,75,74,75,74,75,74,75,74,75,74,75,74,75,74,75,74,75,74,75,0,0,0,0,0,0,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,79,78,79,76,77,78,79,76,77,78,79,76,76,77,77,77,77,77,77,78,78,79,79,79,79,79,79,76,77,76,77,78,79,76,77,78,79,78,79,78,79,76,77,78,79,78,79,76,77,78,79,78,79,76,77,78,79,76,77,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,79,68,68,68,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,234,235,236,0,0,0,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,83,84,84,84,84,84,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,85,86,87,88,89,90,91,92,93,94,97,98,99,87,88,91,92,0,0,0,0,0,0,0,0,0,0,0,95,96,0,0,0,0,0,0,0,0,0,0,95,96,0,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,95,96,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,85,85,86,86,86,86,86,86,87,87,88,88,88,88,88,88,89,89,90,90,90,90,90,90,91,91,92,92,92,92,92,92,93,93,94,94,94,94,94,94,95,95,96,96,96,96,96,96,96,96,96,96,97,97,98,98,98,98,98,98,99,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,237,238,0,0,0,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,102,103,103,103,103,103,103,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,105,104,105,104,105,104,105,104,105,104,105,104,105,104,105,104,105,104,105,104,105,104,104,105,105,105,105,105,105,104,105,104,105,104,105,104,105,104,105,104,105,104,105,104,105,104,105,104,105,104,105,104,105,104,105,0,0,0,106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,106,107,107,107,107,107,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107,110,111,0,0,0,0,0,0,0,0,0,108,109,110,111,112,113,108,109,110,111,112,113,108,109,110,111,112,113,108,109,110,111,112,113,108,109,110,111,112,113,108,109,110,111,112,113,108,109,110,111,112,113,108,109,110,111,112,113,108,109,110,111,112,113,108,109,110,111,112,113,108,108,109,109,109,109,109,109,110,110,111,111,111,111,111,111,112,112,113,113,113,113,113,113,108,109,110,111,112,113,108,109,110,111,112,113,108,109,108,109,110,111,112,113,108,109,108,109,108,109,110,111,112,113,112,113,108,109,108,109,110,111,112,113,108,109,110,111,112,113,108,109,110,111,112,113,108,109,110,111,112,113,112,113,108,109,110,111,112,113,108,109,0,0,0,114,115,114,115,114,115,114,115,114,115,114,115,114,115,114,115,114,115,114,115,114,115,114,114,115,115,115,115,115,115,114,115,114,115,114,115,114,115,114,115,114,115,114,115,114,115,114,115,114,115,114,115,114,115,114,115,0,0,0,116,117,116,117,116,117,116,117,116,117,116,117,116,117,116,117,116,117,116,117,116,117,116,116,117,117,117,117,117,117,116,117,116,117,116,117,116,117,116,117,116,117,116,117,116,117,116,117,116,117,0,0,0,118,119,118,119,118,119,118,119,118,119,118,119,118,119,118,119,118,119,118,119,118,119,118,119,118,119,118,118,119,119,119,119,119,119,118,119,118,119,118,119,118,119,118,119,118,119,118,119,118,119,118,119,118,119,122,133,134,139,140,141,142,145,146,133,134,139,140,145,146,133,134,133,134,133,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,132,0,0,0,0,0,129,130,137,138,127,128,129,130,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,127,128,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,127,128,125,126,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,147,148,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,120,120,121,121,121,121,121,121,122,122,123,123,124,124,124,124,124,124,125,125,126,126,126,126,126,126,127,127,128,128,128,128,128,128,129,129,130,130,130,130,130,130,131,131,132,132,132,132,132,132,132,132,132,132,133,133,134,134,134,134,134,134,135,135,136,136,136,136,136,136,137,137,138,138,138,138,138,138,139,139,140,140,140,140,140,140,141,141,142,142,142,142,142,142,143,143,144,144,144,144,144,144,145,145,146,146,146,146,146,146,147,147,148,148,148,148,148,148,129,130,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,125,126,143,144,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,135,136,137,138,143,144,123,124,127,128,120,121,120,121,120,121,147,148,123,124,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,135,136,137,138,125,126,120,121,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,127,128,127,128,129,130,239,240,0,0,0,150,150,150,150,150,150,150,150,150,150,150,152,150,150,150,150,150,150,150,150,150,150,150,150,150,155,156,157,158,0,0,0,0,0,0,153,154,155,156,157,158,153,154,155,156,157,158,153,154,155,156,157,158,153,154,155,156,157,158,153,154,155,156,157,158,153,154,155,156,157,158,153,154,155,156,157,158,153,154,155,156,157,158,153,154,155,156,157,158,153,153,154,155,156,157,158,153,153,153,154,154,154,154,154,154,154,154,155,155,155,156,156,156,157,157,157,158,158,158,153,153,154,155,156,157,158,153,154,155,156,157,158,153,154,153,154,155,156,157,158,153,154,155,156,157,158,153,154,155,156,157,158,153,153,153,154,155,156,157,158,153,154,155,156,157,158,153,154,155,156,157,158,153,154,155,156,157,158,153,154,178,179,178,179,0,0,0,0,0,0,182,183,184,164,165,0,0,0,0,0,0,0,0,0,182,183,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,165,176,177,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,174,175,172,173,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,162,163,168,169,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,162,162,163,163,163,163,163,163,164,164,165,165,165,165,165,165,165,165,165,165,166,166,167,167,167,167,167,167,168,168,169,169,169,169,169,169,170,170,171,171,171,171,171,171,172,172,173,173,173,173,173,173,174,174,175,175,175,175,175,175,176,176,177,177,177,177,177,177,178,178,179,179,179,179,179,179,180,180,181,181,181,181,181,181,182,182,183,183,184,184,184,184,184,184,184,184,184,184,184,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,174,175,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,180,181,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,168,169,168,169,168,169,162,163,162,163,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,180,181,168,169,168,169,170,171,172,173,166,167,168,169,168,169,170,171,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,176,177,166,167,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,241,242,242,243,244,244,187,188,207,208,187,188,213,214,209,210,213,214,0,221,222,0,0,0,0,0,0,0,0,209,210,221,222,0,0,0,213,214,0,0,0,213,214,213,214,217,218,213,214,0,201,202,0,0,213,214,213,214,213,214,205,206,0,193,194,0,0,0,0,0,213,214,0,0,0,0,0,0,0,0,0,0,213,214,0,213,214,213,214,213,214,0,0,0,0,0,0,0,0,0,0,201,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,217,218,213,214,0,0,0,0,0,0,217,218,203,204,197,198,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,189,190,223,224,189,190,197,198,189,190,211,212,191,192,217,218,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,185,186,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,199,200,219,220,211,212,215,216,199,200,199,200,223,224,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,185,185,186,186,186,186,186,186,187,187,188,188,188,188,188,188,189,189,190,190,190,190,190,190,191,191,192,192,192,192,192,192,193,193,194,194,194,194,194,194,194,194,194,194,195,195,196,196,196,196,196,196,197,197,198,198,198,198,198,198,199,199,200,200,200,200,200,200,201,201,202,202,202,202,202,202,202,202,202,202,203,203,204,204,204,204,204,204,205,205,206,206,206,206,206,206,206,206,206,206,207,207,208,208,208,208,208,208,209,209,210,210,210,210,210,210,210,210,210,210,211,211,212,212,212,212,212,212,213,213,214,214,214,214,214,214,214,214,214,214,215,215,216,216,216,216,216,216,217,217,218,218,218,218,218,218,218,218,218,218,219,219,220,220,220,220,220,220,221,221,222,222,222,222,222,222,222,222,222,222,223,223,224,224,224,224,224,224,225,225,226,226,226,226,226,226,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,189,190,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,199,200,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,215,216,217,218,219,220,221,222,223,224,225,226,199,200,195,196,225,226,225,226,211,212,215,216,203,204,219,220,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,195,196,195,196,215,216,203,204,191,192,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,203,204,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,199,200,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,245,246,246,247,248,248,249,250,251,252,253,254,255,256,257,257,258,258,259,260,259,260,261,262,261,262,263,264,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[1,[[3,[2]]]],[4,[[3,[5]]]],[4,[[3,[5]]]],[[],[[3,[[7,[6]],2]]]],[[],[[3,[[7,[6]],2]]]],[[],[[3,[8,5]]]],[[],[[3,[8,5]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[[]],[[]],[[]],[[]],[[]],[[]],0,[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[],[[3,[9]]]],[[],[[3,[10]]]],[[],[[3,[11]]]],[[],[[3,[12]]]],[[],[[3,[13]]]],[[],[[3,[14]]]],[15],[15],[15],[15],[15],[15],0,[[9,9],16],[[10,10],16],[[11,11],16],[[12,12],16],[[13,13],16],[[14,14],16],[[9,17],18],[[10,17],18],[[11,17],18],[[12,17],18],[[13,17],18],[[14,17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,[[]],[[]],[[]],[[]],[[]],[[]],[[9,9],16],[[10,10],16],[[11,11],16],[[13,13],16],[[14,14],16],0,0,0,0,0,0,[9,3],[10,3],[11,3],[12,3],[13,3],[14,3],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[],[[3,[20]]]],[[],[[3,[21]]]],[[],[[3,[22]]]],[[],[[3,[23]]]],[[],[[3,[24]]]],[[],[[3,[25]]]],[15],[15],[15],[15],[15],[15],[[20,20],16],[[21,21],16],[[22,22],16],[[23,23],16],[[24,24],16],[[25,25],16],[[20,17],18],[[21,17],18],[[22,17],18],[[23,17],18],[[24,17],18],[[25,17],18],[[]],[21,20],[20,21],[[[26,[20]]],21],[[[26,[[26,[20]]]]],21],[[[26,[[26,[[26,[20]]]]]]],21],[[[26,[[26,[[26,[[26,[20]]]]]]]]],21],[[]],[[]],[23,22],[[[26,[[26,[[26,[[26,[22]]]]]]]]],23],[[]],[22,23],[[[26,[22]]],23],[[[26,[[26,[22]]]]],23],[[[26,[[26,[[26,[22]]]]]]],23],[25,24],[[]],[[[26,[[26,[[26,[24]]]]]]],25],[[]],[[[26,[[26,[[26,[[26,[24]]]]]]]]],25],[[[26,[[26,[24]]]]],25],[24,25],[[[26,[24]]],25],0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[20,20],16],[[21,21],16],[[22,22],16],[[23,23],16],[[24,24],16],[[25,25],16],0,0,0,0,0,0,[20,3],[21,3],[22,3],[23,3],[24,3],[25,3],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[],[[3,[27]]]],[[],[[3,[28]]]],[[],[[3,[29]]]],[[],[[3,[30]]]],[[],[[3,[31]]]],[[],[[3,[32]]]],[[],[[3,[33]]]],[[],[[3,[34]]]],[[],[[3,[35]]]],[[],[[3,[36]]]],[[],[[3,[37]]]],[[],[[3,[38]]]],[[],[[3,[39]]]],[[],[[3,[40]]]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[27,27],16],[[28,28],16],[[29,29],16],[[30,30],16],[[31,31],16],[[32,32],16],[[33,33],16],[[34,34],16],[[35,35],16],[[36,36],16],[[37,37],16],[[38,38],16],[[39,39],16],[[40,40],16],[[27,17],18],[[28,17],18],[[29,17],18],[[30,17],18],[[31,17],18],[[32,17],18],[[33,17],18],[[34,17],18],[[35,17],18],[[36,17],18],[[37,17],18],[[38,17],18],[[39,17],18],[[40,17],18],[28,27],[[]],[[]],[[[26,[[26,[27]]]]],28],[[[26,[27]]],28],[27,28],[[[26,[[26,[[26,[[26,[27]]]]]]]]],28],[[[26,[[26,[[26,[27]]]]]]],28],[30,29],[[]],[[[26,[[26,[29]]]]],30],[[]],[29,30],[[[26,[29]]],30],[[[26,[[26,[[26,[[26,[29]]]]]]]]],30],[[[26,[[26,[[26,[29]]]]]]],30],[32,31],[[]],[[[26,[[26,[31]]]]],32],[[[26,[31]]],32],[[]],[31,32],[[[26,[[26,[[26,[31]]]]]]],32],[[[26,[[26,[[26,[[26,[31]]]]]]]]],32],[34,33],[[]],[33,34],[[]],[[[26,[[26,[[26,[[26,[33]]]]]]]]],34],[[[26,[[26,[[26,[33]]]]]]],34],[[[26,[[26,[33]]]]],34],[[[26,[33]]],34],[36,35],[[]],[35,36],[[[26,[35]]],36],[[[26,[[26,[35]]]]],36],[[[26,[[26,[[26,[35]]]]]]],36],[[]],[[[26,[[26,[[26,[[26,[35]]]]]]]]],36],[[]],[38,37],[[[26,[0]]],38],[[[26,[[26,[[26,[0]]]]]]],38],[[[26,[[26,[37]]]]],38],[[[26,[[26,[[26,[37]]]]]]],38],[[[26,[37]]],38],[37,38],[[[26,[[26,[[26,[[26,[37]]]]]]]]],38],[[]],[[[26,[[26,[[26,[[26,[0]]]]]]]]],38],[[[26,[[26,[0]]]]],38],[[]],[40,39],[[[26,[[26,[[26,[[26,[39]]]]]]]]],40],[[[26,[39]]],40],[[]],[39,40],[[[26,[[26,[39]]]]],40],[[[26,[[26,[[26,[39]]]]]]],40],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[27,27],16],[[28,28],16],[[29,29],16],[[30,30],16],[[31,31],16],[[32,32],16],[[33,33],16],[[34,34],16],[[35,35],16],[[36,36],16],[[37,37],16],[[38,38],16],[[39,39],16],[[40,40],16],0,0,[27,3],[28,3],[29,3],[30,3],[31,3],[32,3],[33,3],[34,3],[35,3],[36,3],[37,3],[38,3],[39,3],[40,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[[[49,[48]]],[[49,[48]]]],[[[50,[48]]],[[50,[48]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[],[[3,[41]]]],[[],[[3,[42]]]],[[],[[3,[43]]]],[[],[[3,[44]]]],[[],[[3,[45]]]],[[],[[3,[46]]]],[[],[[3,[47]]]],[[],[[3,[49]]]],[[],[[3,[50]]]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[41,41],16],[[42,42],16],[[43,43],16],[[44,44],16],[[45,45],16],[[46,46],16],[[47,47],16],[[[49,[51]],49],16],[[[50,[51]],50],16],[[41,17],18],[[42,17],18],[[43,17],18],[[44,17],18],[[45,17],18],[[46,17],18],[[47,17],18],[[[49,[52]],17],18],[[[50,[52]],17],18],[53,54],[53,55],[42,56],[41,57],[44,58],[42,58],[41,59],[43,60],[45,61],[[[49,[[7,[6]]]]],62],[55,53],[[]],[59,41],[57,41],[63,41],[56,42],[58,42],[[]],[64,42],[65,43],[60,43],[[]],[58,44],[[]],[64,44],[61,45],[6,45],[[]],[[[26,[46]]],46],[[[7,[6]]],46],[47,46],[[]],[[[26,[[26,[46]]]]],46],[[[26,[46]]],47],[[[26,[[26,[46]]]]],47],[[[26,[[26,[[26,[46]]]]]]],47],[[[26,[[26,[[26,[[26,[46]]]]]]]]],47],[[[7,[6]]],47],[46,47],[[]],[[]],[66],[[],49],[62,[[49,[[7,[6]]]]]],[66],[[]],[[],50],[67,[[3,[49,68]]]],[67,[[3,[50,68]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[41,41],16],[[42,42],16],[[43,43],16],[[44,44],16],[[45,45],16],[[46,46],16],[[47,47],16],[[[49,[51]],49],16],[[[50,[51]],50],16],[41,3],[42,3],[43,3],[44,3],[45,3],[46,3],[47,3],[49,3],[50,3],[49,69],[50,[[3,[[69,[[7,[6]]]],2]]]],[49,[[3,[8,68]]]],[50,[[3,[8,68]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[70,70],[71,71],[72,72],[73,73],[[]],[[]],[[]],[[]],0,0,0,0,[15],[15],[15],[15],[15],[15],[15],[15],[[],[[3,[70]]]],[[],[[3,[71]]]],[[],[[3,[72]]]],[[],[[3,[73]]]],[15],[15],[15],[15],0,0,[[70,70],16],[[71,71],16],[[72,72],16],[[73,73],16],[[70,17],18],[[71,17],18],[[72,17],18],[[73,17],18],[[]],[71,70],[[[26,[[26,[70]]]]],71],[[]],[70,71],[[[26,[70]]],71],[[[26,[[26,[[26,[70]]]]]]],71],[[[26,[[26,[[26,[[26,[70]]]]]]]]],71],[73,72],[[]],[[[26,[[26,[72]]]]],73],[72,73],[[[26,[72]]],73],[[]],[[[26,[[26,[[26,[72]]]]]]],73],[[[26,[[26,[[26,[[26,[72]]]]]]]]],73],0,0,0,0,[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],0,0,0,0,[[70,70],16],[[71,71],16],[[72,72],16],[[73,73],16],0,0,[70,3],[71,3],[72,3],[73,3],0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[74,74],[75,75],[[]],[[]],[15],[15],[15],[15],[[],[[3,[74]]]],[[],[[3,[75]]]],[15],[15],[[74,74],16],[[75,75],16],[[74,17],18],[[75,17],18],[75,74],[[]],[[[26,[[26,[[26,[[26,[74]]]]]]]]],75],[74,75],[[[26,[74]]],75],[[]],[[[26,[[26,[74]]]]],75],[[[26,[[26,[[26,[74]]]]]]],75],[[],15],[[],15],[[]],[[]],[[74,74],16],[[75,75],16],[74,3],[75,3],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[76,76],[77,77],[78,78],[79,79],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[[],[[3,[76]]]],[[],[[3,[77]]]],[[],[[3,[78]]]],[[],[[3,[79]]]],[15],[15],[15],[15],0,0,[[76,76],16],[[77,77],16],[[78,78],16],[[79,79],16],[[76,17],18],[[77,17],18],[[78,17],18],[[79,17],18],[[]],[77,76],[[]],[[[26,[76]]],77],[[[26,[[26,[[26,[[26,[76]]]]]]]]],77],[[[26,[[26,[[26,[76]]]]]]],77],[76,77],[[[26,[[26,[76]]]]],77],[79,78],[[]],[[[26,[[26,[[26,[78]]]]]]],79],[[]],[78,79],[[[26,[[26,[[26,[[26,[78]]]]]]]]],79],[[[26,[78]]],79],[[[26,[[26,[78]]]]],79],0,0,[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],0,0,0,0,[[76,76],16],[[77,77],16],[[78,78],16],[[79,79],16],0,0,[76,3],[77,3],[78,3],[79,3],0,0,[[]],[[]],[[]],[[]],0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[15],[15],[15],[[68,17],18],[[68,17],18],[[]],[80,68],[2,68],[[],15],[[]],[68,[[82,[81]]]],[[],8],[[],3],[[],3],[[],19],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[83,83],[84,84],[[]],[[]],0,0,0,0,[15],[15],[15],[15],[[],[[3,[83]]]],[[],[[3,[84]]]],[15],[15],[[83,83],16],[[84,84],16],[[83,17],18],[[84,17],18],[84,83],[[]],[[]],[83,84],[[[26,[83]]],84],[[[26,[[26,[83]]]]],84],[[[26,[[26,[[26,[83]]]]]]],84],[[[26,[[26,[[26,[[26,[83]]]]]]]]],84],[[],15],[[],15],[[]],[[]],[[83,83],16],[[84,84],16],0,0,0,0,0,0,[83,3],[84,3],0,0,[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],95],[[],96],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[],[[3,[85]]]],[[],[[3,[86]]]],[[],[[3,[87]]]],[[],[[3,[88]]]],[[],[[3,[89]]]],[[],[[3,[90]]]],[[],[[3,[91]]]],[[],[[3,[92]]]],[[],[[3,[93]]]],[[],[[3,[94]]]],[[],[[3,[95]]]],[[],[[3,[96]]]],[[],[[3,[97]]]],[[],[[3,[98]]]],[[],[[3,[99]]]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[85,85],16],[[86,86],16],[[87,87],16],[[88,88],16],[[89,89],16],[[90,90],16],[[91,91],16],[[92,92],16],[[93,93],16],[[94,94],16],[[95,95],16],[[96,96],16],[[97,97],16],[[98,98],16],[[99,99],16],[[85,17],18],[[86,17],18],[[87,17],18],[[88,17],18],[[89,17],18],[[90,17],18],[[91,17],18],[[92,17],18],[[93,17],18],[[94,17],18],[[95,17],18],[[96,17],18],[[97,17],18],[[98,17],18],[[99,17],18],[99,100],[[]],[86,85],[[[26,[85]]],86],[[]],[[[26,[[26,[[26,[[26,[85]]]]]]]]],86],[85,86],[[[26,[[26,[85]]]]],86],[[[26,[[26,[[26,[85]]]]]]],86],[[]],[88,87],[87,88],[[[26,[[26,[87]]]]],88],[[[26,[87]]],88],[[[26,[[26,[[26,[[26,[87]]]]]]]]],88],[[[26,[[26,[[26,[87]]]]]]],88],[[]],[90,89],[[]],[89,90],[[[26,[89]]],90],[[]],[[[26,[[26,[89]]]]],90],[[[26,[[26,[[26,[89]]]]]]],90],[[[26,[[26,[[26,[[26,[89]]]]]]]]],90],[[]],[92,91],[[[26,[[26,[[26,[91]]]]]]],92],[91,92],[[[26,[91]]],92],[[[26,[[26,[91]]]]],92],[[[26,[[26,[[26,[[26,[91]]]]]]]]],92],[[]],[[]],[94,93],[[[26,[[26,[[26,[[26,[93]]]]]]]]],94],[[[26,[93]]],94],[[[26,[[26,[93]]]]],94],[[[26,[[26,[[26,[93]]]]]]],94],[[]],[93,94],[[]],[96,95],[[[26,[[26,[[26,[[26,[0]]]]]]]]],96],[95,96],[[[26,[95]]],96],[[[26,[[26,[95]]]]],96],[[[26,[[26,[[26,[95]]]]]]],96],[[[26,[[26,[[26,[[26,[95]]]]]]]]],96],[[[26,[0]]],96],[[[26,[[26,[0]]]]],96],[[]],[[[26,[[26,[[26,[0]]]]]]],96],[[]],[98,97],[[[26,[[26,[97]]]]],98],[[[26,[97]]],98],[97,98],[[]],[[[26,[[26,[[26,[97]]]]]]],98],[[[26,[[26,[[26,[[26,[97]]]]]]]]],98],[[]],[100,99],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[85,85],16],[[86,86],16],[[87,87],16],[[88,88],16],[[89,89],16],[[90,90],16],[[91,91],16],[[92,92],16],[[93,93],16],[[94,94],16],[[95,95],16],[[96,96],16],[[97,97],16],[[98,98],16],[[99,99],16],[85,3],[86,3],[87,3],[88,3],[89,3],[90,3],[91,3],[92,3],[93,3],[94,3],[95,3],[96,3],[97,3],[98,3],[99,3],[99,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[67,[[3,[99,101]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[102,102],[103,103],[[]],[[]],[15],[15],[15],[15],[[],[[3,[102]]]],[[],[[3,[103]]]],[15],[15],[[102,102],16],[[103,103],16],[[102,17],18],[[103,17],18],[103,102],[[]],[[[26,[[26,[[26,[[26,[102]]]]]]]]],103],[[[26,[[26,[102]]]]],103],[[]],[[[26,[102]]],103],[102,103],[[[26,[[26,[[26,[102]]]]]]],103],[[],15],[[],15],[[]],[[]],[[102,102],16],[[103,103],16],[102,3],[103,3],0,0,0,0,[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[104,104],[105,105],[[]],[[]],0,0,[15],[15],[15],[15],[[],[[3,[104]]]],[[],[[3,[105]]]],[15],[15],[[104,104],16],[[105,105],16],[[104,17],18],[[105,17],18],[[]],[105,104],[[[26,[[26,[[26,[104]]]]]]],105],[104,105],[[[26,[104]]],105],[[[26,[[26,[[26,[[26,[104]]]]]]]]],105],[[[26,[[26,[104]]]]],105],[[]],[[],15],[[],15],[[]],[[]],0,0,[[104,104],16],[[105,105],16],[104,3],[105,3],0,0,[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[106,106],[107,107],[[]],[[]],[15],[15],[15],[15],[[],[[3,[106]]]],[[],[[3,[107]]]],[15],[15],[[106,106],16],[[107,107],16],0,0,[[106,17],18],[[107,17],18],[[]],[107,106],[[[26,[106]]],107],[106,107],[[[26,[[26,[106]]]]],107],[[[26,[[26,[[26,[106]]]]]]],107],[[[26,[[26,[[26,[[26,[106]]]]]]]]],107],[[]],[[],15],[[],15],[[]],[[]],0,0,[[106,106],16],[[107,107],16],0,0,0,0,[106,3],[107,3],0,0,0,0,0,0,[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[108,108],[109,109],[110,110],[111,111],[112,112],[113,113],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[],[[3,[108]]]],[[],[[3,[109]]]],[[],[[3,[110]]]],[[],[[3,[111]]]],[[],[[3,[112]]]],[[],[[3,[113]]]],[15],[15],[15],[15],[15],[15],[[108,108],16],[[109,109],16],[[110,110],16],[[111,111],16],[[112,112],16],[[113,113],16],[[108,17],18],[[109,17],18],[[110,17],18],[[111,17],18],[[112,17],18],[[113,17],18],[[]],[109,108],[[]],[[[26,[[26,[[26,[[26,[108]]]]]]]]],109],[[[26,[[26,[[26,[108]]]]]]],109],[[[26,[[26,[108]]]]],109],[[[26,[108]]],109],[108,109],[111,110],[[]],[[[26,[[26,[[26,[110]]]]]]],111],[[[26,[[26,[110]]]]],111],[110,111],[[]],[[[26,[[26,[[26,[[26,[110]]]]]]]]],111],[[[26,[110]]],111],[[]],[113,112],[[[26,[[26,[[26,[112]]]]]]],113],[[]],[[[26,[112]]],113],[112,113],[[[26,[[26,[112]]]]],113],[[[26,[[26,[[26,[[26,[112]]]]]]]]],113],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[108,108],16],[[109,109],16],[[110,110],16],[[111,111],16],[[112,112],16],[[113,113],16],0,0,0,0,[108,3],[109,3],[110,3],[111,3],[112,3],[113,3],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[114,114],[115,115],[[]],[[]],0,0,[15],[15],[15],[15],[[],[[3,[114]]]],[[],[[3,[115]]]],[15],[15],[[114,114],16],[[115,115],16],[[114,17],18],[[115,17],18],[[]],[115,114],[[[26,[114]]],115],[[[26,[[26,[114]]]]],115],[[[26,[[26,[[26,[114]]]]]]],115],[[[26,[[26,[[26,[[26,[114]]]]]]]]],115],[[]],[114,115],0,0,[[],15],[[],15],[[]],[[]],0,0,[[114,114],16],[[115,115],16],[114,3],[115,3],0,0,0,0,[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[116,116],[117,117],[[]],[[]],[15],[15],[15],[15],[[],[[3,[116]]]],[[],[[3,[117]]]],[15],[15],[[116,116],16],[[117,117],16],[[116,17],18],[[117,17],18],[117,116],[[]],[[]],[[[26,[[26,[[26,[[26,[116]]]]]]]]],117],[116,117],[[[26,[116]]],117],[[[26,[[26,[116]]]]],117],[[[26,[[26,[[26,[116]]]]]]],117],[[],15],[[],15],[[]],[[]],[[116,116],16],[[117,117],16],0,0,[116,3],[117,3],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[118,118],[119,119],[[]],[[]],0,0,0,0,[15],[15],[15],[15],[[],[[3,[118]]]],[[],[[3,[119]]]],[15],[15],[[118,118],16],[[119,119],16],[[118,17],18],[[119,17],18],[[]],[119,118],[[[26,[[26,[[26,[[26,[118]]]]]]]]],119],[[[26,[[26,[[26,[118]]]]]]],119],[118,119],[[]],[[[26,[118]]],119],[[[26,[[26,[118]]]]],119],0,0,[[],15],[[],15],[[]],[[]],[[118,118],16],[[119,119],16],[118,3],[119,3],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[120,120],[121,121],[122,122],[123,123],[124,124],[125,125],[126,126],[127,127],[128,128],[129,129],[130,130],[131,131],[132,132],[133,133],[134,134],[135,135],[136,136],[137,137],[138,138],[139,139],[140,140],[141,141],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[],[[3,[120]]]],[[],[[3,[121]]]],[[],[[3,[122]]]],[[],[[3,[123]]]],[[],[[3,[124]]]],[[],[[3,[125]]]],[[],[[3,[126]]]],[[],[[3,[127]]]],[[],[[3,[128]]]],[[],[[3,[129]]]],[[],[[3,[130]]]],[[],[[3,[131]]]],[[],[[3,[132]]]],[[],[[3,[133]]]],[[],[[3,[134]]]],[[],[[3,[135]]]],[[],[[3,[136]]]],[[],[[3,[137]]]],[[],[[3,[138]]]],[[],[[3,[139]]]],[[],[[3,[140]]]],[[],[[3,[141]]]],[[],[[3,[142]]]],[[],[[3,[143]]]],[[],[[3,[144]]]],[[],[[3,[145]]]],[[],[[3,[146]]]],[[],[[3,[147]]]],[[],[[3,[148]]]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[120,120],16],[[121,121],16],[[122,122],16],[[123,123],16],[[124,124],16],[[125,125],16],[[126,126],16],[[127,127],16],[[128,128],16],[[129,129],16],[[130,130],16],[[131,131],16],[[132,132],16],[[133,133],16],[[134,134],16],[[135,135],16],[[136,136],16],[[137,137],16],[[138,138],16],[[139,139],16],[[140,140],16],[[141,141],16],[[142,142],16],[[143,143],16],[[144,144],16],[[145,145],16],[[146,146],16],[[147,147],16],[[148,148],16],0,0,[[120,17],18],[[121,17],18],[[122,17],18],[[123,17],18],[[124,17],18],[[125,17],18],[[126,17],18],[[127,17],18],[[128,17],18],[[129,17],18],[[130,17],18],[[131,17],18],[[132,17],18],[[133,17],18],[[134,17],18],[[135,17],18],[[136,17],18],[[137,17],18],[[138,17],18],[[139,17],18],[[140,17],18],[[141,17],18],[[142,17],18],[[143,17],18],[[144,17],18],[[145,17],18],[[146,17],18],[[147,17],18],[[148,17],18],[122,149],[121,120],[[]],[[[26,[120]]],121],[[[26,[[26,[120]]]]],121],[[[26,[[26,[[26,[120]]]]]]],121],[[]],[[[26,[[26,[[26,[[26,[120]]]]]]]]],121],[120,121],[149,122],[[]],[124,123],[[]],[[[26,[[26,[123]]]]],124],[[]],[[[26,[[26,[[26,[123]]]]]]],124],[123,124],[[[26,[123]]],124],[[[26,[[26,[[26,[[26,[123]]]]]]]]],124],[126,125],[[]],[[[26,[[26,[125]]]]],126],[[[26,[125]]],126],[[[26,[[26,[[26,[125]]]]]]],126],[[[26,[[26,[[26,[[26,[125]]]]]]]]],126],[[]],[125,126],[[]],[128,127],[[[26,[[26,[127]]]]],128],[[[26,[[26,[[26,[[26,[127]]]]]]]]],128],[[[26,[[26,[[26,[127]]]]]]],128],[[]],[[[26,[127]]],128],[127,128],[130,129],[[]],[[[26,[[26,[[26,[[26,[129]]]]]]]]],130],[[[26,[129]]],130],[[[26,[[26,[[26,[129]]]]]]],130],[[[26,[[26,[129]]]]],130],[[]],[129,130],[[]],[132,131],[[[26,[131]]],132],[[[26,[[26,[[26,[131]]]]]]],132],[[[26,[[26,[[26,[[26,[131]]]]]]]]],132],[131,132],[[[26,[0]]],132],[[[26,[[26,[0]]]]],132],[[]],[[[26,[[26,[131]]]]],132],[[[26,[[26,[[26,[0]]]]]]],132],[[[26,[[26,[[26,[[26,[0]]]]]]]]],132],[134,133],[[]],[[[26,[[26,[[26,[[26,[133]]]]]]]]],134],[[]],[[[26,[[26,[[26,[133]]]]]]],134],[[[26,[[26,[133]]]]],134],[[[26,[133]]],134],[133,134],[[]],[136,135],[[]],[135,136],[[[26,[135]]],136],[[[26,[[26,[135]]]]],136],[[[26,[[26,[[26,[135]]]]]]],136],[[[26,[[26,[[26,[[26,[135]]]]]]]]],136],[138,137],[[]],[[[26,[[26,[[26,[137]]]]]]],138],[[[26,[[26,[[26,[[26,[137]]]]]]]]],138],[[]],[137,138],[[[26,[137]]],138],[[[26,[[26,[137]]]]],138],[140,139],[[]],[139,140],[[[26,[139]]],140],[[[26,[[26,[139]]]]],140],[[[26,[[26,[[26,[139]]]]]]],140],[[[26,[[26,[[26,[[26,[139]]]]]]]]],140],[[]],[142,141],[[]],[[[26,[[26,[141]]]]],142],[[[26,[[26,[[26,[141]]]]]]],142],[[[26,[[26,[[26,[[26,[141]]]]]]]]],142],[141,142],[[[26,[141]]],142],[[]],[144,143],[[]],[[[26,[[26,[[26,[143]]]]]]],144],[143,144],[[[26,[143]]],144],[[[26,[[26,[143]]]]],144],[[[26,[[26,[[26,[[26,[143]]]]]]]]],144],[[]],[146,145],[[]],[[[26,[145]]],146],[145,146],[[[26,[[26,[[26,[[26,[145]]]]]]]]],146],[[]],[[[26,[[26,[[26,[145]]]]]]],146],[[[26,[[26,[145]]]]],146],[[]],[148,147],[[[26,[[26,[[26,[[26,[147]]]]]]]]],148],[[]],[147,148],[[[26,[147]]],148],[[[26,[[26,[147]]]]],148],[[[26,[[26,[[26,[147]]]]]]],148],0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[120,120],16],[[121,121],16],[[122,122],16],[[123,123],16],[[124,124],16],[[125,125],16],[[126,126],16],[[127,127],16],[[128,128],16],[[129,129],16],[[130,130],16],[[131,131],16],[[132,132],16],[[133,133],16],[[134,134],16],[[135,135],16],[[136,136],16],[[137,137],16],[[138,138],16],[[139,139],16],[[140,140],16],[[141,141],16],[[142,142],16],[[143,143],16],[[144,144],16],[[145,145],16],[[146,146],16],[[147,147],16],[[148,148],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[120,3],[121,3],[122,3],[123,3],[124,3],[125,3],[126,3],[127,3],[128,3],[129,3],[130,3],[131,3],[132,3],[133,3],[134,3],[135,3],[136,3],[137,3],[138,3],[139,3],[140,3],[141,3],[142,3],[143,3],[144,3],[145,3],[146,3],[147,3],[148,3],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[150,150],[[]],[[],150],[15],[15],[[],[[3,[150]]]],[15],[[150,150],16],[[150,17],18],[151,152],[[]],[[],15],[[]],0,0,[[150,150],16],0,[150,3],[[]],[[],3],[[],3],[[],19],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[153,153],[154,154],[155,155],[156,156],[157,157],[158,158],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[],[[3,[153]]]],[[],[[3,[154]]]],[[],[[3,[155]]]],[[],[[3,[156]]]],[[],[[3,[157]]]],[[],[[3,[158]]]],[15],[15],[15],[15],[15],[15],[[153,153],16],[[154,154],16],[[155,155],16],[[156,156],16],[[157,157],16],[[158,158],16],[[153,17],[[3,[159]]]],[[153,17],18],[[154,17],18],[[155,17],18],[[156,17],18],[[157,17],18],[[158,17],18],[[]],[154,153],[160,153],[153,154],[[[26,[[26,[[26,[153]]]]]]],154],[156,154],[[[26,[[26,[[26,[[26,[153]]]]]]]]],154],[155,154],[[[26,[[26,[153]]]]],154],[[[26,[153]]],154],[[]],[[]],[160,155],[154,155],[154,156],[160,156],[[]],[161,157],[[]],[158,157],[[]],[157,158],[161,158],[4,[[3,[153]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[153,153],16],[[154,154],16],[[155,155],16],[[156,156],16],[[157,157],16],[[158,158],16],[153,3],[154,3],[155,3],[156,3],[157,3],[158,3],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],3],[4,[[3,[153]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[162,162],[163,163],[164,164],[165,165],[166,166],[167,167],[168,168],[169,169],[170,170],[171,171],[172,172],[173,173],[174,174],[175,175],[176,176],[177,177],[178,178],[179,179],[180,180],[181,181],[182,182],[183,183],[184,184],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[],[[3,[162]]]],[[],[[3,[163]]]],[[],[[3,[164]]]],[[],[[3,[165]]]],[[],[[3,[166]]]],[[],[[3,[167]]]],[[],[[3,[168]]]],[[],[[3,[169]]]],[[],[[3,[170]]]],[[],[[3,[171]]]],[[],[[3,[172]]]],[[],[[3,[173]]]],[[],[[3,[174]]]],[[],[[3,[175]]]],[[],[[3,[176]]]],[[],[[3,[177]]]],[[],[[3,[178]]]],[[],[[3,[179]]]],[[],[[3,[180]]]],[[],[[3,[181]]]],[[],[[3,[182]]]],[[],[[3,[183]]]],[[],[[3,[184]]]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[162,162],16],[[163,163],16],[[164,164],16],[[165,165],16],[[166,166],16],[[167,167],16],[[168,168],16],[[169,169],16],[[170,170],16],[[171,171],16],[[172,172],16],[[173,173],16],[[174,174],16],[[175,175],16],[[176,176],16],[[177,177],16],[[178,178],16],[[179,179],16],[[180,180],16],[[181,181],16],[[182,182],16],[[183,183],16],[[184,184],16],0,0,0,0,[[162,17],18],[[163,17],18],[[164,17],18],[[165,17],18],[[166,17],18],[[167,17],18],[[168,17],18],[[169,17],18],[[170,17],18],[[171,17],18],[[172,17],18],[[173,17],18],[[174,17],18],[[175,17],18],[[176,17],18],[[177,17],18],[[178,17],18],[[179,17],18],[[180,17],18],[[181,17],18],[[182,17],18],[[183,17],18],[[184,17],18],[[]],[163,162],[[[26,[[26,[[26,[[26,[162]]]]]]]]],163],[[[26,[[26,[[26,[162]]]]]]],163],[[[26,[[26,[162]]]]],163],[[[26,[162]]],163],[162,163],[[]],[[]],[165,164],[164,165],[[[26,[164]]],165],[[[26,[[26,[164]]]]],165],[[[26,[[26,[[26,[164]]]]]]],165],[[[26,[[26,[[26,[[26,[164]]]]]]]]],165],[[[26,[0]]],165],[[[26,[[26,[0]]]]],165],[[[26,[[26,[[26,[0]]]]]]],165],[[[26,[[26,[[26,[[26,[0]]]]]]]]],165],[[]],[[]],[167,166],[[[26,[166]]],167],[166,167],[[[26,[[26,[166]]]]],167],[[[26,[[26,[[26,[166]]]]]]],167],[[[26,[[26,[[26,[[26,[166]]]]]]]]],167],[[]],[[]],[169,168],[168,169],[[[26,[168]]],169],[[[26,[[26,[168]]]]],169],[[]],[[[26,[[26,[[26,[168]]]]]]],169],[[[26,[[26,[[26,[[26,[168]]]]]]]]],169],[[]],[171,170],[[[26,[[26,[[26,[[26,[170]]]]]]]]],171],[170,171],[[]],[[[26,[[26,[[26,[170]]]]]]],171],[[[26,[[26,[170]]]]],171],[[[26,[170]]],171],[[]],[173,172],[[[26,[172]]],173],[172,173],[[[26,[[26,[172]]]]],173],[[[26,[[26,[[26,[172]]]]]]],173],[[[26,[[26,[[26,[[26,[172]]]]]]]]],173],[[]],[[]],[175,174],[[[26,[[26,[[26,[[26,[174]]]]]]]]],175],[[]],[[[26,[[26,[174]]]]],175],[[[26,[174]]],175],[174,175],[[[26,[[26,[[26,[174]]]]]]],175],[[]],[177,176],[[[26,[[26,[[26,[176]]]]]]],177],[176,177],[[[26,[[26,[[26,[[26,[176]]]]]]]]],177],[[[26,[[26,[176]]]]],177],[[[26,[176]]],177],[[]],[179,178],[[]],[[[26,[[26,[[26,[178]]]]]]],179],[178,179],[[[26,[[26,[178]]]]],179],[[[26,[[26,[[26,[[26,[178]]]]]]]]],179],[[]],[[[26,[178]]],179],[181,180],[[]],[[[26,[[26,[[26,[[26,[180]]]]]]]]],181],[[[26,[[26,[[26,[180]]]]]]],181],[[]],[[[26,[[26,[180]]]]],181],[[[26,[180]]],181],[180,181],[184,182],[[]],[[]],[184,183],[182,184],[[[26,[[26,[[26,[[26,[183]]]]]]]]],184],[[[26,[[26,[[26,[183]]]]]]],184],[[[26,[[26,[183]]]]],184],[[[26,[183]]],184],[183,184],[[]],[[[26,[[26,[[26,[[26,[182]]]]]]]]],184],[[[26,[182]]],184],[[[26,[[26,[[26,[182]]]]]]],184],[[[26,[[26,[182]]]]],184],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[162,162],16],[[163,163],16],[[164,164],16],[[165,165],16],[[166,166],16],[[167,167],16],[[168,168],16],[[169,169],16],[[170,170],16],[[171,171],16],[[172,172],16],[[173,173],16],[[174,174],16],[[175,175],16],[[176,176],16],[[177,177],16],[[178,178],16],[[179,179],16],[[180,180],16],[[181,181],16],0,0,0,0,0,0,0,0,0,0,[162,3],[163,3],[164,3],[165,3],[166,3],[167,3],[168,3],[169,3],[170,3],[171,3],[172,3],[173,3],[174,3],[175,3],[176,3],[177,3],[178,3],[179,3],[180,3],[181,3],[182,3],[183,3],[184,3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[185,185],[186,186],[187,187],[188,188],[189,189],[190,190],[191,191],[192,192],[193,193],[194,194],[195,195],[196,196],[197,197],[198,198],[199,199],[200,200],[201,201],[202,202],[203,203],[204,204],[205,205],[206,206],[207,207],[208,208],[209,209],[210,210],[211,211],[212,212],[213,213],[214,214],[215,215],[216,216],[217,217],[218,218],[219,219],[220,220],[221,221],[222,222],[223,223],[224,224],[225,225],[226,226],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],217],[[],218],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[],[[3,[185]]]],[[],[[3,[186]]]],[[],[[3,[187]]]],[[],[[3,[188]]]],[[],[[3,[189]]]],[[],[[3,[190]]]],[[],[[3,[191]]]],[[],[[3,[192]]]],[[],[[3,[193]]]],[[],[[3,[194]]]],[[],[[3,[195]]]],[[],[[3,[196]]]],[[],[[3,[197]]]],[[],[[3,[198]]]],[[],[[3,[199]]]],[[],[[3,[200]]]],[[],[[3,[201]]]],[[],[[3,[202]]]],[[],[[3,[203]]]],[[],[[3,[204]]]],[[],[[3,[205]]]],[[],[[3,[206]]]],[[],[[3,[207]]]],[[],[[3,[208]]]],[[],[[3,[209]]]],[[],[[3,[210]]]],[[],[[3,[211]]]],[[],[[3,[212]]]],[[],[[3,[213]]]],[[],[[3,[214]]]],[[],[[3,[215]]]],[[],[[3,[216]]]],[[],[[3,[217]]]],[[],[[3,[218]]]],[[],[[3,[219]]]],[[],[[3,[220]]]],[[],[[3,[221]]]],[[],[[3,[222]]]],[[],[[3,[223]]]],[[],[[3,[224]]]],[[],[[3,[225]]]],[[],[[3,[226]]]],0,0,[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[185,185],16],[[186,186],16],[[187,187],16],[[188,188],16],[[189,189],16],[[190,190],16],[[191,191],16],[[192,192],16],[[193,193],16],[[194,194],16],[[195,195],16],[[196,196],16],[[197,197],16],[[198,198],16],[[199,199],16],[[200,200],16],[[201,201],16],[[202,202],16],[[203,203],16],[[204,204],16],[[205,205],16],[[206,206],16],[[207,207],16],[[208,208],16],[[209,209],16],[[210,210],16],[[211,211],16],[[212,212],16],[[213,213],16],[[214,214],16],[[215,215],16],[[216,216],16],[[217,217],16],[[218,218],16],[[219,219],16],[[220,220],16],[[221,221],16],[[222,222],16],[[223,223],16],[[224,224],16],[[225,225],16],[[226,226],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[185,17],18],[[186,17],18],[[187,17],18],[[188,17],18],[[189,17],18],[[190,17],18],[[191,17],18],[[192,17],18],[[193,17],18],[[194,17],18],[[195,17],18],[[196,17],18],[[197,17],18],[[198,17],18],[[199,17],18],[[200,17],18],[[201,17],18],[[202,17],18],[[203,17],18],[[204,17],18],[[205,17],18],[[206,17],18],[[207,17],18],[[208,17],18],[[209,17],18],[[210,17],18],[[211,17],18],[[212,17],18],[[213,17],18],[[214,17],18],[[215,17],18],[[216,17],18],[[217,17],18],[[218,17],18],[[219,17],18],[[220,17],18],[[221,17],18],[[222,17],18],[[223,17],18],[[224,17],18],[[225,17],18],[[226,17],18],[[]],[186,185],[[[26,[[26,[[26,[185]]]]]]],186],[[]],[[[26,[[26,[[26,[[26,[185]]]]]]]]],186],[185,186],[[[26,[185]]],186],[[[26,[[26,[185]]]]],186],[[]],[188,187],[[]],[[[26,[[26,[[26,[187]]]]]]],188],[[[26,[[26,[187]]]]],188],[[[26,[[26,[[26,[[26,[187]]]]]]]]],188],[187,188],[[[26,[187]]],188],[[]],[190,189],[[[26,[[26,[189]]]]],190],[[[26,[[26,[[26,[[26,[189]]]]]]]]],190],[[]],[189,190],[[[26,[189]]],190],[[[26,[[26,[[26,[189]]]]]]],190],[192,191],[[]],[[[26,[191]]],192],[[[26,[[26,[191]]]]],192],[[[26,[[26,[[26,[[26,[191]]]]]]]]],192],[[]],[[[26,[[26,[[26,[191]]]]]]],192],[191,192],[[]],[194,193],[[[26,[[26,[[26,[0]]]]]]],194],[193,194],[[]],[[[26,[193]]],194],[[[26,[[26,[193]]]]],194],[[[26,[[26,[[26,[[26,[0]]]]]]]]],194],[[[26,[[26,[[26,[193]]]]]]],194],[[[26,[[26,[0]]]]],194],[[[26,[0]]],194],[[[26,[[26,[[26,[[26,[193]]]]]]]]],194],[196,195],[[]],[[[26,[[26,[[26,[[26,[195]]]]]]]]],196],[[[26,[[26,[[26,[195]]]]]]],196],[[[26,[[26,[195]]]]],196],[[[26,[195]]],196],[[]],[195,196],[198,197],[[]],[[[26,[[26,[197]]]]],198],[[[26,[[26,[[26,[[26,[197]]]]]]]]],198],[[]],[[[26,[[26,[[26,[197]]]]]]],198],[[[26,[197]]],198],[197,198],[200,199],[[]],[[[26,[[26,[[26,[[26,[199]]]]]]]]],200],[[[26,[199]]],200],[[[26,[[26,[199]]]]],200],[[[26,[[26,[[26,[199]]]]]]],200],[199,200],[[]],[[]],[202,201],[[[26,[201]]],202],[[[26,[[26,[[26,[[26,[0]]]]]]]]],202],[[[26,[[26,[[26,[201]]]]]]],202],[[]],[201,202],[[[26,[[26,[[26,[[26,[201]]]]]]]]],202],[[[26,[0]]],202],[[[26,[[26,[201]]]]],202],[[[26,[[26,[0]]]]],202],[[[26,[[26,[[26,[0]]]]]]],202],[204,203],[[]],[[[26,[[26,[[26,[[26,[203]]]]]]]]],204],[[[26,[203]]],204],[[[26,[[26,[203]]]]],204],[[[26,[[26,[[26,[203]]]]]]],204],[[]],[203,204],[[]],[206,205],[[]],[[[26,[205]]],206],[[[26,[[26,[[26,[[26,[0]]]]]]]]],206],[205,206],[[[26,[[26,[[26,[0]]]]]]],206],[[[26,[[26,[0]]]]],206],[[[26,[0]]],206],[[[26,[[26,[[26,[[26,[205]]]]]]]]],206],[[[26,[[26,[[26,[205]]]]]]],206],[[[26,[[26,[205]]]]],206],[[]],[208,207],[207,208],[[]],[[[26,[207]]],208],[[[26,[[26,[[26,[[26,[207]]]]]]]]],208],[[[26,[[26,[[26,[207]]]]]]],208],[[[26,[[26,[207]]]]],208],[[]],[210,209],[[[26,[[26,[[26,[[26,[0]]]]]]]]],210],[[]],[[[26,[[26,[[26,[0]]]]]]],210],[[[26,[[26,[0]]]]],210],[[[26,[0]]],210],[[[26,[[26,[[26,[[26,[209]]]]]]]]],210],[[[26,[[26,[[26,[209]]]]]]],210],[[[26,[[26,[209]]]]],210],[[[26,[209]]],210],[209,210],[[]],[212,211],[[[26,[[26,[[26,[211]]]]]]],212],[211,212],[[[26,[[26,[211]]]]],212],[[]],[[[26,[[26,[[26,[[26,[211]]]]]]]]],212],[[[26,[211]]],212],[214,213],[[]],[[[26,[[26,[[26,[[26,[213]]]]]]]]],214],[213,214],[[[26,[[26,[[26,[213]]]]]]],214],[[[26,[[26,[0]]]]],214],[[[26,[[26,[[26,[[26,[0]]]]]]]]],214],[[]],[[[26,[0]]],214],[[[26,[[26,[213]]]]],214],[[[26,[213]]],214],[[[26,[[26,[[26,[0]]]]]]],214],[216,215],[[]],[[]],[[[26,[215]]],216],[[[26,[[26,[215]]]]],216],[215,216],[[[26,[[26,[[26,[215]]]]]]],216],[[[26,[[26,[[26,[[26,[215]]]]]]]]],216],[218,217],[[]],[[[26,[[26,[[26,[[26,[0]]]]]]]]],218],[[]],[[[26,[[26,[217]]]]],218],[[[26,[[26,[[26,[217]]]]]]],218],[[[26,[[26,[[26,[0]]]]]]],218],[[[26,[[26,[0]]]]],218],[[[26,[0]]],218],[217,218],[[[26,[[26,[[26,[[26,[217]]]]]]]]],218],[[[26,[217]]],218],[[]],[220,219],[[[26,[[26,[[26,[[26,[219]]]]]]]]],220],[[[26,[[26,[[26,[219]]]]]]],220],[[[26,[[26,[219]]]]],220],[[[26,[219]]],220],[219,220],[[]],[[]],[222,221],[[[26,[[26,[[26,[[26,[221]]]]]]]]],222],[[[26,[[26,[221]]]]],222],[[[26,[[26,[0]]]]],222],[[[26,[[26,[[26,[221]]]]]]],222],[[]],[[[26,[[26,[[26,[0]]]]]]],222],[[[26,[221]]],222],[[[26,[0]]],222],[221,222],[[[26,[[26,[[26,[[26,[0]]]]]]]]],222],[[]],[224,223],[[[26,[223]]],224],[[[26,[[26,[223]]]]],224],[223,224],[[[26,[[26,[[26,[[26,[223]]]]]]]]],224],[[[26,[[26,[[26,[223]]]]]]],224],[[]],[226,225],[[]],[[[26,[[26,[[26,[225]]]]]]],226],[[]],[225,226],[[[26,[[26,[225]]]]],226],[[[26,[[26,[[26,[[26,[225]]]]]]]]],226],[[[26,[225]]],226],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[185,185],16],[[186,186],16],[[187,187],16],[[188,188],16],[[189,189],16],[[190,190],16],[[191,191],16],[[192,192],16],[[193,193],16],[[194,194],16],[[195,195],16],[[196,196],16],[[197,197],16],[[198,198],16],[[199,199],16],[[200,200],16],[[201,201],16],[[202,202],16],[[203,203],16],[[204,204],16],[[205,205],16],[[206,206],16],[[207,207],16],[[208,208],16],[[209,209],16],[[210,210],16],[[211,211],16],[[212,212],16],[[215,215],16],[[216,216],16],[[217,217],16],[[218,218],16],[[219,219],16],[[220,220],16],[[221,221],16],[[222,222],16],[[223,223],16],[[224,224],16],[[225,225],16],[[226,226],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[185,3],[186,3],[187,3],[188,3],[189,3],[190,3],[191,3],[192,3],[193,3],[194,3],[195,3],[196,3],[197,3],[198,3],[199,3],[200,3],[201,3],[202,3],[203,3],[204,3],[205,3],[206,3],[207,3],[208,3],[209,3],[210,3],[211,3],[212,3],[213,3],[214,3],[215,3],[216,3],[217,3],[218,3],[219,3],[220,3],[221,3],[222,3],[223,3],[224,3],[225,3],[226,3],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[8,"Read"],[4,"Error"],[4,"Result"],[15,"str"],[3,"Error"],[15,"u8"],[3,"Vec"],[3,"String"],[3,"Account"],[4,"TokenPermissions"],[3,"Permissions"],[4,"AuthRequired"],[4,"Timing"],[3,"TimedData"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"TypeId"],[3,"BlockchainState"],[3,"BlockchainStateJson"],[3,"StagedLedgerHash"],[3,"StagedLedgerHashJson"],[3,"NonSnarkStagedLedgerHash"],[3,"NonSnarkStagedLedgerHashJson"],[3,"Versioned"],[3,"BulletproofChallenge"],[3,"BulletproofChallengeJson"],[3,"BulletproofChallenges"],[3,"BulletproofChallengesJson"],[3,"ProofStateBulletproofChallenges"],[3,"ProofStateBulletproofChallengesJson"],[3,"BulletproofChallengeTuple17"],[3,"BulletproofChallengeTuple17Json"],[3,"BulletproofChallengeTuple18"],[3,"BulletproofChallengeTuple18Json"],[4,"BulletproofPreChallenge"],[4,"BulletproofPreChallengeJson"],[3,"ScalarChallengeVector2"],[3,"ScalarChallengeVector2Json"],[3,"U32Json"],[3,"U64Json"],[3,"I64"],[3,"DecimalJson"],[3,"CharJson"],[3,"ByteVec"],[3,"ByteVecJson"],[8,"Clone"],[3,"Base58EncodableType"],[3,"Base58EncodableVersionedType"],[8,"PartialEq"],[8,"Debug"],[6,"HashV1Json"],[6,"HashV1"],[6,"Hash2V1"],[6,"TokenIdV1"],[6,"LengthV1"],[6,"AmountV1"],[6,"ExtendedU32"],[6,"Hex64V1"],[6,"CharV1"],[6,"ByteVecV1"],[15,"u32"],[15,"u64"],[15,"i64"],[15,"never"],[8,"AsRef"],[4,"Error"],[3,"EncodeBuilder"],[3,"VrfOutputTruncated"],[3,"VrfOutputTruncatedJson"],[3,"ConsensusState"],[3,"ConsensusStateJson"],[3,"DeltaTransitionChainProof"],[3,"DeltaTransitionChainProofJson"],[3,"EpochLedger"],[3,"EpochLedgerJson"],[3,"EpochData"],[3,"EpochDataJson"],[4,"Error"],[8,"Error"],[4,"Option"],[3,"ExternalTransition"],[3,"ExternalTransitionJson"],[3,"FieldElementVec"],[3,"FieldElementVecJson"],[3,"FiniteECPoint"],[3,"FiniteECPointJson"],[3,"FiniteECPointVec"],[3,"FiniteECPointVecJson"],[3,"FiniteECPointPair"],[3,"FiniteECPointPairJson"],[3,"FiniteECPointPairVec"],[3,"FiniteECPointPairVecJson"],[4,"ECPoint"],[4,"ECPointJson"],[3,"ECPointVec"],[3,"ECPointVecJson"],[3,"FieldElementJson"],[6,"FieldElement"],[4,"FromHexError"],[3,"GlobalSlot"],[3,"GlobalSlotJson"],[3,"OpeningProof"],[3,"OpeningProofJson"],[3,"ProofEvaluations"],[3,"ProofEvaluationsJson"],[3,"ProofMessages"],[3,"ProofMessagesJson"],[3,"ProofMessageWithoutDegreeBoundList"],[3,"ProofMessageWithoutDegreeBoundListJson"],[3,"ProofMessageWithDegreeBound"],[3,"ProofMessageWithDegreeBoundJson"],[3,"ProtocolConstants"],[3,"ProtocolConstantsJson"],[3,"ProtocolState"],[3,"ProtocolStateJson"],[3,"ProtocolStateBody"],[3,"ProtocolStateBodyJson"],[3,"ProtocolStateProof"],[3,"ProtocolStateProofJson"],[3,"ProtocolStateProofBase64Json"],[3,"ProofStatement"],[3,"ProofStatementJson"],[3,"ProofState"],[3,"ProofStateJson"],[3,"ProofStateDeferredValues"],[3,"ProofStateDeferredValuesJson"],[3,"Plonk"],[3,"PlonkJson"],[4,"ShiftedValue"],[4,"ShiftedValueJson"],[3,"SpongeDigestBeforeEvaluations"],[3,"SpongeDigestBeforeEvaluationsJson"],[3,"ProofStatePairingBased"],[3,"ProofStatePairingBasedJson"],[3,"PairingBased"],[3,"PairingBasedJson"],[3,"PrevEvals"],[3,"PrevEvalsJson"],[3,"PrevXHat"],[3,"PrevXHatJson"],[3,"Proof"],[3,"ProofJson"],[3,"ProofOpeningsEvals"],[3,"ProofOpeningsEvalsJson"],[3,"ProofOpenings"],[3,"ProofOpeningsJson"],[6,"ProtocolStateProofV1"],[3,"ProtocolVersion"],[6,"ProtocolVersionV1"],[6,"ProtocolVersionJson"],[3,"CompressedCurvePoint"],[3,"PublicKeyJson"],[3,"PublicKeyV1"],[3,"PublicKey2V1"],[3,"SignatureV1"],[3,"SignatureJson"],[3,"Error"],[3,"CompressedPubKey"],[3,"Signature"],[3,"TransactionSnarkWork"],[3,"TransactionSnarkWorkJson"],[4,"OneORTwo"],[4,"OneORTwoJson"],[3,"TransactionSnark"],[3,"TransactionSnarkJson"],[3,"Statement"],[3,"StatementJson"],[3,"PendingCoinbaseStackState"],[3,"PendingCoinbaseStackStateJson"],[3,"PendingCoinbase"],[3,"PendingCoinbaseJson"],[3,"StateStack"],[3,"StateStackJson"],[3,"FeeExcess"],[3,"FeeExcessJson"],[3,"FeeExcessPair"],[3,"FeeExcessPairJson"],[3,"Signed"],[3,"SignedJson"],[4,"SgnType"],[4,"SgnTypeJsonProxy"],[4,"SgnTypeJson"],[3,"StagedLedgerDiff"],[3,"StagedLedgerDiffJson"],[3,"StagedLedgerDiffTuple"],[3,"StagedLedgerDiffTupleJson"],[3,"StagedLedgerPreDiff"],[3,"StagedLedgerPreDiffJson"],[3,"UserCommandWithStatus"],[3,"UserCommandWithStatusJson"],[4,"UserCommand"],[4,"UserCommandJson"],[3,"SignedCommand"],[3,"SignedCommandJson"],[3,"SignedCommandPayload"],[3,"SignedCommandPayloadJson"],[3,"SignedCommandPayloadCommon"],[3,"SignedCommandPayloadCommonJson"],[4,"SignedCommandPayloadBody"],[4,"SignedCommandPayloadBodyJson"],[3,"PaymentPayload"],[3,"PaymentPayloadJson"],[4,"StakeDelegation"],[4,"StakeDelegationJson"],[3,"SignedCommandMemo"],[3,"SignedCommandMemoJson"],[4,"TransactionStatus"],[4,"TransactionStatusJson"],[3,"TransactionStatusAuxiliaryData"],[3,"TransactionStatusAuxiliaryDataJson"],[4,"TransactionStatusFailedType"],[4,"TransactionStatusFailedTypeJson"],[3,"TransactionStatusBalanceData"],[3,"TransactionStatusBalanceDataJson"],[4,"CoinBase"],[4,"CoinBaseJson"],[3,"CoinBaseFeeTransfer"],[3,"CoinBaseFeeTransferJson"],[4,"InternalCommandBalanceData"],[4,"InternalCommandBalanceDataJson"],[3,"CoinBaseBalanceData"],[3,"CoinBaseBalanceDataJson"],[3,"FeeTransferBalanceData"],[3,"FeeTransferBalanceDataJson"],[8,"BinProtSerializationType"],[8,"JsonSerializationType"],[13,"Timed"],[13,"NotOwned"],[13,"TokenOwned"],[13,"ScalarChallenge"],[13,"ScalarChallenge"],[13,"Base58DecodeError"],[13,"BinProtError"],[13,"Custom"],[13,"Finite"],[13,"Finite"],[13,"ShiftedValue"],[13,"ShiftedValue"],[13,"One"],[13,"Two"],[13,"One"],[13,"Two"],[13,"One"],[13,"Two"],[13,"One"],[13,"Two"],[13,"CoinBase"],[13,"FeeTransfer"],[13,"CoinBase"],[13,"FeeTransfer"],[13,"PaymentPayload"],[13,"StakeDelegation"],[13,"PaymentPayload"],[13,"StakeDelegation"],[13,"SetDelegate"],[13,"SetDelegate"],[13,"Applied"],[13,"Failed"],[13,"Applied"],[13,"Failed"],[13,"SignedCommand"],[13,"SignedCommand"]]},\
"mina_serialization_types_macros":{"doc":"This crate provides helper procedural macros for type …","t":[24],"n":["AutoFrom"],"q":["mina_serialization_types_macros"],"d":["A derive macro that automatically implements From trait …"],"i":[0],"f":[0],"p":[]},\
"proof_systems":{"doc":"This is a shim crate that directly reexports crates under …","t":[2,2,2,2],"n":["mina_curves","mina_hasher","mina_signer","o1_utils"],"q":["proof_systems","","",""],"d":["","","",""],"i":[0,0,0,0],"f":[0,0,0,0],"p":[]},\
"test_fixtures":{"doc":"","t":[17,3,3,3,3,3,3,3,17,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11],"n":["BLOCK_LAYOUT","BLOCK_RULE","BlockFixture","GENESIS_BLOCK_DEVNET","GENESIS_BLOCK_MAINNET","GENESIS_BLOCK_MAINNET_JSON","JSON_TEST_BLOCKS","TEST_BLOCKS","VERIFICATION_KEY","block_name","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","external_transitionv1","from","from","from","from","from","from","from","init","init","init","init","init","init","init","into","into","into","into","into","into","into","load_json_test_blocks","load_test_blocks","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["test_fixtures","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,7,7,2,4,6,8,9,11,7,2,4,6,8,9,11,7,7,2,2,4,4,6,6,8,8,9,9,11,11,7,2,4,6,8,9,11,7,2,4,6,8,9,11,7,7,2,4,6,8,9,11,7,2,4,6,8,9,11,7,2,4,6,8,9,11,0,0,7,2,4,6,8,9,11,7,2,4,6,8,9,11,7,2,4,6,8,9,11,7,7,2,4,6,8,9,11],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1],[1],[2,3],[1],[4,5],[1],[6,7],[1],[8,7],[1],[9,10],[1],[11,10],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[7,[[13,[12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[15,"usize"],[3,"BLOCK_RULE"],[4,"BinProtRule"],[3,"GENESIS_BLOCK_MAINNET_JSON"],[4,"Value"],[3,"GENESIS_BLOCK_MAINNET"],[3,"BlockFixture"],[3,"GENESIS_BLOCK_DEVNET"],[3,"TEST_BLOCKS"],[3,"HashMap"],[3,"JSON_TEST_BLOCKS"],[6,"ExternalTransitionV1"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"test_serialization":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"versioned":{"doc":"Versioned wrapper types for serialization","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,14,14,14,11,11,0,11,11,11,12,11,11,11,11,11,12],"n":["Versioned","borrow","borrow_mut","clone","clone_into","default","deserialize","eq","fmt","from","from","from","from","from","from","impl_from_for_generic_with_proxy","impl_from_for_newtype","impl_from_for_versioned_with_proxy","impl_from_versioned","impl_from_with_proxy","inner","into","macros","ne","new","serialize","t","to_owned","try_from","try_into","type_id","version","version"],"q":["versioned","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A generic version wrapper around another type","","","","","","","","","","","","","Returns the argument unchanged.","","Macro that implements From trait for 2-way conversion …","Macro that implements From trait for a newtype struct and …","Macro that implements From trait for 2-way conversion …","Macro that implements From trait for for a struct and its …","Macro that implements From trait for 2-way conversion …","Return the inner type","Calls <code>U::from(self)</code>.","Macros that help implement common traits for versioned …","","create a new version type of the given const version","","The wrapped type","","","","","Return the version number","Version byte to be encoded first when the whole wrapper is …"],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,2,2,0,2,2,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[[],2],[[],[[3,[2]]]],[[[2,[4]],2],5],[[[2,[6]],7],8],[[],[[2,[[2,[[2,[2]]]]]]]],[[],[[2,[[2,[2]]]]]],[[],[[2,[2]]]],[[],2],[[]],[9],0,0,0,0,0,[2],[[]],0,[[[2,[4]],2],5],[[],2],[2,3],0,[[]],[[],3],[[],3],[[],10],[2,11],0],"p":[[8,"Clone"],[3,"Versioned"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"never"],[3,"TypeId"],[15,"u16"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
