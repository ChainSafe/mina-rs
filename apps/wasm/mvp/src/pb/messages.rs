// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct PeerStatus {
    // message fields
    pub connected: bool,
    pub peer_id: ::std::string::String,
    pub sync_status: ::std::string::String,
    pub protocol_state_hash: ::std::string::String,
    pub git_commit: ::std::string::String,
    pub uptime_minutes: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeerStatus {
    fn default() -> &'a PeerStatus {
        <PeerStatus as ::protobuf::Message>::default_instance()
    }
}

impl PeerStatus {
    pub fn new() -> PeerStatus {
        ::std::default::Default::default()
    }

    // bool connected = 1;


    pub fn get_connected(&self) -> bool {
        self.connected
    }
    pub fn clear_connected(&mut self) {
        self.connected = false;
    }

    // Param is passed by value, moved
    pub fn set_connected(&mut self, v: bool) {
        self.connected = v;
    }

    // string peer_id = 2;


    pub fn get_peer_id(&self) -> &str {
        &self.peer_id
    }
    pub fn clear_peer_id(&mut self) {
        self.peer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_peer_id(&mut self, v: ::std::string::String) {
        self.peer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer_id(&mut self) -> &mut ::std::string::String {
        &mut self.peer_id
    }

    // Take field
    pub fn take_peer_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.peer_id, ::std::string::String::new())
    }

    // string sync_status = 3;


    pub fn get_sync_status(&self) -> &str {
        &self.sync_status
    }
    pub fn clear_sync_status(&mut self) {
        self.sync_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_sync_status(&mut self, v: ::std::string::String) {
        self.sync_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sync_status(&mut self) -> &mut ::std::string::String {
        &mut self.sync_status
    }

    // Take field
    pub fn take_sync_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sync_status, ::std::string::String::new())
    }

    // string protocol_state_hash = 4;


    pub fn get_protocol_state_hash(&self) -> &str {
        &self.protocol_state_hash
    }
    pub fn clear_protocol_state_hash(&mut self) {
        self.protocol_state_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_protocol_state_hash(&mut self, v: ::std::string::String) {
        self.protocol_state_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protocol_state_hash(&mut self) -> &mut ::std::string::String {
        &mut self.protocol_state_hash
    }

    // Take field
    pub fn take_protocol_state_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.protocol_state_hash, ::std::string::String::new())
    }

    // string git_commit = 5;


    pub fn get_git_commit(&self) -> &str {
        &self.git_commit
    }
    pub fn clear_git_commit(&mut self) {
        self.git_commit.clear();
    }

    // Param is passed by value, moved
    pub fn set_git_commit(&mut self, v: ::std::string::String) {
        self.git_commit = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_git_commit(&mut self) -> &mut ::std::string::String {
        &mut self.git_commit
    }

    // Take field
    pub fn take_git_commit(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.git_commit, ::std::string::String::new())
    }

    // int64 uptime_minutes = 6;


    pub fn get_uptime_minutes(&self) -> i64 {
        self.uptime_minutes
    }
    pub fn clear_uptime_minutes(&mut self) {
        self.uptime_minutes = 0;
    }

    // Param is passed by value, moved
    pub fn set_uptime_minutes(&mut self, v: i64) {
        self.uptime_minutes = v;
    }
}

impl ::protobuf::Message for PeerStatus {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.connected = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.peer_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sync_status)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.protocol_state_hash)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.git_commit)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.uptime_minutes = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.connected != false {
            my_size += 2;
        }
        if !self.peer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.peer_id);
        }
        if !self.sync_status.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.sync_status);
        }
        if !self.protocol_state_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.protocol_state_hash);
        }
        if !self.git_commit.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.git_commit);
        }
        if self.uptime_minutes != 0 {
            my_size += ::protobuf::rt::value_size(6, self.uptime_minutes, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.connected != false {
            os.write_bool(1, self.connected)?;
        }
        if !self.peer_id.is_empty() {
            os.write_string(2, &self.peer_id)?;
        }
        if !self.sync_status.is_empty() {
            os.write_string(3, &self.sync_status)?;
        }
        if !self.protocol_state_hash.is_empty() {
            os.write_string(4, &self.protocol_state_hash)?;
        }
        if !self.git_commit.is_empty() {
            os.write_string(5, &self.git_commit)?;
        }
        if self.uptime_minutes != 0 {
            os.write_int64(6, self.uptime_minutes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeerStatus {
        PeerStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "connected",
                |m: &PeerStatus| { &m.connected },
                |m: &mut PeerStatus| { &mut m.connected },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "peer_id",
                |m: &PeerStatus| { &m.peer_id },
                |m: &mut PeerStatus| { &mut m.peer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sync_status",
                |m: &PeerStatus| { &m.sync_status },
                |m: &mut PeerStatus| { &mut m.sync_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "protocol_state_hash",
                |m: &PeerStatus| { &m.protocol_state_hash },
                |m: &mut PeerStatus| { &mut m.protocol_state_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "git_commit",
                |m: &PeerStatus| { &m.git_commit },
                |m: &mut PeerStatus| { &mut m.git_commit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "uptime_minutes",
                |m: &PeerStatus| { &m.uptime_minutes },
                |m: &mut PeerStatus| { &mut m.uptime_minutes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PeerStatus>(
                "PeerStatus",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PeerStatus {
        static instance: ::protobuf::rt::LazyV2<PeerStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PeerStatus::new)
    }
}

impl ::protobuf::Clear for PeerStatus {
    fn clear(&mut self) {
        self.connected = false;
        self.peer_id.clear();
        self.sync_status.clear();
        self.protocol_state_hash.clear();
        self.git_commit.clear();
        self.uptime_minutes = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeerStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeerStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0emessages.proto\"\xe8\x01\n\nPeerStatus\x12\x1e\n\tconnected\x18\
    \x01\x20\x01(\x08R\tconnectedB\0\x12\x19\n\x07peer_id\x18\x02\x20\x01(\t\
    R\x06peerIdB\0\x12!\n\x0bsync_status\x18\x03\x20\x01(\tR\nsyncStatusB\0\
    \x120\n\x13protocol_state_hash\x18\x04\x20\x01(\tR\x11protocolStateHashB\
    \0\x12\x1f\n\ngit_commit\x18\x05\x20\x01(\tR\tgitCommitB\0\x12'\n\x0eupt\
    ime_minutes\x18\x06\x20\x01(\x03R\ruptimeMinutesB\0:\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
