// Copyright 2020 ChainSafe Systems
// SPDX-License-Identifier: Apache-2.0

const fs = require('fs')
const path = require('path')
const { exec } = require('child_process');

const OUT_BASE_DIR = path.join(__dirname, 'web', 'pb')

function appendHeader(filePath) {
    let content = fs.readFileSync(filePath)
    fs.writeFileSync(filePath, `// This file is generated by protobufjs. Do not edit\n\n${content}`)
}

function execPwdAndAppendHeader(command, filePath, nRetry = 10) {
    exec(command, { cwd: __dirname }, (error, stdout, stderr) => {
        if (stdout) {
            console.log(stdout)
        }
        if (stderr) {
            if (nRetry < 1) {
                console.error(stderr)
            } else {
                execPwdAndAppendHeader(command, filePath, nRetry - 1)
            }
        } else {
            appendHeader(filePath)
        }
    })
}

function convertProtos(dir, subDir) {
    const files = fs.readdirSync(path.join(dir, subDir), { withFileTypes: true })
    files.forEach(entry => {
        const fullPath = path.join(dir, subDir, entry.name)
        if (entry.isFile()) {
            if (entry.name.endsWith('.proto')) {
                const outDir = path.join(OUT_BASE_DIR, subDir)
                if (!fs.existsSync(outDir)) {
                    fs.mkdirSync(outDir)
                }
                const outJsPath = path.join(outDir, entry.name.replace('.proto', '.js'))
                const outTypePath = outJsPath.replace('.js', '.d.ts')
                execPwdAndAppendHeader(`npx pbjs -t static-module --wrap commonjs -o '${outJsPath}' '${fullPath}'`, outJsPath)
                execPwdAndAppendHeader(`npx pbts -o '${outTypePath}' '${outJsPath}'`, outTypePath)
            }
        } else {
            convertProtos(dir, path.join(subDir, entry.name))
        }
    })
}

function main() {
    const protoDir = path.join(__dirname, 'proto')
    convertProtos(protoDir, '')
}

main()
