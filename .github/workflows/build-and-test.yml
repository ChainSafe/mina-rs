on:
  push:
    branches: [main]
  pull_request:

name: CI

env:
  # https://doc.rust-lang.org/cargo/reference/profiles.html#incremental
  CARGO_INCREMENTAL: 1
  # Investigate why it does not build with this flag
  # RUSTFLAGS: -Ctarget-cpu=native

jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: cat .github/cargo-config > $HOME/.cargo/config
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-checks-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
          target: wasm32-unknown-unknown
          override: true
      - run: cargo fmt --all -- --check
      - run: cargo fmt --all --manifest-path apps/Cargo.toml -- --check
      - run: cargo fmt --all --manifest-path apps/wasm/Cargo.toml -- --check
      - name: Check license
        run: ./scripts/add_license.sh
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check All -s
          arguments: --all-features
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check All -s
          arguments: --all-features --manifest-path apps/Cargo.toml
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check All -s
          arguments: --all-features --manifest-path apps/wasm/Cargo.toml
      - run: cargo install cargo-udeps || echo 'already installed'
      - run: rustup install nightly
      - run: rustup +nightly target add wasm32-unknown-unknown
      - run: cargo +nightly udeps --all-targets --all-features
      - run: cargo +nightly udeps --all-targets --all-features --manifest-path apps/Cargo.toml
      - run: cargo +nightly udeps --target wasm32-unknown-unknown --all-features --manifest-path apps/wasm/Cargo.toml
  x86_64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: cat .github/cargo-config > $HOME/.cargo/config
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
          override: true
      # `cargo check` compiles the packages without performing the final step of code generation,
      # which is faster than running `cargo build`.
      - run: cargo check --release --no-default-features
      - run: cargo check --release
      - run: cargo check --release --all-features
      - run: cargo check --release --all-features --manifest-path apps/Cargo.toml
      - run: cargo test --release --all-features
      - run: cargo test --release --all-features --manifest-path apps/Cargo.toml
      # https://github.com/benchmark-action/github-action-benchmark#how-to-use
      # https://github.com/benchmark-action/github-action-benchmark/tree/master/examples/criterion-rs
      - run: (cargo bench --all-features --no-fail-fast -- --output-format bencher > bencher.log) || echo ''
      - name: Download previous benchmark data
        uses: actions/cache@v1
        with:
          path: ./.cache
          key: ${{ runner.os }}-benchmark
      - uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: cargo
          output-file-path: bencher.log
          external-data-json-path: ./.cache/benchmark-data.json
          alert-threshold: 200%
          fail-threshold: 400%
          auto-push: false
          # GitHub API token needs to be given to enable comment-on-alert feature.
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true
          # fail-on-alert: true
      - run: cat ./.cache/benchmark-data.json
      - run: cargo bench --all-features --manifest-path apps/Cargo.toml
      - run: cargo doc --no-deps --release --all-features
      - run: cargo doc --no-deps --release --all-features --manifest-path apps/Cargo.toml
      - run: cargo clippy --release --all-features -- --deny warnings
      - run: cargo clippy --release --all-features --manifest-path apps/Cargo.toml -- --deny warnings
      - name: Run profilers
        run: |
          sudo apt-get update -y
          sudo apt-get install -y valgrind graphviz
          sudo pip install gprof2dot
          ./scripts/profiler.sh
      - uses: actions/upload-artifact@v2
        with:
          name: doc
          path: |
            target/doc/**/*
            apps/target/doc/**/*
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: criterion
          path: |
            target/criterion/**/*
            apps/target/criterion/**/*
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: profiler-reports
          path: apps/target/release/profiler-reports/**/*
          if-no-files-found: error
  wasm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: cat .github/cargo-config > $HOME/.cargo/config
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
          target: wasm32-unknown-unknown
          override: true
      # clippy includes cargo check
      - run: cargo clippy --release --all-features --target wasm32-unknown-unknown -- --deny warnings
      - run: cargo clippy --release --all-features --target wasm32-unknown-unknown --manifest-path apps/Cargo.toml -- --deny warnings
      - run: cargo clippy --release --all-features --target wasm32-unknown-unknown --manifest-path apps/wasm/Cargo.toml -- --deny warnings
      - run: cargo doc --no-deps --release --all-features --target wasm32-unknown-unknown
      - run: cargo doc --no-deps --release --all-features --target wasm32-unknown-unknown --manifest-path apps/Cargo.toml
      - run: cargo doc --no-deps --release --all-features --target wasm32-unknown-unknown --manifest-path apps/wasm/Cargo.toml
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - name: wasm-pack tests for test-serialization
        run: |
          cd protocol/test-serialization
          wasm-pack test --node --release
          wasm-pack test --headless --chrome --release --features browser
      - name: wasm-pack tests for consensus
        run: |
          cd consensus
          wasm-pack test --node --release
          wasm-pack test --headless --chrome --release --features browser
  go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.17"
      - name: build & test mvp proxy
        run: |
          cd apps/mvp-proxy
          go test -v
  node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: cat .github/cargo-config > $HOME/.cargo/config
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
          target: wasm32-unknown-unknown
          override: true
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      # lerna is pre-installed on github CI images
      # per <https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md#project-management>
      # - run: yarn global add lerna
      - run: lerna bootstrap
      - run: lerna run build
      - run: lerna run test
      - run: lerna run lint
  codecov-x86_64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: cat .github/cargo-config > $HOME/.cargo/config
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: llvm-tools-preview
      - uses: taiki-e/install-action@cargo-llvm-cov
      - run: cargo llvm-cov --all-features --lcov --output-path lcov.info
      - uses: actions/upload-artifact@v2
        with:
          name: lcov.info
          path: lcov.info
          if-no-files-found: error
      - name: Upload to codecov
        run: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov -f lcov.info -Z
