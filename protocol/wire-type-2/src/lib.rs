// Copyright 2020 ChainSafe Systems
// SPDX-License-Identifier: Apache-2.0

#![deny(missing_docs)]

//! # Wire Type
//!
//!  `wire-type` exports a trait and a corresponding derive macro to annotate types in Mina-rs
//!  that are to be sent over the wire (must be supported over the network and between node implementations and versions)
//!  
//!  Types that implement WireType have a version number and can be converted into the associated WireType that
//!  includes this version number as a field
//!  
//!  Using WireType is easy! Mostly it will be used via the derive macro
//!  
//!  ```ignore
//!  #[derive(Clone, Debug, PartialEq, Serialize, Deserialize, WireType)]
//!  struct X {
//!      a: u32,
//!  }
//!  // X can now be converted into a type X::WireType generated by the macro
//!  // this wraps X in a t field and has a version field. When serialized this
//!  // will match the serialization used in Mina OCaml
//!  ```
//!  
//!  It is also possible to have types that implement WireType automatically convert to and from their
//!  versioned form when they are serialized or deserialized using serde
//!  ```ignore
//!  #[derive(Clone, Debug, PartialEq, Serialize, Deserialize, WireType)]
//!  #[serde(from = "<Self as WireType>::WireType")] // can be deserialized from its wire type
//!  #[serde(into = "<Self as WireType>::WireType")] // will be serialized to its wire type
//!  struct X {
//!      a: u32,
//!  }
//!  ```
//!  
//!  By default the version number is 1, This can be changed by adding the attribute
//!  ```ignore
//!  #[wire_type( version = 1)]
//!  ```
//!  to any type that uses the derive.
//!  

use serde::{Deserialize, Serialize};

/// Types implementing WireType provide an ascociated wire type and implementations to convert
/// to and from this type.
pub trait WireType<'a>:
    Serialize + Deserialize<'a> + Into<Self::WireType>
{
    /// Associated wire type for this type
    type WireType: Serialize + Deserialize<'a> + Into<Self>;

    /// Convert this type to its wire format
    fn to_wire_type(self) -> Self::WireType {
        self.into()
    }

    /// Convert this type from its wire format
    fn from_wire_type(t: Self::WireType) -> Self {
        t.into()
    }
}
